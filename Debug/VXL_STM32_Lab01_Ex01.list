
VXL_STM32_Lab01_Ex01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024c4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  080025d0  080025d0  000125d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800269c  0800269c  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  0800269c  0800269c  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800269c  0800269c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800269c  0800269c  0001269c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026a0  080026a0  000126a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080026a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000080  08002724  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08002724  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000033d1  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001091  00000000  00000000  0002347a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004b0  00000000  00000000  00024510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000408  00000000  00000000  000249c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d53  00000000  00000000  00024dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000053eb  00000000  00000000  0003bb1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ed83  00000000  00000000  00040f06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bfc89  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001874  00000000  00000000  000bfcdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	080025b8 	.word	0x080025b8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	080025b8 	.word	0x080025b8

0800014c <clearAllClock>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void clearAllClock(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(C12_GPIO_Port, C12_Pin, RESET);
 8000150:	2200      	movs	r2, #0
 8000152:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000156:	4821      	ldr	r0, [pc, #132]	; (80001dc <clearAllClock+0x90>)
 8000158:	f000 fe72 	bl	8000e40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C1_GPIO_Port, C1_Pin, RESET);
 800015c:	2200      	movs	r2, #0
 800015e:	2110      	movs	r1, #16
 8000160:	481e      	ldr	r0, [pc, #120]	; (80001dc <clearAllClock+0x90>)
 8000162:	f000 fe6d 	bl	8000e40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C2_GPIO_Port, C2_Pin, RESET);
 8000166:	2200      	movs	r2, #0
 8000168:	2120      	movs	r1, #32
 800016a:	481c      	ldr	r0, [pc, #112]	; (80001dc <clearAllClock+0x90>)
 800016c:	f000 fe68 	bl	8000e40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C3_GPIO_Port, C3_Pin, RESET);
 8000170:	2200      	movs	r2, #0
 8000172:	2140      	movs	r1, #64	; 0x40
 8000174:	4819      	ldr	r0, [pc, #100]	; (80001dc <clearAllClock+0x90>)
 8000176:	f000 fe63 	bl	8000e40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C4_GPIO_Port, C4_Pin, RESET);
 800017a:	2200      	movs	r2, #0
 800017c:	2180      	movs	r1, #128	; 0x80
 800017e:	4817      	ldr	r0, [pc, #92]	; (80001dc <clearAllClock+0x90>)
 8000180:	f000 fe5e 	bl	8000e40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C5_GPIO_Port, C5_Pin, RESET);
 8000184:	2200      	movs	r2, #0
 8000186:	f44f 7180 	mov.w	r1, #256	; 0x100
 800018a:	4814      	ldr	r0, [pc, #80]	; (80001dc <clearAllClock+0x90>)
 800018c:	f000 fe58 	bl	8000e40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C6_GPIO_Port, C6_Pin, RESET);
 8000190:	2200      	movs	r2, #0
 8000192:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000196:	4811      	ldr	r0, [pc, #68]	; (80001dc <clearAllClock+0x90>)
 8000198:	f000 fe52 	bl	8000e40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C7_GPIO_Port, C7_Pin, RESET);
 800019c:	2200      	movs	r2, #0
 800019e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001a2:	480e      	ldr	r0, [pc, #56]	; (80001dc <clearAllClock+0x90>)
 80001a4:	f000 fe4c 	bl	8000e40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C8_GPIO_Port, C8_Pin, RESET);
 80001a8:	2200      	movs	r2, #0
 80001aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001ae:	480b      	ldr	r0, [pc, #44]	; (80001dc <clearAllClock+0x90>)
 80001b0:	f000 fe46 	bl	8000e40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C9_GPIO_Port, C9_Pin, RESET);
 80001b4:	2200      	movs	r2, #0
 80001b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001ba:	4808      	ldr	r0, [pc, #32]	; (80001dc <clearAllClock+0x90>)
 80001bc:	f000 fe40 	bl	8000e40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C10_GPIO_Port, C10_Pin, RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c6:	4805      	ldr	r0, [pc, #20]	; (80001dc <clearAllClock+0x90>)
 80001c8:	f000 fe3a 	bl	8000e40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C11_GPIO_Port, C11_Pin, RESET);
 80001cc:	2200      	movs	r2, #0
 80001ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001d2:	4802      	ldr	r0, [pc, #8]	; (80001dc <clearAllClock+0x90>)
 80001d4:	f000 fe34 	bl	8000e40 <HAL_GPIO_WritePin>
}
 80001d8:	bf00      	nop
 80001da:	bd80      	pop	{r7, pc}
 80001dc:	40010800 	.word	0x40010800

080001e0 <setNumberOnClock>:

void setNumberOnClock(int n){
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b082      	sub	sp, #8
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
	if (n == 0){
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d106      	bne.n	80001fc <setNumberOnClock+0x1c>
		HAL_GPIO_WritePin(C12_GPIO_Port, C12_Pin, SET);
 80001ee:	2201      	movs	r2, #1
 80001f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001f4:	483a      	ldr	r0, [pc, #232]	; (80002e0 <setNumberOnClock+0x100>)
 80001f6:	f000 fe23 	bl	8000e40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C11_GPIO_Port, C11_Pin, SET);
	}
	else {
		printf("Error number!");
	}
}
 80001fa:	e06c      	b.n	80002d6 <setNumberOnClock+0xf6>
	else if (n == 1){
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	2b01      	cmp	r3, #1
 8000200:	d105      	bne.n	800020e <setNumberOnClock+0x2e>
		HAL_GPIO_WritePin(C1_GPIO_Port, C1_Pin, SET);
 8000202:	2201      	movs	r2, #1
 8000204:	2110      	movs	r1, #16
 8000206:	4836      	ldr	r0, [pc, #216]	; (80002e0 <setNumberOnClock+0x100>)
 8000208:	f000 fe1a 	bl	8000e40 <HAL_GPIO_WritePin>
}
 800020c:	e063      	b.n	80002d6 <setNumberOnClock+0xf6>
	else if (n == 2){
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	2b02      	cmp	r3, #2
 8000212:	d105      	bne.n	8000220 <setNumberOnClock+0x40>
		HAL_GPIO_WritePin(C2_GPIO_Port, C2_Pin, SET);
 8000214:	2201      	movs	r2, #1
 8000216:	2120      	movs	r1, #32
 8000218:	4831      	ldr	r0, [pc, #196]	; (80002e0 <setNumberOnClock+0x100>)
 800021a:	f000 fe11 	bl	8000e40 <HAL_GPIO_WritePin>
}
 800021e:	e05a      	b.n	80002d6 <setNumberOnClock+0xf6>
	else if (n == 3){
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	2b03      	cmp	r3, #3
 8000224:	d105      	bne.n	8000232 <setNumberOnClock+0x52>
		HAL_GPIO_WritePin(C3_GPIO_Port, C3_Pin, SET);
 8000226:	2201      	movs	r2, #1
 8000228:	2140      	movs	r1, #64	; 0x40
 800022a:	482d      	ldr	r0, [pc, #180]	; (80002e0 <setNumberOnClock+0x100>)
 800022c:	f000 fe08 	bl	8000e40 <HAL_GPIO_WritePin>
}
 8000230:	e051      	b.n	80002d6 <setNumberOnClock+0xf6>
	else if (n == 4){
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	2b04      	cmp	r3, #4
 8000236:	d105      	bne.n	8000244 <setNumberOnClock+0x64>
		HAL_GPIO_WritePin(C4_GPIO_Port, C4_Pin, SET);
 8000238:	2201      	movs	r2, #1
 800023a:	2180      	movs	r1, #128	; 0x80
 800023c:	4828      	ldr	r0, [pc, #160]	; (80002e0 <setNumberOnClock+0x100>)
 800023e:	f000 fdff 	bl	8000e40 <HAL_GPIO_WritePin>
}
 8000242:	e048      	b.n	80002d6 <setNumberOnClock+0xf6>
	else if (n == 5){
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	2b05      	cmp	r3, #5
 8000248:	d106      	bne.n	8000258 <setNumberOnClock+0x78>
		HAL_GPIO_WritePin(C5_GPIO_Port, C5_Pin, SET);
 800024a:	2201      	movs	r2, #1
 800024c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000250:	4823      	ldr	r0, [pc, #140]	; (80002e0 <setNumberOnClock+0x100>)
 8000252:	f000 fdf5 	bl	8000e40 <HAL_GPIO_WritePin>
}
 8000256:	e03e      	b.n	80002d6 <setNumberOnClock+0xf6>
	else if (n == 6){
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	2b06      	cmp	r3, #6
 800025c:	d106      	bne.n	800026c <setNumberOnClock+0x8c>
		HAL_GPIO_WritePin(C6_GPIO_Port, C6_Pin, SET);
 800025e:	2201      	movs	r2, #1
 8000260:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000264:	481e      	ldr	r0, [pc, #120]	; (80002e0 <setNumberOnClock+0x100>)
 8000266:	f000 fdeb 	bl	8000e40 <HAL_GPIO_WritePin>
}
 800026a:	e034      	b.n	80002d6 <setNumberOnClock+0xf6>
	else if (n == 7){
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	2b07      	cmp	r3, #7
 8000270:	d106      	bne.n	8000280 <setNumberOnClock+0xa0>
		HAL_GPIO_WritePin(C7_GPIO_Port, C7_Pin, SET);
 8000272:	2201      	movs	r2, #1
 8000274:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000278:	4819      	ldr	r0, [pc, #100]	; (80002e0 <setNumberOnClock+0x100>)
 800027a:	f000 fde1 	bl	8000e40 <HAL_GPIO_WritePin>
}
 800027e:	e02a      	b.n	80002d6 <setNumberOnClock+0xf6>
	else if (n == 8){
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	2b08      	cmp	r3, #8
 8000284:	d106      	bne.n	8000294 <setNumberOnClock+0xb4>
		HAL_GPIO_WritePin(C8_GPIO_Port, C8_Pin, SET);
 8000286:	2201      	movs	r2, #1
 8000288:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800028c:	4814      	ldr	r0, [pc, #80]	; (80002e0 <setNumberOnClock+0x100>)
 800028e:	f000 fdd7 	bl	8000e40 <HAL_GPIO_WritePin>
}
 8000292:	e020      	b.n	80002d6 <setNumberOnClock+0xf6>
	else if (n == 9){
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	2b09      	cmp	r3, #9
 8000298:	d106      	bne.n	80002a8 <setNumberOnClock+0xc8>
		HAL_GPIO_WritePin(C9_GPIO_Port, C9_Pin, SET);
 800029a:	2201      	movs	r2, #1
 800029c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002a0:	480f      	ldr	r0, [pc, #60]	; (80002e0 <setNumberOnClock+0x100>)
 80002a2:	f000 fdcd 	bl	8000e40 <HAL_GPIO_WritePin>
}
 80002a6:	e016      	b.n	80002d6 <setNumberOnClock+0xf6>
	else if (n == 10){
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	2b0a      	cmp	r3, #10
 80002ac:	d106      	bne.n	80002bc <setNumberOnClock+0xdc>
		HAL_GPIO_WritePin(C10_GPIO_Port, C10_Pin, SET);
 80002ae:	2201      	movs	r2, #1
 80002b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002b4:	480a      	ldr	r0, [pc, #40]	; (80002e0 <setNumberOnClock+0x100>)
 80002b6:	f000 fdc3 	bl	8000e40 <HAL_GPIO_WritePin>
}
 80002ba:	e00c      	b.n	80002d6 <setNumberOnClock+0xf6>
	else if (n == 11){
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	2b0b      	cmp	r3, #11
 80002c0:	d106      	bne.n	80002d0 <setNumberOnClock+0xf0>
		HAL_GPIO_WritePin(C11_GPIO_Port, C11_Pin, SET);
 80002c2:	2201      	movs	r2, #1
 80002c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002c8:	4805      	ldr	r0, [pc, #20]	; (80002e0 <setNumberOnClock+0x100>)
 80002ca:	f000 fdb9 	bl	8000e40 <HAL_GPIO_WritePin>
}
 80002ce:	e002      	b.n	80002d6 <setNumberOnClock+0xf6>
		printf("Error number!");
 80002d0:	4804      	ldr	r0, [pc, #16]	; (80002e4 <setNumberOnClock+0x104>)
 80002d2:	f001 f9dd 	bl	8001690 <iprintf>
}
 80002d6:	bf00      	nop
 80002d8:	3708      	adds	r7, #8
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	40010800 	.word	0x40010800
 80002e4:	080025d0 	.word	0x080025d0

080002e8 <clearNumberOnClock>:

void clearNumberOnClock(int n){
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
	if (n == 0){
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d106      	bne.n	8000304 <clearNumberOnClock+0x1c>
		HAL_GPIO_WritePin(C12_GPIO_Port, C12_Pin, RESET);
 80002f6:	2200      	movs	r2, #0
 80002f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002fc:	4838      	ldr	r0, [pc, #224]	; (80003e0 <clearNumberOnClock+0xf8>)
 80002fe:	f000 fd9f 	bl	8000e40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C10_GPIO_Port, C10_Pin, RESET);
	}
	else if (n == 11){
		HAL_GPIO_WritePin(C11_GPIO_Port, C11_Pin, RESET);
	}
}
 8000302:	e068      	b.n	80003d6 <clearNumberOnClock+0xee>
	else if (n == 1){
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	2b01      	cmp	r3, #1
 8000308:	d105      	bne.n	8000316 <clearNumberOnClock+0x2e>
		HAL_GPIO_WritePin(C1_GPIO_Port, C1_Pin, RESET);
 800030a:	2200      	movs	r2, #0
 800030c:	2110      	movs	r1, #16
 800030e:	4834      	ldr	r0, [pc, #208]	; (80003e0 <clearNumberOnClock+0xf8>)
 8000310:	f000 fd96 	bl	8000e40 <HAL_GPIO_WritePin>
}
 8000314:	e05f      	b.n	80003d6 <clearNumberOnClock+0xee>
	else if (n == 2){
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	2b02      	cmp	r3, #2
 800031a:	d105      	bne.n	8000328 <clearNumberOnClock+0x40>
		HAL_GPIO_WritePin(C2_GPIO_Port, C2_Pin, RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	2120      	movs	r1, #32
 8000320:	482f      	ldr	r0, [pc, #188]	; (80003e0 <clearNumberOnClock+0xf8>)
 8000322:	f000 fd8d 	bl	8000e40 <HAL_GPIO_WritePin>
}
 8000326:	e056      	b.n	80003d6 <clearNumberOnClock+0xee>
	else if (n == 3){
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	2b03      	cmp	r3, #3
 800032c:	d105      	bne.n	800033a <clearNumberOnClock+0x52>
		HAL_GPIO_WritePin(C3_GPIO_Port, C3_Pin, RESET);
 800032e:	2200      	movs	r2, #0
 8000330:	2140      	movs	r1, #64	; 0x40
 8000332:	482b      	ldr	r0, [pc, #172]	; (80003e0 <clearNumberOnClock+0xf8>)
 8000334:	f000 fd84 	bl	8000e40 <HAL_GPIO_WritePin>
}
 8000338:	e04d      	b.n	80003d6 <clearNumberOnClock+0xee>
	else if (n == 4){
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	2b04      	cmp	r3, #4
 800033e:	d105      	bne.n	800034c <clearNumberOnClock+0x64>
		HAL_GPIO_WritePin(C4_GPIO_Port, C4_Pin, RESET);
 8000340:	2200      	movs	r2, #0
 8000342:	2180      	movs	r1, #128	; 0x80
 8000344:	4826      	ldr	r0, [pc, #152]	; (80003e0 <clearNumberOnClock+0xf8>)
 8000346:	f000 fd7b 	bl	8000e40 <HAL_GPIO_WritePin>
}
 800034a:	e044      	b.n	80003d6 <clearNumberOnClock+0xee>
	else if (n == 5){
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	2b05      	cmp	r3, #5
 8000350:	d106      	bne.n	8000360 <clearNumberOnClock+0x78>
		HAL_GPIO_WritePin(C5_GPIO_Port, C5_Pin, RESET);
 8000352:	2200      	movs	r2, #0
 8000354:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000358:	4821      	ldr	r0, [pc, #132]	; (80003e0 <clearNumberOnClock+0xf8>)
 800035a:	f000 fd71 	bl	8000e40 <HAL_GPIO_WritePin>
}
 800035e:	e03a      	b.n	80003d6 <clearNumberOnClock+0xee>
	else if (n == 6){
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	2b06      	cmp	r3, #6
 8000364:	d106      	bne.n	8000374 <clearNumberOnClock+0x8c>
		HAL_GPIO_WritePin(C6_GPIO_Port, C6_Pin, RESET);
 8000366:	2200      	movs	r2, #0
 8000368:	f44f 7100 	mov.w	r1, #512	; 0x200
 800036c:	481c      	ldr	r0, [pc, #112]	; (80003e0 <clearNumberOnClock+0xf8>)
 800036e:	f000 fd67 	bl	8000e40 <HAL_GPIO_WritePin>
}
 8000372:	e030      	b.n	80003d6 <clearNumberOnClock+0xee>
	else if (n == 7){
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	2b07      	cmp	r3, #7
 8000378:	d106      	bne.n	8000388 <clearNumberOnClock+0xa0>
		HAL_GPIO_WritePin(C7_GPIO_Port, C7_Pin, RESET);
 800037a:	2200      	movs	r2, #0
 800037c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000380:	4817      	ldr	r0, [pc, #92]	; (80003e0 <clearNumberOnClock+0xf8>)
 8000382:	f000 fd5d 	bl	8000e40 <HAL_GPIO_WritePin>
}
 8000386:	e026      	b.n	80003d6 <clearNumberOnClock+0xee>
	else if (n == 8){
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	2b08      	cmp	r3, #8
 800038c:	d106      	bne.n	800039c <clearNumberOnClock+0xb4>
		HAL_GPIO_WritePin(C8_GPIO_Port, C8_Pin, RESET);
 800038e:	2200      	movs	r2, #0
 8000390:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000394:	4812      	ldr	r0, [pc, #72]	; (80003e0 <clearNumberOnClock+0xf8>)
 8000396:	f000 fd53 	bl	8000e40 <HAL_GPIO_WritePin>
}
 800039a:	e01c      	b.n	80003d6 <clearNumberOnClock+0xee>
	else if (n == 9){
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	2b09      	cmp	r3, #9
 80003a0:	d106      	bne.n	80003b0 <clearNumberOnClock+0xc8>
		HAL_GPIO_WritePin(C9_GPIO_Port, C9_Pin, RESET);
 80003a2:	2200      	movs	r2, #0
 80003a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003a8:	480d      	ldr	r0, [pc, #52]	; (80003e0 <clearNumberOnClock+0xf8>)
 80003aa:	f000 fd49 	bl	8000e40 <HAL_GPIO_WritePin>
}
 80003ae:	e012      	b.n	80003d6 <clearNumberOnClock+0xee>
	else if (n == 10){
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	2b0a      	cmp	r3, #10
 80003b4:	d106      	bne.n	80003c4 <clearNumberOnClock+0xdc>
		HAL_GPIO_WritePin(C10_GPIO_Port, C10_Pin, RESET);
 80003b6:	2200      	movs	r2, #0
 80003b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003bc:	4808      	ldr	r0, [pc, #32]	; (80003e0 <clearNumberOnClock+0xf8>)
 80003be:	f000 fd3f 	bl	8000e40 <HAL_GPIO_WritePin>
}
 80003c2:	e008      	b.n	80003d6 <clearNumberOnClock+0xee>
	else if (n == 11){
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	2b0b      	cmp	r3, #11
 80003c8:	d105      	bne.n	80003d6 <clearNumberOnClock+0xee>
		HAL_GPIO_WritePin(C11_GPIO_Port, C11_Pin, RESET);
 80003ca:	2200      	movs	r2, #0
 80003cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003d0:	4803      	ldr	r0, [pc, #12]	; (80003e0 <clearNumberOnClock+0xf8>)
 80003d2:	f000 fd35 	bl	8000e40 <HAL_GPIO_WritePin>
}
 80003d6:	bf00      	nop
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	40010800 	.word	0x40010800

080003e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003e8:	f000 fa44 	bl	8000874 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ec:	f000 f8ac 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003f0:	f000 f8e6 	bl	80005c0 <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  clearAllClock();
 80003f4:	f7ff feaa 	bl	800014c <clearAllClock>
	  if (s_num >= 60){
 80003f8:	4b4c      	ldr	r3, [pc, #304]	; (800052c <main+0x148>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	2b3b      	cmp	r3, #59	; 0x3b
 80003fe:	dd1f      	ble.n	8000440 <main+0x5c>
		  s_num = 0;
 8000400:	4b4a      	ldr	r3, [pc, #296]	; (800052c <main+0x148>)
 8000402:	2200      	movs	r2, #0
 8000404:	601a      	str	r2, [r3, #0]
		  m_num++;
 8000406:	4b4a      	ldr	r3, [pc, #296]	; (8000530 <main+0x14c>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	3301      	adds	r3, #1
 800040c:	4a48      	ldr	r2, [pc, #288]	; (8000530 <main+0x14c>)
 800040e:	6013      	str	r3, [r2, #0]
		  if (m_num >= 60){
 8000410:	4b47      	ldr	r3, [pc, #284]	; (8000530 <main+0x14c>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	2b3b      	cmp	r3, #59	; 0x3b
 8000416:	dd13      	ble.n	8000440 <main+0x5c>
			  m_num = 0;
 8000418:	4b45      	ldr	r3, [pc, #276]	; (8000530 <main+0x14c>)
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
			  clearNumberOnClock(h_num);
 800041e:	4b45      	ldr	r3, [pc, #276]	; (8000534 <main+0x150>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4618      	mov	r0, r3
 8000424:	f7ff ff60 	bl	80002e8 <clearNumberOnClock>
			  h_num++;
 8000428:	4b42      	ldr	r3, [pc, #264]	; (8000534 <main+0x150>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	3301      	adds	r3, #1
 800042e:	4a41      	ldr	r2, [pc, #260]	; (8000534 <main+0x150>)
 8000430:	6013      	str	r3, [r2, #0]
			  if (h_num >=12){
 8000432:	4b40      	ldr	r3, [pc, #256]	; (8000534 <main+0x150>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	2b0b      	cmp	r3, #11
 8000438:	dd02      	ble.n	8000440 <main+0x5c>
				 h_num = 0;
 800043a:	4b3e      	ldr	r3, [pc, #248]	; (8000534 <main+0x150>)
 800043c:	2200      	movs	r2, #0
 800043e:	601a      	str	r2, [r3, #0]
			  }
		  }
	  }
	  if (s_counter <= 0){
 8000440:	4b3d      	ldr	r3, [pc, #244]	; (8000538 <main+0x154>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	2b00      	cmp	r3, #0
 8000446:	dc07      	bgt.n	8000458 <main+0x74>
		  s_num++;
 8000448:	4b38      	ldr	r3, [pc, #224]	; (800052c <main+0x148>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	3301      	adds	r3, #1
 800044e:	4a37      	ldr	r2, [pc, #220]	; (800052c <main+0x148>)
 8000450:	6013      	str	r3, [r2, #0]
		  s_counter = 2;
 8000452:	4b39      	ldr	r3, [pc, #228]	; (8000538 <main+0x154>)
 8000454:	2202      	movs	r2, #2
 8000456:	601a      	str	r2, [r3, #0]
	  }
	  if (s_num % 5 == 0){
 8000458:	4b34      	ldr	r3, [pc, #208]	; (800052c <main+0x148>)
 800045a:	6819      	ldr	r1, [r3, #0]
 800045c:	4b37      	ldr	r3, [pc, #220]	; (800053c <main+0x158>)
 800045e:	fb83 2301 	smull	r2, r3, r3, r1
 8000462:	105a      	asrs	r2, r3, #1
 8000464:	17cb      	asrs	r3, r1, #31
 8000466:	1ad2      	subs	r2, r2, r3
 8000468:	4613      	mov	r3, r2
 800046a:	009b      	lsls	r3, r3, #2
 800046c:	4413      	add	r3, r2
 800046e:	1aca      	subs	r2, r1, r3
 8000470:	2a00      	cmp	r2, #0
 8000472:	d11f      	bne.n	80004b4 <main+0xd0>
		  if (s_num / 5 == 0){
 8000474:	4b2d      	ldr	r3, [pc, #180]	; (800052c <main+0x148>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	3304      	adds	r3, #4
 800047a:	2b08      	cmp	r3, #8
 800047c:	d803      	bhi.n	8000486 <main+0xa2>
			  clearNumberOnClock(11);
 800047e:	200b      	movs	r0, #11
 8000480:	f7ff ff32 	bl	80002e8 <clearNumberOnClock>
 8000484:	e00b      	b.n	800049e <main+0xba>
		  }
	  else{
		  clearNumberOnClock(s_num / 5 - 1);
 8000486:	4b29      	ldr	r3, [pc, #164]	; (800052c <main+0x148>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4a2c      	ldr	r2, [pc, #176]	; (800053c <main+0x158>)
 800048c:	fb82 1203 	smull	r1, r2, r2, r3
 8000490:	1052      	asrs	r2, r2, #1
 8000492:	17db      	asrs	r3, r3, #31
 8000494:	1ad3      	subs	r3, r2, r3
 8000496:	3b01      	subs	r3, #1
 8000498:	4618      	mov	r0, r3
 800049a:	f7ff ff25 	bl	80002e8 <clearNumberOnClock>
	  }
		  setNumberOnClock(s_num / 5);
 800049e:	4b23      	ldr	r3, [pc, #140]	; (800052c <main+0x148>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4a26      	ldr	r2, [pc, #152]	; (800053c <main+0x158>)
 80004a4:	fb82 1203 	smull	r1, r2, r2, r3
 80004a8:	1052      	asrs	r2, r2, #1
 80004aa:	17db      	asrs	r3, r3, #31
 80004ac:	1ad3      	subs	r3, r2, r3
 80004ae:	4618      	mov	r0, r3
 80004b0:	f7ff fe96 	bl	80001e0 <setNumberOnClock>
	  }
	  setNumberOnClock(h_num);
 80004b4:	4b1f      	ldr	r3, [pc, #124]	; (8000534 <main+0x150>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4618      	mov	r0, r3
 80004ba:	f7ff fe91 	bl	80001e0 <setNumberOnClock>
	  if (m_blink_counter <= 0){
 80004be:	4b20      	ldr	r3, [pc, #128]	; (8000540 <main+0x15c>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	dc23      	bgt.n	800050e <main+0x12a>
		  if (m_state == 0){
 80004c6:	4b1f      	ldr	r3, [pc, #124]	; (8000544 <main+0x160>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d10e      	bne.n	80004ec <main+0x108>
			  setNumberOnClock(m_num/5);
 80004ce:	4b18      	ldr	r3, [pc, #96]	; (8000530 <main+0x14c>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a1a      	ldr	r2, [pc, #104]	; (800053c <main+0x158>)
 80004d4:	fb82 1203 	smull	r1, r2, r2, r3
 80004d8:	1052      	asrs	r2, r2, #1
 80004da:	17db      	asrs	r3, r3, #31
 80004dc:	1ad3      	subs	r3, r2, r3
 80004de:	4618      	mov	r0, r3
 80004e0:	f7ff fe7e 	bl	80001e0 <setNumberOnClock>
			  m_blink_counter = 1;
 80004e4:	4b16      	ldr	r3, [pc, #88]	; (8000540 <main+0x15c>)
 80004e6:	2201      	movs	r2, #1
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	e00d      	b.n	8000508 <main+0x124>
		  }
		  else{
			  clearNumberOnClock(m_num/5);
 80004ec:	4b10      	ldr	r3, [pc, #64]	; (8000530 <main+0x14c>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a12      	ldr	r2, [pc, #72]	; (800053c <main+0x158>)
 80004f2:	fb82 1203 	smull	r1, r2, r2, r3
 80004f6:	1052      	asrs	r2, r2, #1
 80004f8:	17db      	asrs	r3, r3, #31
 80004fa:	1ad3      	subs	r3, r2, r3
 80004fc:	4618      	mov	r0, r3
 80004fe:	f7ff fef3 	bl	80002e8 <clearNumberOnClock>
			  m_blink_counter = 0;
 8000502:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <main+0x15c>)
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
		  }
		  m_blink_counter = 10;
 8000508:	4b0d      	ldr	r3, [pc, #52]	; (8000540 <main+0x15c>)
 800050a:	220a      	movs	r2, #10
 800050c:	601a      	str	r2, [r3, #0]
	  }
	  m_blink_counter--;
 800050e:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <main+0x15c>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	3b01      	subs	r3, #1
 8000514:	4a0a      	ldr	r2, [pc, #40]	; (8000540 <main+0x15c>)
 8000516:	6013      	str	r3, [r2, #0]
	  s_counter--;
 8000518:	4b07      	ldr	r3, [pc, #28]	; (8000538 <main+0x154>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	3b01      	subs	r3, #1
 800051e:	4a06      	ldr	r2, [pc, #24]	; (8000538 <main+0x154>)
 8000520:	6013      	str	r3, [r2, #0]
	  HAL_Delay(10);
 8000522:	200a      	movs	r0, #10
 8000524:	f000 fa08 	bl	8000938 <HAL_Delay>
	  clearAllClock();
 8000528:	e764      	b.n	80003f4 <main+0x10>
 800052a:	bf00      	nop
 800052c:	2000009c 	.word	0x2000009c
 8000530:	20000004 	.word	0x20000004
 8000534:	20000000 	.word	0x20000000
 8000538:	20000008 	.word	0x20000008
 800053c:	66666667 	.word	0x66666667
 8000540:	2000000c 	.word	0x2000000c
 8000544:	200000a0 	.word	0x200000a0

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b090      	sub	sp, #64	; 0x40
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 0318 	add.w	r3, r7, #24
 8000552:	2228      	movs	r2, #40	; 0x28
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f001 f892 	bl	8001680 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	60da      	str	r2, [r3, #12]
 8000568:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800056a:	2302      	movs	r3, #2
 800056c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800056e:	2301      	movs	r3, #1
 8000570:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000572:	2310      	movs	r3, #16
 8000574:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000576:	2300      	movs	r3, #0
 8000578:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057a:	f107 0318 	add.w	r3, r7, #24
 800057e:	4618      	mov	r0, r3
 8000580:	f000 fc76 	bl	8000e70 <HAL_RCC_OscConfig>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800058a:	f000 f859 	bl	8000640 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058e:	230f      	movs	r3, #15
 8000590:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000592:	2300      	movs	r3, #0
 8000594:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 fee4 	bl	8001374 <HAL_RCC_ClockConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80005b2:	f000 f845 	bl	8000640 <Error_Handler>
  }
}
 80005b6:	bf00      	nop
 80005b8:	3740      	adds	r7, #64	; 0x40
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
	...

080005c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c6:	f107 0308 	add.w	r3, r7, #8
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d4:	4b18      	ldr	r3, [pc, #96]	; (8000638 <MX_GPIO_Init+0x78>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	4a17      	ldr	r2, [pc, #92]	; (8000638 <MX_GPIO_Init+0x78>)
 80005da:	f043 0304 	orr.w	r3, r3, #4
 80005de:	6193      	str	r3, [r2, #24]
 80005e0:	4b15      	ldr	r3, [pc, #84]	; (8000638 <MX_GPIO_Init+0x78>)
 80005e2:	699b      	ldr	r3, [r3, #24]
 80005e4:	f003 0304 	and.w	r3, r3, #4
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, C1_Pin|C2_Pin|C3_Pin|C4_Pin
 80005ec:	2200      	movs	r2, #0
 80005ee:	f64f 61f0 	movw	r1, #65264	; 0xfef0
 80005f2:	4812      	ldr	r0, [pc, #72]	; (800063c <MX_GPIO_Init+0x7c>)
 80005f4:	f000 fc24 	bl	8000e40 <HAL_GPIO_WritePin>
                          |C10_Pin|C11_Pin|C12_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : C1_Pin C2_Pin C3_Pin C4_Pin
                           C6_Pin C7_Pin C8_Pin C9_Pin
                           C10_Pin C11_Pin C12_Pin */
  GPIO_InitStruct.Pin = C1_Pin|C2_Pin|C3_Pin|C4_Pin
 80005f8:	f64f 63f0 	movw	r3, #65264	; 0xfef0
 80005fc:	60bb      	str	r3, [r7, #8]
                          |C6_Pin|C7_Pin|C8_Pin|C9_Pin
                          |C10_Pin|C11_Pin|C12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fe:	2301      	movs	r3, #1
 8000600:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000606:	2302      	movs	r3, #2
 8000608:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060a:	f107 0308 	add.w	r3, r7, #8
 800060e:	4619      	mov	r1, r3
 8000610:	480a      	ldr	r0, [pc, #40]	; (800063c <MX_GPIO_Init+0x7c>)
 8000612:	f000 fa99 	bl	8000b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : C5_Pin */
  GPIO_InitStruct.Pin = C5_Pin;
 8000616:	f44f 7380 	mov.w	r3, #256	; 0x100
 800061a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800061c:	2300      	movs	r3, #0
 800061e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000620:	2300      	movs	r3, #0
 8000622:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(C5_GPIO_Port, &GPIO_InitStruct);
 8000624:	f107 0308 	add.w	r3, r7, #8
 8000628:	4619      	mov	r1, r3
 800062a:	4804      	ldr	r0, [pc, #16]	; (800063c <MX_GPIO_Init+0x7c>)
 800062c:	f000 fa8c 	bl	8000b48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000630:	bf00      	nop
 8000632:	3718      	adds	r7, #24
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40021000 	.word	0x40021000
 800063c:	40010800 	.word	0x40010800

08000640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000644:	b672      	cpsid	i
}
 8000646:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000648:	e7fe      	b.n	8000648 <Error_Handler+0x8>
	...

0800064c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000652:	4b0e      	ldr	r3, [pc, #56]	; (800068c <HAL_MspInit+0x40>)
 8000654:	699b      	ldr	r3, [r3, #24]
 8000656:	4a0d      	ldr	r2, [pc, #52]	; (800068c <HAL_MspInit+0x40>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	6193      	str	r3, [r2, #24]
 800065e:	4b0b      	ldr	r3, [pc, #44]	; (800068c <HAL_MspInit+0x40>)
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800066a:	4b08      	ldr	r3, [pc, #32]	; (800068c <HAL_MspInit+0x40>)
 800066c:	69db      	ldr	r3, [r3, #28]
 800066e:	4a07      	ldr	r2, [pc, #28]	; (800068c <HAL_MspInit+0x40>)
 8000670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000674:	61d3      	str	r3, [r2, #28]
 8000676:	4b05      	ldr	r3, [pc, #20]	; (800068c <HAL_MspInit+0x40>)
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	bc80      	pop	{r7}
 800068a:	4770      	bx	lr
 800068c:	40021000 	.word	0x40021000

08000690 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000694:	e7fe      	b.n	8000694 <NMI_Handler+0x4>

08000696 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000696:	b480      	push	{r7}
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800069a:	e7fe      	b.n	800069a <HardFault_Handler+0x4>

0800069c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a0:	e7fe      	b.n	80006a0 <MemManage_Handler+0x4>

080006a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006a2:	b480      	push	{r7}
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006a6:	e7fe      	b.n	80006a6 <BusFault_Handler+0x4>

080006a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006ac:	e7fe      	b.n	80006ac <UsageFault_Handler+0x4>

080006ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ae:	b480      	push	{r7}
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006b2:	bf00      	nop
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bc80      	pop	{r7}
 80006b8:	4770      	bx	lr

080006ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ba:	b480      	push	{r7}
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006be:	bf00      	nop
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bc80      	pop	{r7}
 80006c4:	4770      	bx	lr

080006c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006c6:	b480      	push	{r7}
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bc80      	pop	{r7}
 80006d0:	4770      	bx	lr

080006d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006d2:	b580      	push	{r7, lr}
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006d6:	f000 f913 	bl	8000900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}

080006de <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006de:	b580      	push	{r7, lr}
 80006e0:	b086      	sub	sp, #24
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	60f8      	str	r0, [r7, #12]
 80006e6:	60b9      	str	r1, [r7, #8]
 80006e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
 80006ee:	e00a      	b.n	8000706 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80006f0:	f3af 8000 	nop.w
 80006f4:	4601      	mov	r1, r0
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	1c5a      	adds	r2, r3, #1
 80006fa:	60ba      	str	r2, [r7, #8]
 80006fc:	b2ca      	uxtb	r2, r1
 80006fe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	3301      	adds	r3, #1
 8000704:	617b      	str	r3, [r7, #20]
 8000706:	697a      	ldr	r2, [r7, #20]
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	429a      	cmp	r2, r3
 800070c:	dbf0      	blt.n	80006f0 <_read+0x12>
  }

  return len;
 800070e:	687b      	ldr	r3, [r7, #4]
}
 8000710:	4618      	mov	r0, r3
 8000712:	3718      	adds	r7, #24
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af00      	add	r7, sp, #0
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	60b9      	str	r1, [r7, #8]
 8000722:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]
 8000728:	e009      	b.n	800073e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	1c5a      	adds	r2, r3, #1
 800072e:	60ba      	str	r2, [r7, #8]
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	4618      	mov	r0, r3
 8000734:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	3301      	adds	r3, #1
 800073c:	617b      	str	r3, [r7, #20]
 800073e:	697a      	ldr	r2, [r7, #20]
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	429a      	cmp	r2, r3
 8000744:	dbf1      	blt.n	800072a <_write+0x12>
  }
  return len;
 8000746:	687b      	ldr	r3, [r7, #4]
}
 8000748:	4618      	mov	r0, r3
 800074a:	3718      	adds	r7, #24
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <_close>:

int _close(int file)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000758:	f04f 33ff 	mov.w	r3, #4294967295
}
 800075c:	4618      	mov	r0, r3
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr

08000766 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000766:	b480      	push	{r7}
 8000768:	b083      	sub	sp, #12
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
 800076e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000776:	605a      	str	r2, [r3, #4]
  return 0;
 8000778:	2300      	movs	r3, #0
}
 800077a:	4618      	mov	r0, r3
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr

08000784 <_isatty>:

int _isatty(int file)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800078c:	2301      	movs	r3, #1
}
 800078e:	4618      	mov	r0, r3
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr

08000798 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	60b9      	str	r1, [r7, #8]
 80007a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80007a4:	2300      	movs	r3, #0
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3714      	adds	r7, #20
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr

080007b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007b8:	4a14      	ldr	r2, [pc, #80]	; (800080c <_sbrk+0x5c>)
 80007ba:	4b15      	ldr	r3, [pc, #84]	; (8000810 <_sbrk+0x60>)
 80007bc:	1ad3      	subs	r3, r2, r3
 80007be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007c4:	4b13      	ldr	r3, [pc, #76]	; (8000814 <_sbrk+0x64>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d102      	bne.n	80007d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007cc:	4b11      	ldr	r3, [pc, #68]	; (8000814 <_sbrk+0x64>)
 80007ce:	4a12      	ldr	r2, [pc, #72]	; (8000818 <_sbrk+0x68>)
 80007d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007d2:	4b10      	ldr	r3, [pc, #64]	; (8000814 <_sbrk+0x64>)
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4413      	add	r3, r2
 80007da:	693a      	ldr	r2, [r7, #16]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d207      	bcs.n	80007f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007e0:	f000 ff24 	bl	800162c <__errno>
 80007e4:	4603      	mov	r3, r0
 80007e6:	220c      	movs	r2, #12
 80007e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007ea:	f04f 33ff 	mov.w	r3, #4294967295
 80007ee:	e009      	b.n	8000804 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007f0:	4b08      	ldr	r3, [pc, #32]	; (8000814 <_sbrk+0x64>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007f6:	4b07      	ldr	r3, [pc, #28]	; (8000814 <_sbrk+0x64>)
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4413      	add	r3, r2
 80007fe:	4a05      	ldr	r2, [pc, #20]	; (8000814 <_sbrk+0x64>)
 8000800:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000802:	68fb      	ldr	r3, [r7, #12]
}
 8000804:	4618      	mov	r0, r3
 8000806:	3718      	adds	r7, #24
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20002800 	.word	0x20002800
 8000810:	00000400 	.word	0x00000400
 8000814:	200000a4 	.word	0x200000a4
 8000818:	200000c0 	.word	0x200000c0

0800081c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr

08000828 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000828:	f7ff fff8 	bl	800081c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800082c:	480b      	ldr	r0, [pc, #44]	; (800085c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800082e:	490c      	ldr	r1, [pc, #48]	; (8000860 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000830:	4a0c      	ldr	r2, [pc, #48]	; (8000864 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000832:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000834:	e002      	b.n	800083c <LoopCopyDataInit>

08000836 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000836:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000838:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800083a:	3304      	adds	r3, #4

0800083c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800083c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800083e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000840:	d3f9      	bcc.n	8000836 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000842:	4a09      	ldr	r2, [pc, #36]	; (8000868 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000844:	4c09      	ldr	r4, [pc, #36]	; (800086c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000846:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000848:	e001      	b.n	800084e <LoopFillZerobss>

0800084a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800084a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800084c:	3204      	adds	r2, #4

0800084e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800084e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000850:	d3fb      	bcc.n	800084a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000852:	f000 fef1 	bl	8001638 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000856:	f7ff fdc5 	bl	80003e4 <main>
  bx lr
 800085a:	4770      	bx	lr
  ldr r0, =_sdata
 800085c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000860:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000864:	080026a4 	.word	0x080026a4
  ldr r2, =_sbss
 8000868:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800086c:	200000bc 	.word	0x200000bc

08000870 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000870:	e7fe      	b.n	8000870 <ADC1_2_IRQHandler>
	...

08000874 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000878:	4b08      	ldr	r3, [pc, #32]	; (800089c <HAL_Init+0x28>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a07      	ldr	r2, [pc, #28]	; (800089c <HAL_Init+0x28>)
 800087e:	f043 0310 	orr.w	r3, r3, #16
 8000882:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000884:	2003      	movs	r0, #3
 8000886:	f000 f92b 	bl	8000ae0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800088a:	200f      	movs	r0, #15
 800088c:	f000 f808 	bl	80008a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000890:	f7ff fedc 	bl	800064c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000894:	2300      	movs	r3, #0
}
 8000896:	4618      	mov	r0, r3
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40022000 	.word	0x40022000

080008a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008a8:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <HAL_InitTick+0x54>)
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <HAL_InitTick+0x58>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	4619      	mov	r1, r3
 80008b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80008be:	4618      	mov	r0, r3
 80008c0:	f000 f935 	bl	8000b2e <HAL_SYSTICK_Config>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ca:	2301      	movs	r3, #1
 80008cc:	e00e      	b.n	80008ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2b0f      	cmp	r3, #15
 80008d2:	d80a      	bhi.n	80008ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008d4:	2200      	movs	r2, #0
 80008d6:	6879      	ldr	r1, [r7, #4]
 80008d8:	f04f 30ff 	mov.w	r0, #4294967295
 80008dc:	f000 f90b 	bl	8000af6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008e0:	4a06      	ldr	r2, [pc, #24]	; (80008fc <HAL_InitTick+0x5c>)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008e6:	2300      	movs	r3, #0
 80008e8:	e000      	b.n	80008ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ea:	2301      	movs	r3, #1
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000010 	.word	0x20000010
 80008f8:	20000018 	.word	0x20000018
 80008fc:	20000014 	.word	0x20000014

08000900 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000904:	4b05      	ldr	r3, [pc, #20]	; (800091c <HAL_IncTick+0x1c>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	461a      	mov	r2, r3
 800090a:	4b05      	ldr	r3, [pc, #20]	; (8000920 <HAL_IncTick+0x20>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4413      	add	r3, r2
 8000910:	4a03      	ldr	r2, [pc, #12]	; (8000920 <HAL_IncTick+0x20>)
 8000912:	6013      	str	r3, [r2, #0]
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr
 800091c:	20000018 	.word	0x20000018
 8000920:	200000a8 	.word	0x200000a8

08000924 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  return uwTick;
 8000928:	4b02      	ldr	r3, [pc, #8]	; (8000934 <HAL_GetTick+0x10>)
 800092a:	681b      	ldr	r3, [r3, #0]
}
 800092c:	4618      	mov	r0, r3
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr
 8000934:	200000a8 	.word	0x200000a8

08000938 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000940:	f7ff fff0 	bl	8000924 <HAL_GetTick>
 8000944:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000950:	d005      	beq.n	800095e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000952:	4b0a      	ldr	r3, [pc, #40]	; (800097c <HAL_Delay+0x44>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	461a      	mov	r2, r3
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	4413      	add	r3, r2
 800095c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800095e:	bf00      	nop
 8000960:	f7ff ffe0 	bl	8000924 <HAL_GetTick>
 8000964:	4602      	mov	r2, r0
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	1ad3      	subs	r3, r2, r3
 800096a:	68fa      	ldr	r2, [r7, #12]
 800096c:	429a      	cmp	r2, r3
 800096e:	d8f7      	bhi.n	8000960 <HAL_Delay+0x28>
  {
  }
}
 8000970:	bf00      	nop
 8000972:	bf00      	nop
 8000974:	3710      	adds	r7, #16
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000018 	.word	0x20000018

08000980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000980:	b480      	push	{r7}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f003 0307 	and.w	r3, r3, #7
 800098e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <__NVIC_SetPriorityGrouping+0x44>)
 8000992:	68db      	ldr	r3, [r3, #12]
 8000994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000996:	68ba      	ldr	r2, [r7, #8]
 8000998:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800099c:	4013      	ands	r3, r2
 800099e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009b2:	4a04      	ldr	r2, [pc, #16]	; (80009c4 <__NVIC_SetPriorityGrouping+0x44>)
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	60d3      	str	r3, [r2, #12]
}
 80009b8:	bf00      	nop
 80009ba:	3714      	adds	r7, #20
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009cc:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <__NVIC_GetPriorityGrouping+0x18>)
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	0a1b      	lsrs	r3, r3, #8
 80009d2:	f003 0307 	and.w	r3, r3, #7
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	46bd      	mov	sp, r7
 80009da:	bc80      	pop	{r7}
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	6039      	str	r1, [r7, #0]
 80009ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	db0a      	blt.n	8000a0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	490c      	ldr	r1, [pc, #48]	; (8000a30 <__NVIC_SetPriority+0x4c>)
 80009fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a02:	0112      	lsls	r2, r2, #4
 8000a04:	b2d2      	uxtb	r2, r2
 8000a06:	440b      	add	r3, r1
 8000a08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a0c:	e00a      	b.n	8000a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	4908      	ldr	r1, [pc, #32]	; (8000a34 <__NVIC_SetPriority+0x50>)
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	f003 030f 	and.w	r3, r3, #15
 8000a1a:	3b04      	subs	r3, #4
 8000a1c:	0112      	lsls	r2, r2, #4
 8000a1e:	b2d2      	uxtb	r2, r2
 8000a20:	440b      	add	r3, r1
 8000a22:	761a      	strb	r2, [r3, #24]
}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bc80      	pop	{r7}
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	e000e100 	.word	0xe000e100
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b089      	sub	sp, #36	; 0x24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	f003 0307 	and.w	r3, r3, #7
 8000a4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a4c:	69fb      	ldr	r3, [r7, #28]
 8000a4e:	f1c3 0307 	rsb	r3, r3, #7
 8000a52:	2b04      	cmp	r3, #4
 8000a54:	bf28      	it	cs
 8000a56:	2304      	movcs	r3, #4
 8000a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	2b06      	cmp	r3, #6
 8000a60:	d902      	bls.n	8000a68 <NVIC_EncodePriority+0x30>
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	3b03      	subs	r3, #3
 8000a66:	e000      	b.n	8000a6a <NVIC_EncodePriority+0x32>
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a70:	69bb      	ldr	r3, [r7, #24]
 8000a72:	fa02 f303 	lsl.w	r3, r2, r3
 8000a76:	43da      	mvns	r2, r3
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	401a      	ands	r2, r3
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a80:	f04f 31ff 	mov.w	r1, #4294967295
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8a:	43d9      	mvns	r1, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a90:	4313      	orrs	r3, r2
         );
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3724      	adds	r7, #36	; 0x24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr

08000a9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	3b01      	subs	r3, #1
 8000aa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000aac:	d301      	bcc.n	8000ab2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e00f      	b.n	8000ad2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ab2:	4a0a      	ldr	r2, [pc, #40]	; (8000adc <SysTick_Config+0x40>)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aba:	210f      	movs	r1, #15
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	f7ff ff90 	bl	80009e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ac4:	4b05      	ldr	r3, [pc, #20]	; (8000adc <SysTick_Config+0x40>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aca:	4b04      	ldr	r3, [pc, #16]	; (8000adc <SysTick_Config+0x40>)
 8000acc:	2207      	movs	r2, #7
 8000ace:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	e000e010 	.word	0xe000e010

08000ae0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f7ff ff49 	bl	8000980 <__NVIC_SetPriorityGrouping>
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b086      	sub	sp, #24
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	4603      	mov	r3, r0
 8000afe:	60b9      	str	r1, [r7, #8]
 8000b00:	607a      	str	r2, [r7, #4]
 8000b02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b08:	f7ff ff5e 	bl	80009c8 <__NVIC_GetPriorityGrouping>
 8000b0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	68b9      	ldr	r1, [r7, #8]
 8000b12:	6978      	ldr	r0, [r7, #20]
 8000b14:	f7ff ff90 	bl	8000a38 <NVIC_EncodePriority>
 8000b18:	4602      	mov	r2, r0
 8000b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b1e:	4611      	mov	r1, r2
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff ff5f 	bl	80009e4 <__NVIC_SetPriority>
}
 8000b26:	bf00      	nop
 8000b28:	3718      	adds	r7, #24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b082      	sub	sp, #8
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f7ff ffb0 	bl	8000a9c <SysTick_Config>
 8000b3c:	4603      	mov	r3, r0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
	...

08000b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b08b      	sub	sp, #44	; 0x2c
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b52:	2300      	movs	r3, #0
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b56:	2300      	movs	r3, #0
 8000b58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b5a:	e161      	b.n	8000e20 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b60:	fa02 f303 	lsl.w	r3, r2, r3
 8000b64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	69fa      	ldr	r2, [r7, #28]
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b70:	69ba      	ldr	r2, [r7, #24]
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	f040 8150 	bne.w	8000e1a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	4a97      	ldr	r2, [pc, #604]	; (8000ddc <HAL_GPIO_Init+0x294>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d05e      	beq.n	8000c42 <HAL_GPIO_Init+0xfa>
 8000b84:	4a95      	ldr	r2, [pc, #596]	; (8000ddc <HAL_GPIO_Init+0x294>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d875      	bhi.n	8000c76 <HAL_GPIO_Init+0x12e>
 8000b8a:	4a95      	ldr	r2, [pc, #596]	; (8000de0 <HAL_GPIO_Init+0x298>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d058      	beq.n	8000c42 <HAL_GPIO_Init+0xfa>
 8000b90:	4a93      	ldr	r2, [pc, #588]	; (8000de0 <HAL_GPIO_Init+0x298>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d86f      	bhi.n	8000c76 <HAL_GPIO_Init+0x12e>
 8000b96:	4a93      	ldr	r2, [pc, #588]	; (8000de4 <HAL_GPIO_Init+0x29c>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d052      	beq.n	8000c42 <HAL_GPIO_Init+0xfa>
 8000b9c:	4a91      	ldr	r2, [pc, #580]	; (8000de4 <HAL_GPIO_Init+0x29c>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d869      	bhi.n	8000c76 <HAL_GPIO_Init+0x12e>
 8000ba2:	4a91      	ldr	r2, [pc, #580]	; (8000de8 <HAL_GPIO_Init+0x2a0>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d04c      	beq.n	8000c42 <HAL_GPIO_Init+0xfa>
 8000ba8:	4a8f      	ldr	r2, [pc, #572]	; (8000de8 <HAL_GPIO_Init+0x2a0>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d863      	bhi.n	8000c76 <HAL_GPIO_Init+0x12e>
 8000bae:	4a8f      	ldr	r2, [pc, #572]	; (8000dec <HAL_GPIO_Init+0x2a4>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d046      	beq.n	8000c42 <HAL_GPIO_Init+0xfa>
 8000bb4:	4a8d      	ldr	r2, [pc, #564]	; (8000dec <HAL_GPIO_Init+0x2a4>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d85d      	bhi.n	8000c76 <HAL_GPIO_Init+0x12e>
 8000bba:	2b12      	cmp	r3, #18
 8000bbc:	d82a      	bhi.n	8000c14 <HAL_GPIO_Init+0xcc>
 8000bbe:	2b12      	cmp	r3, #18
 8000bc0:	d859      	bhi.n	8000c76 <HAL_GPIO_Init+0x12e>
 8000bc2:	a201      	add	r2, pc, #4	; (adr r2, 8000bc8 <HAL_GPIO_Init+0x80>)
 8000bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bc8:	08000c43 	.word	0x08000c43
 8000bcc:	08000c1d 	.word	0x08000c1d
 8000bd0:	08000c2f 	.word	0x08000c2f
 8000bd4:	08000c71 	.word	0x08000c71
 8000bd8:	08000c77 	.word	0x08000c77
 8000bdc:	08000c77 	.word	0x08000c77
 8000be0:	08000c77 	.word	0x08000c77
 8000be4:	08000c77 	.word	0x08000c77
 8000be8:	08000c77 	.word	0x08000c77
 8000bec:	08000c77 	.word	0x08000c77
 8000bf0:	08000c77 	.word	0x08000c77
 8000bf4:	08000c77 	.word	0x08000c77
 8000bf8:	08000c77 	.word	0x08000c77
 8000bfc:	08000c77 	.word	0x08000c77
 8000c00:	08000c77 	.word	0x08000c77
 8000c04:	08000c77 	.word	0x08000c77
 8000c08:	08000c77 	.word	0x08000c77
 8000c0c:	08000c25 	.word	0x08000c25
 8000c10:	08000c39 	.word	0x08000c39
 8000c14:	4a76      	ldr	r2, [pc, #472]	; (8000df0 <HAL_GPIO_Init+0x2a8>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d013      	beq.n	8000c42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c1a:	e02c      	b.n	8000c76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	623b      	str	r3, [r7, #32]
          break;
 8000c22:	e029      	b.n	8000c78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	3304      	adds	r3, #4
 8000c2a:	623b      	str	r3, [r7, #32]
          break;
 8000c2c:	e024      	b.n	8000c78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	68db      	ldr	r3, [r3, #12]
 8000c32:	3308      	adds	r3, #8
 8000c34:	623b      	str	r3, [r7, #32]
          break;
 8000c36:	e01f      	b.n	8000c78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	330c      	adds	r3, #12
 8000c3e:	623b      	str	r3, [r7, #32]
          break;
 8000c40:	e01a      	b.n	8000c78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d102      	bne.n	8000c50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c4a:	2304      	movs	r3, #4
 8000c4c:	623b      	str	r3, [r7, #32]
          break;
 8000c4e:	e013      	b.n	8000c78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	689b      	ldr	r3, [r3, #8]
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d105      	bne.n	8000c64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c58:	2308      	movs	r3, #8
 8000c5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	69fa      	ldr	r2, [r7, #28]
 8000c60:	611a      	str	r2, [r3, #16]
          break;
 8000c62:	e009      	b.n	8000c78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c64:	2308      	movs	r3, #8
 8000c66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	69fa      	ldr	r2, [r7, #28]
 8000c6c:	615a      	str	r2, [r3, #20]
          break;
 8000c6e:	e003      	b.n	8000c78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c70:	2300      	movs	r3, #0
 8000c72:	623b      	str	r3, [r7, #32]
          break;
 8000c74:	e000      	b.n	8000c78 <HAL_GPIO_Init+0x130>
          break;
 8000c76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	2bff      	cmp	r3, #255	; 0xff
 8000c7c:	d801      	bhi.n	8000c82 <HAL_GPIO_Init+0x13a>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	e001      	b.n	8000c86 <HAL_GPIO_Init+0x13e>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	3304      	adds	r3, #4
 8000c86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	2bff      	cmp	r3, #255	; 0xff
 8000c8c:	d802      	bhi.n	8000c94 <HAL_GPIO_Init+0x14c>
 8000c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	e002      	b.n	8000c9a <HAL_GPIO_Init+0x152>
 8000c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c96:	3b08      	subs	r3, #8
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	210f      	movs	r1, #15
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	401a      	ands	r2, r3
 8000cac:	6a39      	ldr	r1, [r7, #32]
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb4:	431a      	orrs	r2, r3
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f000 80a9 	beq.w	8000e1a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cc8:	4b4a      	ldr	r3, [pc, #296]	; (8000df4 <HAL_GPIO_Init+0x2ac>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	4a49      	ldr	r2, [pc, #292]	; (8000df4 <HAL_GPIO_Init+0x2ac>)
 8000cce:	f043 0301 	orr.w	r3, r3, #1
 8000cd2:	6193      	str	r3, [r2, #24]
 8000cd4:	4b47      	ldr	r3, [pc, #284]	; (8000df4 <HAL_GPIO_Init+0x2ac>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	f003 0301 	and.w	r3, r3, #1
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ce0:	4a45      	ldr	r2, [pc, #276]	; (8000df8 <HAL_GPIO_Init+0x2b0>)
 8000ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce4:	089b      	lsrs	r3, r3, #2
 8000ce6:	3302      	adds	r3, #2
 8000ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf0:	f003 0303 	and.w	r3, r3, #3
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	220f      	movs	r2, #15
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	4013      	ands	r3, r2
 8000d02:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4a3d      	ldr	r2, [pc, #244]	; (8000dfc <HAL_GPIO_Init+0x2b4>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d00d      	beq.n	8000d28 <HAL_GPIO_Init+0x1e0>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4a3c      	ldr	r2, [pc, #240]	; (8000e00 <HAL_GPIO_Init+0x2b8>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d007      	beq.n	8000d24 <HAL_GPIO_Init+0x1dc>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4a3b      	ldr	r2, [pc, #236]	; (8000e04 <HAL_GPIO_Init+0x2bc>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d101      	bne.n	8000d20 <HAL_GPIO_Init+0x1d8>
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	e004      	b.n	8000d2a <HAL_GPIO_Init+0x1e2>
 8000d20:	2303      	movs	r3, #3
 8000d22:	e002      	b.n	8000d2a <HAL_GPIO_Init+0x1e2>
 8000d24:	2301      	movs	r3, #1
 8000d26:	e000      	b.n	8000d2a <HAL_GPIO_Init+0x1e2>
 8000d28:	2300      	movs	r3, #0
 8000d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d2c:	f002 0203 	and.w	r2, r2, #3
 8000d30:	0092      	lsls	r2, r2, #2
 8000d32:	4093      	lsls	r3, r2
 8000d34:	68fa      	ldr	r2, [r7, #12]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d3a:	492f      	ldr	r1, [pc, #188]	; (8000df8 <HAL_GPIO_Init+0x2b0>)
 8000d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3e:	089b      	lsrs	r3, r3, #2
 8000d40:	3302      	adds	r3, #2
 8000d42:	68fa      	ldr	r2, [r7, #12]
 8000d44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d006      	beq.n	8000d62 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d54:	4b2c      	ldr	r3, [pc, #176]	; (8000e08 <HAL_GPIO_Init+0x2c0>)
 8000d56:	689a      	ldr	r2, [r3, #8]
 8000d58:	492b      	ldr	r1, [pc, #172]	; (8000e08 <HAL_GPIO_Init+0x2c0>)
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	608b      	str	r3, [r1, #8]
 8000d60:	e006      	b.n	8000d70 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d62:	4b29      	ldr	r3, [pc, #164]	; (8000e08 <HAL_GPIO_Init+0x2c0>)
 8000d64:	689a      	ldr	r2, [r3, #8]
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	4927      	ldr	r1, [pc, #156]	; (8000e08 <HAL_GPIO_Init+0x2c0>)
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d006      	beq.n	8000d8a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d7c:	4b22      	ldr	r3, [pc, #136]	; (8000e08 <HAL_GPIO_Init+0x2c0>)
 8000d7e:	68da      	ldr	r2, [r3, #12]
 8000d80:	4921      	ldr	r1, [pc, #132]	; (8000e08 <HAL_GPIO_Init+0x2c0>)
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	60cb      	str	r3, [r1, #12]
 8000d88:	e006      	b.n	8000d98 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d8a:	4b1f      	ldr	r3, [pc, #124]	; (8000e08 <HAL_GPIO_Init+0x2c0>)
 8000d8c:	68da      	ldr	r2, [r3, #12]
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	43db      	mvns	r3, r3
 8000d92:	491d      	ldr	r1, [pc, #116]	; (8000e08 <HAL_GPIO_Init+0x2c0>)
 8000d94:	4013      	ands	r3, r2
 8000d96:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d006      	beq.n	8000db2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000da4:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <HAL_GPIO_Init+0x2c0>)
 8000da6:	685a      	ldr	r2, [r3, #4]
 8000da8:	4917      	ldr	r1, [pc, #92]	; (8000e08 <HAL_GPIO_Init+0x2c0>)
 8000daa:	69bb      	ldr	r3, [r7, #24]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	604b      	str	r3, [r1, #4]
 8000db0:	e006      	b.n	8000dc0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000db2:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <HAL_GPIO_Init+0x2c0>)
 8000db4:	685a      	ldr	r2, [r3, #4]
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	43db      	mvns	r3, r3
 8000dba:	4913      	ldr	r1, [pc, #76]	; (8000e08 <HAL_GPIO_Init+0x2c0>)
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d01f      	beq.n	8000e0c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dcc:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <HAL_GPIO_Init+0x2c0>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	490d      	ldr	r1, [pc, #52]	; (8000e08 <HAL_GPIO_Init+0x2c0>)
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	600b      	str	r3, [r1, #0]
 8000dd8:	e01f      	b.n	8000e1a <HAL_GPIO_Init+0x2d2>
 8000dda:	bf00      	nop
 8000ddc:	10320000 	.word	0x10320000
 8000de0:	10310000 	.word	0x10310000
 8000de4:	10220000 	.word	0x10220000
 8000de8:	10210000 	.word	0x10210000
 8000dec:	10120000 	.word	0x10120000
 8000df0:	10110000 	.word	0x10110000
 8000df4:	40021000 	.word	0x40021000
 8000df8:	40010000 	.word	0x40010000
 8000dfc:	40010800 	.word	0x40010800
 8000e00:	40010c00 	.word	0x40010c00
 8000e04:	40011000 	.word	0x40011000
 8000e08:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e0c:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <HAL_GPIO_Init+0x2f4>)
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	43db      	mvns	r3, r3
 8000e14:	4909      	ldr	r1, [pc, #36]	; (8000e3c <HAL_GPIO_Init+0x2f4>)
 8000e16:	4013      	ands	r3, r2
 8000e18:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e26:	fa22 f303 	lsr.w	r3, r2, r3
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	f47f ae96 	bne.w	8000b5c <HAL_GPIO_Init+0x14>
  }
}
 8000e30:	bf00      	nop
 8000e32:	bf00      	nop
 8000e34:	372c      	adds	r7, #44	; 0x2c
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr
 8000e3c:	40010400 	.word	0x40010400

08000e40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	460b      	mov	r3, r1
 8000e4a:	807b      	strh	r3, [r7, #2]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e50:	787b      	ldrb	r3, [r7, #1]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d003      	beq.n	8000e5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e56:	887a      	ldrh	r2, [r7, #2]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e5c:	e003      	b.n	8000e66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e5e:	887b      	ldrh	r3, [r7, #2]
 8000e60:	041a      	lsls	r2, r3, #16
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	611a      	str	r2, [r3, #16]
}
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr

08000e70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d101      	bne.n	8000e82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e272      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	f000 8087 	beq.w	8000f9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e90:	4b92      	ldr	r3, [pc, #584]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f003 030c 	and.w	r3, r3, #12
 8000e98:	2b04      	cmp	r3, #4
 8000e9a:	d00c      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e9c:	4b8f      	ldr	r3, [pc, #572]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f003 030c 	and.w	r3, r3, #12
 8000ea4:	2b08      	cmp	r3, #8
 8000ea6:	d112      	bne.n	8000ece <HAL_RCC_OscConfig+0x5e>
 8000ea8:	4b8c      	ldr	r3, [pc, #560]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eb4:	d10b      	bne.n	8000ece <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eb6:	4b89      	ldr	r3, [pc, #548]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d06c      	beq.n	8000f9c <HAL_RCC_OscConfig+0x12c>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d168      	bne.n	8000f9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e24c      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ed6:	d106      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x76>
 8000ed8:	4b80      	ldr	r3, [pc, #512]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a7f      	ldr	r2, [pc, #508]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000ede:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ee2:	6013      	str	r3, [r2, #0]
 8000ee4:	e02e      	b.n	8000f44 <HAL_RCC_OscConfig+0xd4>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d10c      	bne.n	8000f08 <HAL_RCC_OscConfig+0x98>
 8000eee:	4b7b      	ldr	r3, [pc, #492]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a7a      	ldr	r2, [pc, #488]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000ef4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ef8:	6013      	str	r3, [r2, #0]
 8000efa:	4b78      	ldr	r3, [pc, #480]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a77      	ldr	r2, [pc, #476]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f04:	6013      	str	r3, [r2, #0]
 8000f06:	e01d      	b.n	8000f44 <HAL_RCC_OscConfig+0xd4>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f10:	d10c      	bne.n	8000f2c <HAL_RCC_OscConfig+0xbc>
 8000f12:	4b72      	ldr	r3, [pc, #456]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a71      	ldr	r2, [pc, #452]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f1c:	6013      	str	r3, [r2, #0]
 8000f1e:	4b6f      	ldr	r3, [pc, #444]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a6e      	ldr	r2, [pc, #440]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f28:	6013      	str	r3, [r2, #0]
 8000f2a:	e00b      	b.n	8000f44 <HAL_RCC_OscConfig+0xd4>
 8000f2c:	4b6b      	ldr	r3, [pc, #428]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a6a      	ldr	r2, [pc, #424]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f36:	6013      	str	r3, [r2, #0]
 8000f38:	4b68      	ldr	r3, [pc, #416]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a67      	ldr	r2, [pc, #412]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d013      	beq.n	8000f74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f4c:	f7ff fcea 	bl	8000924 <HAL_GetTick>
 8000f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f52:	e008      	b.n	8000f66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f54:	f7ff fce6 	bl	8000924 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2b64      	cmp	r3, #100	; 0x64
 8000f60:	d901      	bls.n	8000f66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f62:	2303      	movs	r3, #3
 8000f64:	e200      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f66:	4b5d      	ldr	r3, [pc, #372]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d0f0      	beq.n	8000f54 <HAL_RCC_OscConfig+0xe4>
 8000f72:	e014      	b.n	8000f9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f74:	f7ff fcd6 	bl	8000924 <HAL_GetTick>
 8000f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f7a:	e008      	b.n	8000f8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f7c:	f7ff fcd2 	bl	8000924 <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	2b64      	cmp	r3, #100	; 0x64
 8000f88:	d901      	bls.n	8000f8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e1ec      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f8e:	4b53      	ldr	r3, [pc, #332]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d1f0      	bne.n	8000f7c <HAL_RCC_OscConfig+0x10c>
 8000f9a:	e000      	b.n	8000f9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d063      	beq.n	8001072 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000faa:	4b4c      	ldr	r3, [pc, #304]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f003 030c 	and.w	r3, r3, #12
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d00b      	beq.n	8000fce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fb6:	4b49      	ldr	r3, [pc, #292]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f003 030c 	and.w	r3, r3, #12
 8000fbe:	2b08      	cmp	r3, #8
 8000fc0:	d11c      	bne.n	8000ffc <HAL_RCC_OscConfig+0x18c>
 8000fc2:	4b46      	ldr	r3, [pc, #280]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d116      	bne.n	8000ffc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fce:	4b43      	ldr	r3, [pc, #268]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d005      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x176>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	691b      	ldr	r3, [r3, #16]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d001      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e1c0      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fe6:	4b3d      	ldr	r3, [pc, #244]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	00db      	lsls	r3, r3, #3
 8000ff4:	4939      	ldr	r1, [pc, #228]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ffa:	e03a      	b.n	8001072 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	691b      	ldr	r3, [r3, #16]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d020      	beq.n	8001046 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001004:	4b36      	ldr	r3, [pc, #216]	; (80010e0 <HAL_RCC_OscConfig+0x270>)
 8001006:	2201      	movs	r2, #1
 8001008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800100a:	f7ff fc8b 	bl	8000924 <HAL_GetTick>
 800100e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001010:	e008      	b.n	8001024 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001012:	f7ff fc87 	bl	8000924 <HAL_GetTick>
 8001016:	4602      	mov	r2, r0
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	2b02      	cmp	r3, #2
 800101e:	d901      	bls.n	8001024 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001020:	2303      	movs	r3, #3
 8001022:	e1a1      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001024:	4b2d      	ldr	r3, [pc, #180]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 0302 	and.w	r3, r3, #2
 800102c:	2b00      	cmp	r3, #0
 800102e:	d0f0      	beq.n	8001012 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001030:	4b2a      	ldr	r3, [pc, #168]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	695b      	ldr	r3, [r3, #20]
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	4927      	ldr	r1, [pc, #156]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8001040:	4313      	orrs	r3, r2
 8001042:	600b      	str	r3, [r1, #0]
 8001044:	e015      	b.n	8001072 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001046:	4b26      	ldr	r3, [pc, #152]	; (80010e0 <HAL_RCC_OscConfig+0x270>)
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800104c:	f7ff fc6a 	bl	8000924 <HAL_GetTick>
 8001050:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001052:	e008      	b.n	8001066 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001054:	f7ff fc66 	bl	8000924 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	2b02      	cmp	r3, #2
 8001060:	d901      	bls.n	8001066 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	e180      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001066:	4b1d      	ldr	r3, [pc, #116]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1f0      	bne.n	8001054 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0308 	and.w	r3, r3, #8
 800107a:	2b00      	cmp	r3, #0
 800107c:	d03a      	beq.n	80010f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d019      	beq.n	80010ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001086:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <HAL_RCC_OscConfig+0x274>)
 8001088:	2201      	movs	r2, #1
 800108a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800108c:	f7ff fc4a 	bl	8000924 <HAL_GetTick>
 8001090:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001092:	e008      	b.n	80010a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001094:	f7ff fc46 	bl	8000924 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d901      	bls.n	80010a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010a2:	2303      	movs	r3, #3
 80010a4:	e160      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010a6:	4b0d      	ldr	r3, [pc, #52]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 80010a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d0f0      	beq.n	8001094 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010b2:	2001      	movs	r0, #1
 80010b4:	f000 fa9c 	bl	80015f0 <RCC_Delay>
 80010b8:	e01c      	b.n	80010f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010ba:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <HAL_RCC_OscConfig+0x274>)
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010c0:	f7ff fc30 	bl	8000924 <HAL_GetTick>
 80010c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010c6:	e00f      	b.n	80010e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010c8:	f7ff fc2c 	bl	8000924 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d908      	bls.n	80010e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e146      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
 80010da:	bf00      	nop
 80010dc:	40021000 	.word	0x40021000
 80010e0:	42420000 	.word	0x42420000
 80010e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010e8:	4b92      	ldr	r3, [pc, #584]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80010ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ec:	f003 0302 	and.w	r3, r3, #2
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d1e9      	bne.n	80010c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 0304 	and.w	r3, r3, #4
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	f000 80a6 	beq.w	800124e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001102:	2300      	movs	r3, #0
 8001104:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001106:	4b8b      	ldr	r3, [pc, #556]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d10d      	bne.n	800112e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001112:	4b88      	ldr	r3, [pc, #544]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	4a87      	ldr	r2, [pc, #540]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 8001118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800111c:	61d3      	str	r3, [r2, #28]
 800111e:	4b85      	ldr	r3, [pc, #532]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800112a:	2301      	movs	r3, #1
 800112c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800112e:	4b82      	ldr	r3, [pc, #520]	; (8001338 <HAL_RCC_OscConfig+0x4c8>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001136:	2b00      	cmp	r3, #0
 8001138:	d118      	bne.n	800116c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800113a:	4b7f      	ldr	r3, [pc, #508]	; (8001338 <HAL_RCC_OscConfig+0x4c8>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a7e      	ldr	r2, [pc, #504]	; (8001338 <HAL_RCC_OscConfig+0x4c8>)
 8001140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001144:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001146:	f7ff fbed 	bl	8000924 <HAL_GetTick>
 800114a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800114c:	e008      	b.n	8001160 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800114e:	f7ff fbe9 	bl	8000924 <HAL_GetTick>
 8001152:	4602      	mov	r2, r0
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	2b64      	cmp	r3, #100	; 0x64
 800115a:	d901      	bls.n	8001160 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800115c:	2303      	movs	r3, #3
 800115e:	e103      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001160:	4b75      	ldr	r3, [pc, #468]	; (8001338 <HAL_RCC_OscConfig+0x4c8>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001168:	2b00      	cmp	r3, #0
 800116a:	d0f0      	beq.n	800114e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d106      	bne.n	8001182 <HAL_RCC_OscConfig+0x312>
 8001174:	4b6f      	ldr	r3, [pc, #444]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 8001176:	6a1b      	ldr	r3, [r3, #32]
 8001178:	4a6e      	ldr	r2, [pc, #440]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 800117a:	f043 0301 	orr.w	r3, r3, #1
 800117e:	6213      	str	r3, [r2, #32]
 8001180:	e02d      	b.n	80011de <HAL_RCC_OscConfig+0x36e>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d10c      	bne.n	80011a4 <HAL_RCC_OscConfig+0x334>
 800118a:	4b6a      	ldr	r3, [pc, #424]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 800118c:	6a1b      	ldr	r3, [r3, #32]
 800118e:	4a69      	ldr	r2, [pc, #420]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 8001190:	f023 0301 	bic.w	r3, r3, #1
 8001194:	6213      	str	r3, [r2, #32]
 8001196:	4b67      	ldr	r3, [pc, #412]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 8001198:	6a1b      	ldr	r3, [r3, #32]
 800119a:	4a66      	ldr	r2, [pc, #408]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 800119c:	f023 0304 	bic.w	r3, r3, #4
 80011a0:	6213      	str	r3, [r2, #32]
 80011a2:	e01c      	b.n	80011de <HAL_RCC_OscConfig+0x36e>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	2b05      	cmp	r3, #5
 80011aa:	d10c      	bne.n	80011c6 <HAL_RCC_OscConfig+0x356>
 80011ac:	4b61      	ldr	r3, [pc, #388]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80011ae:	6a1b      	ldr	r3, [r3, #32]
 80011b0:	4a60      	ldr	r2, [pc, #384]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80011b2:	f043 0304 	orr.w	r3, r3, #4
 80011b6:	6213      	str	r3, [r2, #32]
 80011b8:	4b5e      	ldr	r3, [pc, #376]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80011ba:	6a1b      	ldr	r3, [r3, #32]
 80011bc:	4a5d      	ldr	r2, [pc, #372]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	6213      	str	r3, [r2, #32]
 80011c4:	e00b      	b.n	80011de <HAL_RCC_OscConfig+0x36e>
 80011c6:	4b5b      	ldr	r3, [pc, #364]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80011c8:	6a1b      	ldr	r3, [r3, #32]
 80011ca:	4a5a      	ldr	r2, [pc, #360]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80011cc:	f023 0301 	bic.w	r3, r3, #1
 80011d0:	6213      	str	r3, [r2, #32]
 80011d2:	4b58      	ldr	r3, [pc, #352]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80011d4:	6a1b      	ldr	r3, [r3, #32]
 80011d6:	4a57      	ldr	r2, [pc, #348]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80011d8:	f023 0304 	bic.w	r3, r3, #4
 80011dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d015      	beq.n	8001212 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011e6:	f7ff fb9d 	bl	8000924 <HAL_GetTick>
 80011ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011ec:	e00a      	b.n	8001204 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011ee:	f7ff fb99 	bl	8000924 <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d901      	bls.n	8001204 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e0b1      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001204:	4b4b      	ldr	r3, [pc, #300]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 8001206:	6a1b      	ldr	r3, [r3, #32]
 8001208:	f003 0302 	and.w	r3, r3, #2
 800120c:	2b00      	cmp	r3, #0
 800120e:	d0ee      	beq.n	80011ee <HAL_RCC_OscConfig+0x37e>
 8001210:	e014      	b.n	800123c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001212:	f7ff fb87 	bl	8000924 <HAL_GetTick>
 8001216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001218:	e00a      	b.n	8001230 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800121a:	f7ff fb83 	bl	8000924 <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	f241 3288 	movw	r2, #5000	; 0x1388
 8001228:	4293      	cmp	r3, r2
 800122a:	d901      	bls.n	8001230 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800122c:	2303      	movs	r3, #3
 800122e:	e09b      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001230:	4b40      	ldr	r3, [pc, #256]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 8001232:	6a1b      	ldr	r3, [r3, #32]
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1ee      	bne.n	800121a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800123c:	7dfb      	ldrb	r3, [r7, #23]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d105      	bne.n	800124e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001242:	4b3c      	ldr	r3, [pc, #240]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	4a3b      	ldr	r2, [pc, #236]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 8001248:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800124c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	2b00      	cmp	r3, #0
 8001254:	f000 8087 	beq.w	8001366 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001258:	4b36      	ldr	r3, [pc, #216]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f003 030c 	and.w	r3, r3, #12
 8001260:	2b08      	cmp	r3, #8
 8001262:	d061      	beq.n	8001328 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	69db      	ldr	r3, [r3, #28]
 8001268:	2b02      	cmp	r3, #2
 800126a:	d146      	bne.n	80012fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800126c:	4b33      	ldr	r3, [pc, #204]	; (800133c <HAL_RCC_OscConfig+0x4cc>)
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001272:	f7ff fb57 	bl	8000924 <HAL_GetTick>
 8001276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001278:	e008      	b.n	800128c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800127a:	f7ff fb53 	bl	8000924 <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e06d      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800128c:	4b29      	ldr	r3, [pc, #164]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1f0      	bne.n	800127a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a1b      	ldr	r3, [r3, #32]
 800129c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a0:	d108      	bne.n	80012b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012a2:	4b24      	ldr	r3, [pc, #144]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	4921      	ldr	r1, [pc, #132]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80012b0:	4313      	orrs	r3, r2
 80012b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012b4:	4b1f      	ldr	r3, [pc, #124]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a19      	ldr	r1, [r3, #32]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c4:	430b      	orrs	r3, r1
 80012c6:	491b      	ldr	r1, [pc, #108]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80012c8:	4313      	orrs	r3, r2
 80012ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012cc:	4b1b      	ldr	r3, [pc, #108]	; (800133c <HAL_RCC_OscConfig+0x4cc>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d2:	f7ff fb27 	bl	8000924 <HAL_GetTick>
 80012d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012d8:	e008      	b.n	80012ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012da:	f7ff fb23 	bl	8000924 <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d901      	bls.n	80012ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	e03d      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012ec:	4b11      	ldr	r3, [pc, #68]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d0f0      	beq.n	80012da <HAL_RCC_OscConfig+0x46a>
 80012f8:	e035      	b.n	8001366 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <HAL_RCC_OscConfig+0x4cc>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001300:	f7ff fb10 	bl	8000924 <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001306:	e008      	b.n	800131a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001308:	f7ff fb0c 	bl	8000924 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b02      	cmp	r3, #2
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e026      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1f0      	bne.n	8001308 <HAL_RCC_OscConfig+0x498>
 8001326:	e01e      	b.n	8001366 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	69db      	ldr	r3, [r3, #28]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d107      	bne.n	8001340 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e019      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
 8001334:	40021000 	.word	0x40021000
 8001338:	40007000 	.word	0x40007000
 800133c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001340:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <HAL_RCC_OscConfig+0x500>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a1b      	ldr	r3, [r3, #32]
 8001350:	429a      	cmp	r2, r3
 8001352:	d106      	bne.n	8001362 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800135e:	429a      	cmp	r2, r3
 8001360:	d001      	beq.n	8001366 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e000      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001366:	2300      	movs	r3, #0
}
 8001368:	4618      	mov	r0, r3
 800136a:	3718      	adds	r7, #24
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40021000 	.word	0x40021000

08001374 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d101      	bne.n	8001388 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e0d0      	b.n	800152a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001388:	4b6a      	ldr	r3, [pc, #424]	; (8001534 <HAL_RCC_ClockConfig+0x1c0>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0307 	and.w	r3, r3, #7
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	429a      	cmp	r2, r3
 8001394:	d910      	bls.n	80013b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001396:	4b67      	ldr	r3, [pc, #412]	; (8001534 <HAL_RCC_ClockConfig+0x1c0>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f023 0207 	bic.w	r2, r3, #7
 800139e:	4965      	ldr	r1, [pc, #404]	; (8001534 <HAL_RCC_ClockConfig+0x1c0>)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013a6:	4b63      	ldr	r3, [pc, #396]	; (8001534 <HAL_RCC_ClockConfig+0x1c0>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	683a      	ldr	r2, [r7, #0]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d001      	beq.n	80013b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e0b8      	b.n	800152a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d020      	beq.n	8001406 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0304 	and.w	r3, r3, #4
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d005      	beq.n	80013dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013d0:	4b59      	ldr	r3, [pc, #356]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	4a58      	ldr	r2, [pc, #352]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 80013d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0308 	and.w	r3, r3, #8
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d005      	beq.n	80013f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013e8:	4b53      	ldr	r3, [pc, #332]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	4a52      	ldr	r2, [pc, #328]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 80013ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80013f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013f4:	4b50      	ldr	r3, [pc, #320]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	494d      	ldr	r1, [pc, #308]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 8001402:	4313      	orrs	r3, r2
 8001404:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	2b00      	cmp	r3, #0
 8001410:	d040      	beq.n	8001494 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d107      	bne.n	800142a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141a:	4b47      	ldr	r3, [pc, #284]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d115      	bne.n	8001452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e07f      	b.n	800152a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b02      	cmp	r3, #2
 8001430:	d107      	bne.n	8001442 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001432:	4b41      	ldr	r3, [pc, #260]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d109      	bne.n	8001452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e073      	b.n	800152a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001442:	4b3d      	ldr	r3, [pc, #244]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d101      	bne.n	8001452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e06b      	b.n	800152a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001452:	4b39      	ldr	r3, [pc, #228]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f023 0203 	bic.w	r2, r3, #3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	4936      	ldr	r1, [pc, #216]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 8001460:	4313      	orrs	r3, r2
 8001462:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001464:	f7ff fa5e 	bl	8000924 <HAL_GetTick>
 8001468:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800146a:	e00a      	b.n	8001482 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800146c:	f7ff fa5a 	bl	8000924 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	f241 3288 	movw	r2, #5000	; 0x1388
 800147a:	4293      	cmp	r3, r2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e053      	b.n	800152a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001482:	4b2d      	ldr	r3, [pc, #180]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f003 020c 	and.w	r2, r3, #12
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	429a      	cmp	r2, r3
 8001492:	d1eb      	bne.n	800146c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001494:	4b27      	ldr	r3, [pc, #156]	; (8001534 <HAL_RCC_ClockConfig+0x1c0>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0307 	and.w	r3, r3, #7
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d210      	bcs.n	80014c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014a2:	4b24      	ldr	r3, [pc, #144]	; (8001534 <HAL_RCC_ClockConfig+0x1c0>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f023 0207 	bic.w	r2, r3, #7
 80014aa:	4922      	ldr	r1, [pc, #136]	; (8001534 <HAL_RCC_ClockConfig+0x1c0>)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014b2:	4b20      	ldr	r3, [pc, #128]	; (8001534 <HAL_RCC_ClockConfig+0x1c0>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d001      	beq.n	80014c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e032      	b.n	800152a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0304 	and.w	r3, r3, #4
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d008      	beq.n	80014e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014d0:	4b19      	ldr	r3, [pc, #100]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	4916      	ldr	r1, [pc, #88]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0308 	and.w	r3, r3, #8
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d009      	beq.n	8001502 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014ee:	4b12      	ldr	r3, [pc, #72]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	490e      	ldr	r1, [pc, #56]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 80014fe:	4313      	orrs	r3, r2
 8001500:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001502:	f000 f821 	bl	8001548 <HAL_RCC_GetSysClockFreq>
 8001506:	4602      	mov	r2, r0
 8001508:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	091b      	lsrs	r3, r3, #4
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	490a      	ldr	r1, [pc, #40]	; (800153c <HAL_RCC_ClockConfig+0x1c8>)
 8001514:	5ccb      	ldrb	r3, [r1, r3]
 8001516:	fa22 f303 	lsr.w	r3, r2, r3
 800151a:	4a09      	ldr	r2, [pc, #36]	; (8001540 <HAL_RCC_ClockConfig+0x1cc>)
 800151c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800151e:	4b09      	ldr	r3, [pc, #36]	; (8001544 <HAL_RCC_ClockConfig+0x1d0>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff f9bc 	bl	80008a0 <HAL_InitTick>

  return HAL_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40022000 	.word	0x40022000
 8001538:	40021000 	.word	0x40021000
 800153c:	080025e0 	.word	0x080025e0
 8001540:	20000010 	.word	0x20000010
 8001544:	20000014 	.word	0x20000014

08001548 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001548:	b480      	push	{r7}
 800154a:	b087      	sub	sp, #28
 800154c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	2300      	movs	r3, #0
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
 800155a:	2300      	movs	r3, #0
 800155c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001562:	4b1e      	ldr	r3, [pc, #120]	; (80015dc <HAL_RCC_GetSysClockFreq+0x94>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f003 030c 	and.w	r3, r3, #12
 800156e:	2b04      	cmp	r3, #4
 8001570:	d002      	beq.n	8001578 <HAL_RCC_GetSysClockFreq+0x30>
 8001572:	2b08      	cmp	r3, #8
 8001574:	d003      	beq.n	800157e <HAL_RCC_GetSysClockFreq+0x36>
 8001576:	e027      	b.n	80015c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001578:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800157a:	613b      	str	r3, [r7, #16]
      break;
 800157c:	e027      	b.n	80015ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	0c9b      	lsrs	r3, r3, #18
 8001582:	f003 030f 	and.w	r3, r3, #15
 8001586:	4a17      	ldr	r2, [pc, #92]	; (80015e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001588:	5cd3      	ldrb	r3, [r2, r3]
 800158a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d010      	beq.n	80015b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001596:	4b11      	ldr	r3, [pc, #68]	; (80015dc <HAL_RCC_GetSysClockFreq+0x94>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	0c5b      	lsrs	r3, r3, #17
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	4a11      	ldr	r2, [pc, #68]	; (80015e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80015a2:	5cd3      	ldrb	r3, [r2, r3]
 80015a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a0d      	ldr	r2, [pc, #52]	; (80015e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80015aa:	fb03 f202 	mul.w	r2, r3, r2
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b4:	617b      	str	r3, [r7, #20]
 80015b6:	e004      	b.n	80015c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4a0c      	ldr	r2, [pc, #48]	; (80015ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80015bc:	fb02 f303 	mul.w	r3, r2, r3
 80015c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	613b      	str	r3, [r7, #16]
      break;
 80015c6:	e002      	b.n	80015ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015c8:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80015ca:	613b      	str	r3, [r7, #16]
      break;
 80015cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015ce:	693b      	ldr	r3, [r7, #16]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	371c      	adds	r7, #28
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	40021000 	.word	0x40021000
 80015e0:	007a1200 	.word	0x007a1200
 80015e4:	080025f0 	.word	0x080025f0
 80015e8:	08002600 	.word	0x08002600
 80015ec:	003d0900 	.word	0x003d0900

080015f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015f8:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <RCC_Delay+0x34>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a0a      	ldr	r2, [pc, #40]	; (8001628 <RCC_Delay+0x38>)
 80015fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001602:	0a5b      	lsrs	r3, r3, #9
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	fb02 f303 	mul.w	r3, r2, r3
 800160a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800160c:	bf00      	nop
  }
  while (Delay --);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	1e5a      	subs	r2, r3, #1
 8001612:	60fa      	str	r2, [r7, #12]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1f9      	bne.n	800160c <RCC_Delay+0x1c>
}
 8001618:	bf00      	nop
 800161a:	bf00      	nop
 800161c:	3714      	adds	r7, #20
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr
 8001624:	20000010 	.word	0x20000010
 8001628:	10624dd3 	.word	0x10624dd3

0800162c <__errno>:
 800162c:	4b01      	ldr	r3, [pc, #4]	; (8001634 <__errno+0x8>)
 800162e:	6818      	ldr	r0, [r3, #0]
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	2000001c 	.word	0x2000001c

08001638 <__libc_init_array>:
 8001638:	b570      	push	{r4, r5, r6, lr}
 800163a:	2600      	movs	r6, #0
 800163c:	4d0c      	ldr	r5, [pc, #48]	; (8001670 <__libc_init_array+0x38>)
 800163e:	4c0d      	ldr	r4, [pc, #52]	; (8001674 <__libc_init_array+0x3c>)
 8001640:	1b64      	subs	r4, r4, r5
 8001642:	10a4      	asrs	r4, r4, #2
 8001644:	42a6      	cmp	r6, r4
 8001646:	d109      	bne.n	800165c <__libc_init_array+0x24>
 8001648:	f000 ffb6 	bl	80025b8 <_init>
 800164c:	2600      	movs	r6, #0
 800164e:	4d0a      	ldr	r5, [pc, #40]	; (8001678 <__libc_init_array+0x40>)
 8001650:	4c0a      	ldr	r4, [pc, #40]	; (800167c <__libc_init_array+0x44>)
 8001652:	1b64      	subs	r4, r4, r5
 8001654:	10a4      	asrs	r4, r4, #2
 8001656:	42a6      	cmp	r6, r4
 8001658:	d105      	bne.n	8001666 <__libc_init_array+0x2e>
 800165a:	bd70      	pop	{r4, r5, r6, pc}
 800165c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001660:	4798      	blx	r3
 8001662:	3601      	adds	r6, #1
 8001664:	e7ee      	b.n	8001644 <__libc_init_array+0xc>
 8001666:	f855 3b04 	ldr.w	r3, [r5], #4
 800166a:	4798      	blx	r3
 800166c:	3601      	adds	r6, #1
 800166e:	e7f2      	b.n	8001656 <__libc_init_array+0x1e>
 8001670:	0800269c 	.word	0x0800269c
 8001674:	0800269c 	.word	0x0800269c
 8001678:	0800269c 	.word	0x0800269c
 800167c:	080026a0 	.word	0x080026a0

08001680 <memset>:
 8001680:	4603      	mov	r3, r0
 8001682:	4402      	add	r2, r0
 8001684:	4293      	cmp	r3, r2
 8001686:	d100      	bne.n	800168a <memset+0xa>
 8001688:	4770      	bx	lr
 800168a:	f803 1b01 	strb.w	r1, [r3], #1
 800168e:	e7f9      	b.n	8001684 <memset+0x4>

08001690 <iprintf>:
 8001690:	b40f      	push	{r0, r1, r2, r3}
 8001692:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <iprintf+0x2c>)
 8001694:	b513      	push	{r0, r1, r4, lr}
 8001696:	681c      	ldr	r4, [r3, #0]
 8001698:	b124      	cbz	r4, 80016a4 <iprintf+0x14>
 800169a:	69a3      	ldr	r3, [r4, #24]
 800169c:	b913      	cbnz	r3, 80016a4 <iprintf+0x14>
 800169e:	4620      	mov	r0, r4
 80016a0:	f000 f866 	bl	8001770 <__sinit>
 80016a4:	ab05      	add	r3, sp, #20
 80016a6:	4620      	mov	r0, r4
 80016a8:	9a04      	ldr	r2, [sp, #16]
 80016aa:	68a1      	ldr	r1, [r4, #8]
 80016ac:	9301      	str	r3, [sp, #4]
 80016ae:	f000 f9bb 	bl	8001a28 <_vfiprintf_r>
 80016b2:	b002      	add	sp, #8
 80016b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016b8:	b004      	add	sp, #16
 80016ba:	4770      	bx	lr
 80016bc:	2000001c 	.word	0x2000001c

080016c0 <std>:
 80016c0:	2300      	movs	r3, #0
 80016c2:	b510      	push	{r4, lr}
 80016c4:	4604      	mov	r4, r0
 80016c6:	e9c0 3300 	strd	r3, r3, [r0]
 80016ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80016ce:	6083      	str	r3, [r0, #8]
 80016d0:	8181      	strh	r1, [r0, #12]
 80016d2:	6643      	str	r3, [r0, #100]	; 0x64
 80016d4:	81c2      	strh	r2, [r0, #14]
 80016d6:	6183      	str	r3, [r0, #24]
 80016d8:	4619      	mov	r1, r3
 80016da:	2208      	movs	r2, #8
 80016dc:	305c      	adds	r0, #92	; 0x5c
 80016de:	f7ff ffcf 	bl	8001680 <memset>
 80016e2:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <std+0x38>)
 80016e4:	6224      	str	r4, [r4, #32]
 80016e6:	6263      	str	r3, [r4, #36]	; 0x24
 80016e8:	4b04      	ldr	r3, [pc, #16]	; (80016fc <std+0x3c>)
 80016ea:	62a3      	str	r3, [r4, #40]	; 0x28
 80016ec:	4b04      	ldr	r3, [pc, #16]	; (8001700 <std+0x40>)
 80016ee:	62e3      	str	r3, [r4, #44]	; 0x2c
 80016f0:	4b04      	ldr	r3, [pc, #16]	; (8001704 <std+0x44>)
 80016f2:	6323      	str	r3, [r4, #48]	; 0x30
 80016f4:	bd10      	pop	{r4, pc}
 80016f6:	bf00      	nop
 80016f8:	08001fd5 	.word	0x08001fd5
 80016fc:	08001ff7 	.word	0x08001ff7
 8001700:	0800202f 	.word	0x0800202f
 8001704:	08002053 	.word	0x08002053

08001708 <_cleanup_r>:
 8001708:	4901      	ldr	r1, [pc, #4]	; (8001710 <_cleanup_r+0x8>)
 800170a:	f000 b8af 	b.w	800186c <_fwalk_reent>
 800170e:	bf00      	nop
 8001710:	08002325 	.word	0x08002325

08001714 <__sfmoreglue>:
 8001714:	2268      	movs	r2, #104	; 0x68
 8001716:	b570      	push	{r4, r5, r6, lr}
 8001718:	1e4d      	subs	r5, r1, #1
 800171a:	4355      	muls	r5, r2
 800171c:	460e      	mov	r6, r1
 800171e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001722:	f000 f8e5 	bl	80018f0 <_malloc_r>
 8001726:	4604      	mov	r4, r0
 8001728:	b140      	cbz	r0, 800173c <__sfmoreglue+0x28>
 800172a:	2100      	movs	r1, #0
 800172c:	e9c0 1600 	strd	r1, r6, [r0]
 8001730:	300c      	adds	r0, #12
 8001732:	60a0      	str	r0, [r4, #8]
 8001734:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001738:	f7ff ffa2 	bl	8001680 <memset>
 800173c:	4620      	mov	r0, r4
 800173e:	bd70      	pop	{r4, r5, r6, pc}

08001740 <__sfp_lock_acquire>:
 8001740:	4801      	ldr	r0, [pc, #4]	; (8001748 <__sfp_lock_acquire+0x8>)
 8001742:	f000 b8b3 	b.w	80018ac <__retarget_lock_acquire_recursive>
 8001746:	bf00      	nop
 8001748:	200000ad 	.word	0x200000ad

0800174c <__sfp_lock_release>:
 800174c:	4801      	ldr	r0, [pc, #4]	; (8001754 <__sfp_lock_release+0x8>)
 800174e:	f000 b8ae 	b.w	80018ae <__retarget_lock_release_recursive>
 8001752:	bf00      	nop
 8001754:	200000ad 	.word	0x200000ad

08001758 <__sinit_lock_acquire>:
 8001758:	4801      	ldr	r0, [pc, #4]	; (8001760 <__sinit_lock_acquire+0x8>)
 800175a:	f000 b8a7 	b.w	80018ac <__retarget_lock_acquire_recursive>
 800175e:	bf00      	nop
 8001760:	200000ae 	.word	0x200000ae

08001764 <__sinit_lock_release>:
 8001764:	4801      	ldr	r0, [pc, #4]	; (800176c <__sinit_lock_release+0x8>)
 8001766:	f000 b8a2 	b.w	80018ae <__retarget_lock_release_recursive>
 800176a:	bf00      	nop
 800176c:	200000ae 	.word	0x200000ae

08001770 <__sinit>:
 8001770:	b510      	push	{r4, lr}
 8001772:	4604      	mov	r4, r0
 8001774:	f7ff fff0 	bl	8001758 <__sinit_lock_acquire>
 8001778:	69a3      	ldr	r3, [r4, #24]
 800177a:	b11b      	cbz	r3, 8001784 <__sinit+0x14>
 800177c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001780:	f7ff bff0 	b.w	8001764 <__sinit_lock_release>
 8001784:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001788:	6523      	str	r3, [r4, #80]	; 0x50
 800178a:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <__sinit+0x68>)
 800178c:	4a13      	ldr	r2, [pc, #76]	; (80017dc <__sinit+0x6c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	62a2      	str	r2, [r4, #40]	; 0x28
 8001792:	42a3      	cmp	r3, r4
 8001794:	bf08      	it	eq
 8001796:	2301      	moveq	r3, #1
 8001798:	4620      	mov	r0, r4
 800179a:	bf08      	it	eq
 800179c:	61a3      	streq	r3, [r4, #24]
 800179e:	f000 f81f 	bl	80017e0 <__sfp>
 80017a2:	6060      	str	r0, [r4, #4]
 80017a4:	4620      	mov	r0, r4
 80017a6:	f000 f81b 	bl	80017e0 <__sfp>
 80017aa:	60a0      	str	r0, [r4, #8]
 80017ac:	4620      	mov	r0, r4
 80017ae:	f000 f817 	bl	80017e0 <__sfp>
 80017b2:	2200      	movs	r2, #0
 80017b4:	2104      	movs	r1, #4
 80017b6:	60e0      	str	r0, [r4, #12]
 80017b8:	6860      	ldr	r0, [r4, #4]
 80017ba:	f7ff ff81 	bl	80016c0 <std>
 80017be:	2201      	movs	r2, #1
 80017c0:	2109      	movs	r1, #9
 80017c2:	68a0      	ldr	r0, [r4, #8]
 80017c4:	f7ff ff7c 	bl	80016c0 <std>
 80017c8:	2202      	movs	r2, #2
 80017ca:	2112      	movs	r1, #18
 80017cc:	68e0      	ldr	r0, [r4, #12]
 80017ce:	f7ff ff77 	bl	80016c0 <std>
 80017d2:	2301      	movs	r3, #1
 80017d4:	61a3      	str	r3, [r4, #24]
 80017d6:	e7d1      	b.n	800177c <__sinit+0xc>
 80017d8:	08002604 	.word	0x08002604
 80017dc:	08001709 	.word	0x08001709

080017e0 <__sfp>:
 80017e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017e2:	4607      	mov	r7, r0
 80017e4:	f7ff ffac 	bl	8001740 <__sfp_lock_acquire>
 80017e8:	4b1e      	ldr	r3, [pc, #120]	; (8001864 <__sfp+0x84>)
 80017ea:	681e      	ldr	r6, [r3, #0]
 80017ec:	69b3      	ldr	r3, [r6, #24]
 80017ee:	b913      	cbnz	r3, 80017f6 <__sfp+0x16>
 80017f0:	4630      	mov	r0, r6
 80017f2:	f7ff ffbd 	bl	8001770 <__sinit>
 80017f6:	3648      	adds	r6, #72	; 0x48
 80017f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80017fc:	3b01      	subs	r3, #1
 80017fe:	d503      	bpl.n	8001808 <__sfp+0x28>
 8001800:	6833      	ldr	r3, [r6, #0]
 8001802:	b30b      	cbz	r3, 8001848 <__sfp+0x68>
 8001804:	6836      	ldr	r6, [r6, #0]
 8001806:	e7f7      	b.n	80017f8 <__sfp+0x18>
 8001808:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800180c:	b9d5      	cbnz	r5, 8001844 <__sfp+0x64>
 800180e:	4b16      	ldr	r3, [pc, #88]	; (8001868 <__sfp+0x88>)
 8001810:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001814:	60e3      	str	r3, [r4, #12]
 8001816:	6665      	str	r5, [r4, #100]	; 0x64
 8001818:	f000 f847 	bl	80018aa <__retarget_lock_init_recursive>
 800181c:	f7ff ff96 	bl	800174c <__sfp_lock_release>
 8001820:	2208      	movs	r2, #8
 8001822:	4629      	mov	r1, r5
 8001824:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001828:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800182c:	6025      	str	r5, [r4, #0]
 800182e:	61a5      	str	r5, [r4, #24]
 8001830:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001834:	f7ff ff24 	bl	8001680 <memset>
 8001838:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800183c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001840:	4620      	mov	r0, r4
 8001842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001844:	3468      	adds	r4, #104	; 0x68
 8001846:	e7d9      	b.n	80017fc <__sfp+0x1c>
 8001848:	2104      	movs	r1, #4
 800184a:	4638      	mov	r0, r7
 800184c:	f7ff ff62 	bl	8001714 <__sfmoreglue>
 8001850:	4604      	mov	r4, r0
 8001852:	6030      	str	r0, [r6, #0]
 8001854:	2800      	cmp	r0, #0
 8001856:	d1d5      	bne.n	8001804 <__sfp+0x24>
 8001858:	f7ff ff78 	bl	800174c <__sfp_lock_release>
 800185c:	230c      	movs	r3, #12
 800185e:	603b      	str	r3, [r7, #0]
 8001860:	e7ee      	b.n	8001840 <__sfp+0x60>
 8001862:	bf00      	nop
 8001864:	08002604 	.word	0x08002604
 8001868:	ffff0001 	.word	0xffff0001

0800186c <_fwalk_reent>:
 800186c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001870:	4606      	mov	r6, r0
 8001872:	4688      	mov	r8, r1
 8001874:	2700      	movs	r7, #0
 8001876:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800187a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800187e:	f1b9 0901 	subs.w	r9, r9, #1
 8001882:	d505      	bpl.n	8001890 <_fwalk_reent+0x24>
 8001884:	6824      	ldr	r4, [r4, #0]
 8001886:	2c00      	cmp	r4, #0
 8001888:	d1f7      	bne.n	800187a <_fwalk_reent+0xe>
 800188a:	4638      	mov	r0, r7
 800188c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001890:	89ab      	ldrh	r3, [r5, #12]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d907      	bls.n	80018a6 <_fwalk_reent+0x3a>
 8001896:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800189a:	3301      	adds	r3, #1
 800189c:	d003      	beq.n	80018a6 <_fwalk_reent+0x3a>
 800189e:	4629      	mov	r1, r5
 80018a0:	4630      	mov	r0, r6
 80018a2:	47c0      	blx	r8
 80018a4:	4307      	orrs	r7, r0
 80018a6:	3568      	adds	r5, #104	; 0x68
 80018a8:	e7e9      	b.n	800187e <_fwalk_reent+0x12>

080018aa <__retarget_lock_init_recursive>:
 80018aa:	4770      	bx	lr

080018ac <__retarget_lock_acquire_recursive>:
 80018ac:	4770      	bx	lr

080018ae <__retarget_lock_release_recursive>:
 80018ae:	4770      	bx	lr

080018b0 <sbrk_aligned>:
 80018b0:	b570      	push	{r4, r5, r6, lr}
 80018b2:	4e0e      	ldr	r6, [pc, #56]	; (80018ec <sbrk_aligned+0x3c>)
 80018b4:	460c      	mov	r4, r1
 80018b6:	6831      	ldr	r1, [r6, #0]
 80018b8:	4605      	mov	r5, r0
 80018ba:	b911      	cbnz	r1, 80018c2 <sbrk_aligned+0x12>
 80018bc:	f000 fb7a 	bl	8001fb4 <_sbrk_r>
 80018c0:	6030      	str	r0, [r6, #0]
 80018c2:	4621      	mov	r1, r4
 80018c4:	4628      	mov	r0, r5
 80018c6:	f000 fb75 	bl	8001fb4 <_sbrk_r>
 80018ca:	1c43      	adds	r3, r0, #1
 80018cc:	d00a      	beq.n	80018e4 <sbrk_aligned+0x34>
 80018ce:	1cc4      	adds	r4, r0, #3
 80018d0:	f024 0403 	bic.w	r4, r4, #3
 80018d4:	42a0      	cmp	r0, r4
 80018d6:	d007      	beq.n	80018e8 <sbrk_aligned+0x38>
 80018d8:	1a21      	subs	r1, r4, r0
 80018da:	4628      	mov	r0, r5
 80018dc:	f000 fb6a 	bl	8001fb4 <_sbrk_r>
 80018e0:	3001      	adds	r0, #1
 80018e2:	d101      	bne.n	80018e8 <sbrk_aligned+0x38>
 80018e4:	f04f 34ff 	mov.w	r4, #4294967295
 80018e8:	4620      	mov	r0, r4
 80018ea:	bd70      	pop	{r4, r5, r6, pc}
 80018ec:	200000b4 	.word	0x200000b4

080018f0 <_malloc_r>:
 80018f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018f4:	1ccd      	adds	r5, r1, #3
 80018f6:	f025 0503 	bic.w	r5, r5, #3
 80018fa:	3508      	adds	r5, #8
 80018fc:	2d0c      	cmp	r5, #12
 80018fe:	bf38      	it	cc
 8001900:	250c      	movcc	r5, #12
 8001902:	2d00      	cmp	r5, #0
 8001904:	4607      	mov	r7, r0
 8001906:	db01      	blt.n	800190c <_malloc_r+0x1c>
 8001908:	42a9      	cmp	r1, r5
 800190a:	d905      	bls.n	8001918 <_malloc_r+0x28>
 800190c:	230c      	movs	r3, #12
 800190e:	2600      	movs	r6, #0
 8001910:	603b      	str	r3, [r7, #0]
 8001912:	4630      	mov	r0, r6
 8001914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001918:	4e2e      	ldr	r6, [pc, #184]	; (80019d4 <_malloc_r+0xe4>)
 800191a:	f000 fdc5 	bl	80024a8 <__malloc_lock>
 800191e:	6833      	ldr	r3, [r6, #0]
 8001920:	461c      	mov	r4, r3
 8001922:	bb34      	cbnz	r4, 8001972 <_malloc_r+0x82>
 8001924:	4629      	mov	r1, r5
 8001926:	4638      	mov	r0, r7
 8001928:	f7ff ffc2 	bl	80018b0 <sbrk_aligned>
 800192c:	1c43      	adds	r3, r0, #1
 800192e:	4604      	mov	r4, r0
 8001930:	d14d      	bne.n	80019ce <_malloc_r+0xde>
 8001932:	6834      	ldr	r4, [r6, #0]
 8001934:	4626      	mov	r6, r4
 8001936:	2e00      	cmp	r6, #0
 8001938:	d140      	bne.n	80019bc <_malloc_r+0xcc>
 800193a:	6823      	ldr	r3, [r4, #0]
 800193c:	4631      	mov	r1, r6
 800193e:	4638      	mov	r0, r7
 8001940:	eb04 0803 	add.w	r8, r4, r3
 8001944:	f000 fb36 	bl	8001fb4 <_sbrk_r>
 8001948:	4580      	cmp	r8, r0
 800194a:	d13a      	bne.n	80019c2 <_malloc_r+0xd2>
 800194c:	6821      	ldr	r1, [r4, #0]
 800194e:	3503      	adds	r5, #3
 8001950:	1a6d      	subs	r5, r5, r1
 8001952:	f025 0503 	bic.w	r5, r5, #3
 8001956:	3508      	adds	r5, #8
 8001958:	2d0c      	cmp	r5, #12
 800195a:	bf38      	it	cc
 800195c:	250c      	movcc	r5, #12
 800195e:	4638      	mov	r0, r7
 8001960:	4629      	mov	r1, r5
 8001962:	f7ff ffa5 	bl	80018b0 <sbrk_aligned>
 8001966:	3001      	adds	r0, #1
 8001968:	d02b      	beq.n	80019c2 <_malloc_r+0xd2>
 800196a:	6823      	ldr	r3, [r4, #0]
 800196c:	442b      	add	r3, r5
 800196e:	6023      	str	r3, [r4, #0]
 8001970:	e00e      	b.n	8001990 <_malloc_r+0xa0>
 8001972:	6822      	ldr	r2, [r4, #0]
 8001974:	1b52      	subs	r2, r2, r5
 8001976:	d41e      	bmi.n	80019b6 <_malloc_r+0xc6>
 8001978:	2a0b      	cmp	r2, #11
 800197a:	d916      	bls.n	80019aa <_malloc_r+0xba>
 800197c:	1961      	adds	r1, r4, r5
 800197e:	42a3      	cmp	r3, r4
 8001980:	6025      	str	r5, [r4, #0]
 8001982:	bf18      	it	ne
 8001984:	6059      	strne	r1, [r3, #4]
 8001986:	6863      	ldr	r3, [r4, #4]
 8001988:	bf08      	it	eq
 800198a:	6031      	streq	r1, [r6, #0]
 800198c:	5162      	str	r2, [r4, r5]
 800198e:	604b      	str	r3, [r1, #4]
 8001990:	4638      	mov	r0, r7
 8001992:	f104 060b 	add.w	r6, r4, #11
 8001996:	f000 fd8d 	bl	80024b4 <__malloc_unlock>
 800199a:	f026 0607 	bic.w	r6, r6, #7
 800199e:	1d23      	adds	r3, r4, #4
 80019a0:	1af2      	subs	r2, r6, r3
 80019a2:	d0b6      	beq.n	8001912 <_malloc_r+0x22>
 80019a4:	1b9b      	subs	r3, r3, r6
 80019a6:	50a3      	str	r3, [r4, r2]
 80019a8:	e7b3      	b.n	8001912 <_malloc_r+0x22>
 80019aa:	6862      	ldr	r2, [r4, #4]
 80019ac:	42a3      	cmp	r3, r4
 80019ae:	bf0c      	ite	eq
 80019b0:	6032      	streq	r2, [r6, #0]
 80019b2:	605a      	strne	r2, [r3, #4]
 80019b4:	e7ec      	b.n	8001990 <_malloc_r+0xa0>
 80019b6:	4623      	mov	r3, r4
 80019b8:	6864      	ldr	r4, [r4, #4]
 80019ba:	e7b2      	b.n	8001922 <_malloc_r+0x32>
 80019bc:	4634      	mov	r4, r6
 80019be:	6876      	ldr	r6, [r6, #4]
 80019c0:	e7b9      	b.n	8001936 <_malloc_r+0x46>
 80019c2:	230c      	movs	r3, #12
 80019c4:	4638      	mov	r0, r7
 80019c6:	603b      	str	r3, [r7, #0]
 80019c8:	f000 fd74 	bl	80024b4 <__malloc_unlock>
 80019cc:	e7a1      	b.n	8001912 <_malloc_r+0x22>
 80019ce:	6025      	str	r5, [r4, #0]
 80019d0:	e7de      	b.n	8001990 <_malloc_r+0xa0>
 80019d2:	bf00      	nop
 80019d4:	200000b0 	.word	0x200000b0

080019d8 <__sfputc_r>:
 80019d8:	6893      	ldr	r3, [r2, #8]
 80019da:	b410      	push	{r4}
 80019dc:	3b01      	subs	r3, #1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	6093      	str	r3, [r2, #8]
 80019e2:	da07      	bge.n	80019f4 <__sfputc_r+0x1c>
 80019e4:	6994      	ldr	r4, [r2, #24]
 80019e6:	42a3      	cmp	r3, r4
 80019e8:	db01      	blt.n	80019ee <__sfputc_r+0x16>
 80019ea:	290a      	cmp	r1, #10
 80019ec:	d102      	bne.n	80019f4 <__sfputc_r+0x1c>
 80019ee:	bc10      	pop	{r4}
 80019f0:	f000 bb34 	b.w	800205c <__swbuf_r>
 80019f4:	6813      	ldr	r3, [r2, #0]
 80019f6:	1c58      	adds	r0, r3, #1
 80019f8:	6010      	str	r0, [r2, #0]
 80019fa:	7019      	strb	r1, [r3, #0]
 80019fc:	4608      	mov	r0, r1
 80019fe:	bc10      	pop	{r4}
 8001a00:	4770      	bx	lr

08001a02 <__sfputs_r>:
 8001a02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a04:	4606      	mov	r6, r0
 8001a06:	460f      	mov	r7, r1
 8001a08:	4614      	mov	r4, r2
 8001a0a:	18d5      	adds	r5, r2, r3
 8001a0c:	42ac      	cmp	r4, r5
 8001a0e:	d101      	bne.n	8001a14 <__sfputs_r+0x12>
 8001a10:	2000      	movs	r0, #0
 8001a12:	e007      	b.n	8001a24 <__sfputs_r+0x22>
 8001a14:	463a      	mov	r2, r7
 8001a16:	4630      	mov	r0, r6
 8001a18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a1c:	f7ff ffdc 	bl	80019d8 <__sfputc_r>
 8001a20:	1c43      	adds	r3, r0, #1
 8001a22:	d1f3      	bne.n	8001a0c <__sfputs_r+0xa>
 8001a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001a28 <_vfiprintf_r>:
 8001a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a2c:	460d      	mov	r5, r1
 8001a2e:	4614      	mov	r4, r2
 8001a30:	4698      	mov	r8, r3
 8001a32:	4606      	mov	r6, r0
 8001a34:	b09d      	sub	sp, #116	; 0x74
 8001a36:	b118      	cbz	r0, 8001a40 <_vfiprintf_r+0x18>
 8001a38:	6983      	ldr	r3, [r0, #24]
 8001a3a:	b90b      	cbnz	r3, 8001a40 <_vfiprintf_r+0x18>
 8001a3c:	f7ff fe98 	bl	8001770 <__sinit>
 8001a40:	4b89      	ldr	r3, [pc, #548]	; (8001c68 <_vfiprintf_r+0x240>)
 8001a42:	429d      	cmp	r5, r3
 8001a44:	d11b      	bne.n	8001a7e <_vfiprintf_r+0x56>
 8001a46:	6875      	ldr	r5, [r6, #4]
 8001a48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001a4a:	07d9      	lsls	r1, r3, #31
 8001a4c:	d405      	bmi.n	8001a5a <_vfiprintf_r+0x32>
 8001a4e:	89ab      	ldrh	r3, [r5, #12]
 8001a50:	059a      	lsls	r2, r3, #22
 8001a52:	d402      	bmi.n	8001a5a <_vfiprintf_r+0x32>
 8001a54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001a56:	f7ff ff29 	bl	80018ac <__retarget_lock_acquire_recursive>
 8001a5a:	89ab      	ldrh	r3, [r5, #12]
 8001a5c:	071b      	lsls	r3, r3, #28
 8001a5e:	d501      	bpl.n	8001a64 <_vfiprintf_r+0x3c>
 8001a60:	692b      	ldr	r3, [r5, #16]
 8001a62:	b9eb      	cbnz	r3, 8001aa0 <_vfiprintf_r+0x78>
 8001a64:	4629      	mov	r1, r5
 8001a66:	4630      	mov	r0, r6
 8001a68:	f000 fb5c 	bl	8002124 <__swsetup_r>
 8001a6c:	b1c0      	cbz	r0, 8001aa0 <_vfiprintf_r+0x78>
 8001a6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001a70:	07dc      	lsls	r4, r3, #31
 8001a72:	d50e      	bpl.n	8001a92 <_vfiprintf_r+0x6a>
 8001a74:	f04f 30ff 	mov.w	r0, #4294967295
 8001a78:	b01d      	add	sp, #116	; 0x74
 8001a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a7e:	4b7b      	ldr	r3, [pc, #492]	; (8001c6c <_vfiprintf_r+0x244>)
 8001a80:	429d      	cmp	r5, r3
 8001a82:	d101      	bne.n	8001a88 <_vfiprintf_r+0x60>
 8001a84:	68b5      	ldr	r5, [r6, #8]
 8001a86:	e7df      	b.n	8001a48 <_vfiprintf_r+0x20>
 8001a88:	4b79      	ldr	r3, [pc, #484]	; (8001c70 <_vfiprintf_r+0x248>)
 8001a8a:	429d      	cmp	r5, r3
 8001a8c:	bf08      	it	eq
 8001a8e:	68f5      	ldreq	r5, [r6, #12]
 8001a90:	e7da      	b.n	8001a48 <_vfiprintf_r+0x20>
 8001a92:	89ab      	ldrh	r3, [r5, #12]
 8001a94:	0598      	lsls	r0, r3, #22
 8001a96:	d4ed      	bmi.n	8001a74 <_vfiprintf_r+0x4c>
 8001a98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001a9a:	f7ff ff08 	bl	80018ae <__retarget_lock_release_recursive>
 8001a9e:	e7e9      	b.n	8001a74 <_vfiprintf_r+0x4c>
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	9309      	str	r3, [sp, #36]	; 0x24
 8001aa4:	2320      	movs	r3, #32
 8001aa6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001aaa:	2330      	movs	r3, #48	; 0x30
 8001aac:	f04f 0901 	mov.w	r9, #1
 8001ab0:	f8cd 800c 	str.w	r8, [sp, #12]
 8001ab4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8001c74 <_vfiprintf_r+0x24c>
 8001ab8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001abc:	4623      	mov	r3, r4
 8001abe:	469a      	mov	sl, r3
 8001ac0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001ac4:	b10a      	cbz	r2, 8001aca <_vfiprintf_r+0xa2>
 8001ac6:	2a25      	cmp	r2, #37	; 0x25
 8001ac8:	d1f9      	bne.n	8001abe <_vfiprintf_r+0x96>
 8001aca:	ebba 0b04 	subs.w	fp, sl, r4
 8001ace:	d00b      	beq.n	8001ae8 <_vfiprintf_r+0xc0>
 8001ad0:	465b      	mov	r3, fp
 8001ad2:	4622      	mov	r2, r4
 8001ad4:	4629      	mov	r1, r5
 8001ad6:	4630      	mov	r0, r6
 8001ad8:	f7ff ff93 	bl	8001a02 <__sfputs_r>
 8001adc:	3001      	adds	r0, #1
 8001ade:	f000 80aa 	beq.w	8001c36 <_vfiprintf_r+0x20e>
 8001ae2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001ae4:	445a      	add	r2, fp
 8001ae6:	9209      	str	r2, [sp, #36]	; 0x24
 8001ae8:	f89a 3000 	ldrb.w	r3, [sl]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f000 80a2 	beq.w	8001c36 <_vfiprintf_r+0x20e>
 8001af2:	2300      	movs	r3, #0
 8001af4:	f04f 32ff 	mov.w	r2, #4294967295
 8001af8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001afc:	f10a 0a01 	add.w	sl, sl, #1
 8001b00:	9304      	str	r3, [sp, #16]
 8001b02:	9307      	str	r3, [sp, #28]
 8001b04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001b08:	931a      	str	r3, [sp, #104]	; 0x68
 8001b0a:	4654      	mov	r4, sl
 8001b0c:	2205      	movs	r2, #5
 8001b0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b12:	4858      	ldr	r0, [pc, #352]	; (8001c74 <_vfiprintf_r+0x24c>)
 8001b14:	f000 fcba 	bl	800248c <memchr>
 8001b18:	9a04      	ldr	r2, [sp, #16]
 8001b1a:	b9d8      	cbnz	r0, 8001b54 <_vfiprintf_r+0x12c>
 8001b1c:	06d1      	lsls	r1, r2, #27
 8001b1e:	bf44      	itt	mi
 8001b20:	2320      	movmi	r3, #32
 8001b22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001b26:	0713      	lsls	r3, r2, #28
 8001b28:	bf44      	itt	mi
 8001b2a:	232b      	movmi	r3, #43	; 0x2b
 8001b2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001b30:	f89a 3000 	ldrb.w	r3, [sl]
 8001b34:	2b2a      	cmp	r3, #42	; 0x2a
 8001b36:	d015      	beq.n	8001b64 <_vfiprintf_r+0x13c>
 8001b38:	4654      	mov	r4, sl
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	f04f 0c0a 	mov.w	ip, #10
 8001b40:	9a07      	ldr	r2, [sp, #28]
 8001b42:	4621      	mov	r1, r4
 8001b44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001b48:	3b30      	subs	r3, #48	; 0x30
 8001b4a:	2b09      	cmp	r3, #9
 8001b4c:	d94e      	bls.n	8001bec <_vfiprintf_r+0x1c4>
 8001b4e:	b1b0      	cbz	r0, 8001b7e <_vfiprintf_r+0x156>
 8001b50:	9207      	str	r2, [sp, #28]
 8001b52:	e014      	b.n	8001b7e <_vfiprintf_r+0x156>
 8001b54:	eba0 0308 	sub.w	r3, r0, r8
 8001b58:	fa09 f303 	lsl.w	r3, r9, r3
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	46a2      	mov	sl, r4
 8001b60:	9304      	str	r3, [sp, #16]
 8001b62:	e7d2      	b.n	8001b0a <_vfiprintf_r+0xe2>
 8001b64:	9b03      	ldr	r3, [sp, #12]
 8001b66:	1d19      	adds	r1, r3, #4
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	9103      	str	r1, [sp, #12]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	bfbb      	ittet	lt
 8001b70:	425b      	neglt	r3, r3
 8001b72:	f042 0202 	orrlt.w	r2, r2, #2
 8001b76:	9307      	strge	r3, [sp, #28]
 8001b78:	9307      	strlt	r3, [sp, #28]
 8001b7a:	bfb8      	it	lt
 8001b7c:	9204      	strlt	r2, [sp, #16]
 8001b7e:	7823      	ldrb	r3, [r4, #0]
 8001b80:	2b2e      	cmp	r3, #46	; 0x2e
 8001b82:	d10c      	bne.n	8001b9e <_vfiprintf_r+0x176>
 8001b84:	7863      	ldrb	r3, [r4, #1]
 8001b86:	2b2a      	cmp	r3, #42	; 0x2a
 8001b88:	d135      	bne.n	8001bf6 <_vfiprintf_r+0x1ce>
 8001b8a:	9b03      	ldr	r3, [sp, #12]
 8001b8c:	3402      	adds	r4, #2
 8001b8e:	1d1a      	adds	r2, r3, #4
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	9203      	str	r2, [sp, #12]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	bfb8      	it	lt
 8001b98:	f04f 33ff 	movlt.w	r3, #4294967295
 8001b9c:	9305      	str	r3, [sp, #20]
 8001b9e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8001c78 <_vfiprintf_r+0x250>
 8001ba2:	2203      	movs	r2, #3
 8001ba4:	4650      	mov	r0, sl
 8001ba6:	7821      	ldrb	r1, [r4, #0]
 8001ba8:	f000 fc70 	bl	800248c <memchr>
 8001bac:	b140      	cbz	r0, 8001bc0 <_vfiprintf_r+0x198>
 8001bae:	2340      	movs	r3, #64	; 0x40
 8001bb0:	eba0 000a 	sub.w	r0, r0, sl
 8001bb4:	fa03 f000 	lsl.w	r0, r3, r0
 8001bb8:	9b04      	ldr	r3, [sp, #16]
 8001bba:	3401      	adds	r4, #1
 8001bbc:	4303      	orrs	r3, r0
 8001bbe:	9304      	str	r3, [sp, #16]
 8001bc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001bc4:	2206      	movs	r2, #6
 8001bc6:	482d      	ldr	r0, [pc, #180]	; (8001c7c <_vfiprintf_r+0x254>)
 8001bc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001bcc:	f000 fc5e 	bl	800248c <memchr>
 8001bd0:	2800      	cmp	r0, #0
 8001bd2:	d03f      	beq.n	8001c54 <_vfiprintf_r+0x22c>
 8001bd4:	4b2a      	ldr	r3, [pc, #168]	; (8001c80 <_vfiprintf_r+0x258>)
 8001bd6:	bb1b      	cbnz	r3, 8001c20 <_vfiprintf_r+0x1f8>
 8001bd8:	9b03      	ldr	r3, [sp, #12]
 8001bda:	3307      	adds	r3, #7
 8001bdc:	f023 0307 	bic.w	r3, r3, #7
 8001be0:	3308      	adds	r3, #8
 8001be2:	9303      	str	r3, [sp, #12]
 8001be4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001be6:	443b      	add	r3, r7
 8001be8:	9309      	str	r3, [sp, #36]	; 0x24
 8001bea:	e767      	b.n	8001abc <_vfiprintf_r+0x94>
 8001bec:	460c      	mov	r4, r1
 8001bee:	2001      	movs	r0, #1
 8001bf0:	fb0c 3202 	mla	r2, ip, r2, r3
 8001bf4:	e7a5      	b.n	8001b42 <_vfiprintf_r+0x11a>
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f04f 0c0a 	mov.w	ip, #10
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	3401      	adds	r4, #1
 8001c00:	9305      	str	r3, [sp, #20]
 8001c02:	4620      	mov	r0, r4
 8001c04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001c08:	3a30      	subs	r2, #48	; 0x30
 8001c0a:	2a09      	cmp	r2, #9
 8001c0c:	d903      	bls.n	8001c16 <_vfiprintf_r+0x1ee>
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d0c5      	beq.n	8001b9e <_vfiprintf_r+0x176>
 8001c12:	9105      	str	r1, [sp, #20]
 8001c14:	e7c3      	b.n	8001b9e <_vfiprintf_r+0x176>
 8001c16:	4604      	mov	r4, r0
 8001c18:	2301      	movs	r3, #1
 8001c1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8001c1e:	e7f0      	b.n	8001c02 <_vfiprintf_r+0x1da>
 8001c20:	ab03      	add	r3, sp, #12
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	462a      	mov	r2, r5
 8001c26:	4630      	mov	r0, r6
 8001c28:	4b16      	ldr	r3, [pc, #88]	; (8001c84 <_vfiprintf_r+0x25c>)
 8001c2a:	a904      	add	r1, sp, #16
 8001c2c:	f3af 8000 	nop.w
 8001c30:	4607      	mov	r7, r0
 8001c32:	1c78      	adds	r0, r7, #1
 8001c34:	d1d6      	bne.n	8001be4 <_vfiprintf_r+0x1bc>
 8001c36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001c38:	07d9      	lsls	r1, r3, #31
 8001c3a:	d405      	bmi.n	8001c48 <_vfiprintf_r+0x220>
 8001c3c:	89ab      	ldrh	r3, [r5, #12]
 8001c3e:	059a      	lsls	r2, r3, #22
 8001c40:	d402      	bmi.n	8001c48 <_vfiprintf_r+0x220>
 8001c42:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001c44:	f7ff fe33 	bl	80018ae <__retarget_lock_release_recursive>
 8001c48:	89ab      	ldrh	r3, [r5, #12]
 8001c4a:	065b      	lsls	r3, r3, #25
 8001c4c:	f53f af12 	bmi.w	8001a74 <_vfiprintf_r+0x4c>
 8001c50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001c52:	e711      	b.n	8001a78 <_vfiprintf_r+0x50>
 8001c54:	ab03      	add	r3, sp, #12
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	462a      	mov	r2, r5
 8001c5a:	4630      	mov	r0, r6
 8001c5c:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <_vfiprintf_r+0x25c>)
 8001c5e:	a904      	add	r1, sp, #16
 8001c60:	f000 f882 	bl	8001d68 <_printf_i>
 8001c64:	e7e4      	b.n	8001c30 <_vfiprintf_r+0x208>
 8001c66:	bf00      	nop
 8001c68:	08002628 	.word	0x08002628
 8001c6c:	08002648 	.word	0x08002648
 8001c70:	08002608 	.word	0x08002608
 8001c74:	08002668 	.word	0x08002668
 8001c78:	0800266e 	.word	0x0800266e
 8001c7c:	08002672 	.word	0x08002672
 8001c80:	00000000 	.word	0x00000000
 8001c84:	08001a03 	.word	0x08001a03

08001c88 <_printf_common>:
 8001c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c8c:	4616      	mov	r6, r2
 8001c8e:	4699      	mov	r9, r3
 8001c90:	688a      	ldr	r2, [r1, #8]
 8001c92:	690b      	ldr	r3, [r1, #16]
 8001c94:	4607      	mov	r7, r0
 8001c96:	4293      	cmp	r3, r2
 8001c98:	bfb8      	it	lt
 8001c9a:	4613      	movlt	r3, r2
 8001c9c:	6033      	str	r3, [r6, #0]
 8001c9e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001ca2:	460c      	mov	r4, r1
 8001ca4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001ca8:	b10a      	cbz	r2, 8001cae <_printf_common+0x26>
 8001caa:	3301      	adds	r3, #1
 8001cac:	6033      	str	r3, [r6, #0]
 8001cae:	6823      	ldr	r3, [r4, #0]
 8001cb0:	0699      	lsls	r1, r3, #26
 8001cb2:	bf42      	ittt	mi
 8001cb4:	6833      	ldrmi	r3, [r6, #0]
 8001cb6:	3302      	addmi	r3, #2
 8001cb8:	6033      	strmi	r3, [r6, #0]
 8001cba:	6825      	ldr	r5, [r4, #0]
 8001cbc:	f015 0506 	ands.w	r5, r5, #6
 8001cc0:	d106      	bne.n	8001cd0 <_printf_common+0x48>
 8001cc2:	f104 0a19 	add.w	sl, r4, #25
 8001cc6:	68e3      	ldr	r3, [r4, #12]
 8001cc8:	6832      	ldr	r2, [r6, #0]
 8001cca:	1a9b      	subs	r3, r3, r2
 8001ccc:	42ab      	cmp	r3, r5
 8001cce:	dc28      	bgt.n	8001d22 <_printf_common+0x9a>
 8001cd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001cd4:	1e13      	subs	r3, r2, #0
 8001cd6:	6822      	ldr	r2, [r4, #0]
 8001cd8:	bf18      	it	ne
 8001cda:	2301      	movne	r3, #1
 8001cdc:	0692      	lsls	r2, r2, #26
 8001cde:	d42d      	bmi.n	8001d3c <_printf_common+0xb4>
 8001ce0:	4649      	mov	r1, r9
 8001ce2:	4638      	mov	r0, r7
 8001ce4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001ce8:	47c0      	blx	r8
 8001cea:	3001      	adds	r0, #1
 8001cec:	d020      	beq.n	8001d30 <_printf_common+0xa8>
 8001cee:	6823      	ldr	r3, [r4, #0]
 8001cf0:	68e5      	ldr	r5, [r4, #12]
 8001cf2:	f003 0306 	and.w	r3, r3, #6
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	bf18      	it	ne
 8001cfa:	2500      	movne	r5, #0
 8001cfc:	6832      	ldr	r2, [r6, #0]
 8001cfe:	f04f 0600 	mov.w	r6, #0
 8001d02:	68a3      	ldr	r3, [r4, #8]
 8001d04:	bf08      	it	eq
 8001d06:	1aad      	subeq	r5, r5, r2
 8001d08:	6922      	ldr	r2, [r4, #16]
 8001d0a:	bf08      	it	eq
 8001d0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001d10:	4293      	cmp	r3, r2
 8001d12:	bfc4      	itt	gt
 8001d14:	1a9b      	subgt	r3, r3, r2
 8001d16:	18ed      	addgt	r5, r5, r3
 8001d18:	341a      	adds	r4, #26
 8001d1a:	42b5      	cmp	r5, r6
 8001d1c:	d11a      	bne.n	8001d54 <_printf_common+0xcc>
 8001d1e:	2000      	movs	r0, #0
 8001d20:	e008      	b.n	8001d34 <_printf_common+0xac>
 8001d22:	2301      	movs	r3, #1
 8001d24:	4652      	mov	r2, sl
 8001d26:	4649      	mov	r1, r9
 8001d28:	4638      	mov	r0, r7
 8001d2a:	47c0      	blx	r8
 8001d2c:	3001      	adds	r0, #1
 8001d2e:	d103      	bne.n	8001d38 <_printf_common+0xb0>
 8001d30:	f04f 30ff 	mov.w	r0, #4294967295
 8001d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d38:	3501      	adds	r5, #1
 8001d3a:	e7c4      	b.n	8001cc6 <_printf_common+0x3e>
 8001d3c:	2030      	movs	r0, #48	; 0x30
 8001d3e:	18e1      	adds	r1, r4, r3
 8001d40:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001d44:	1c5a      	adds	r2, r3, #1
 8001d46:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001d4a:	4422      	add	r2, r4
 8001d4c:	3302      	adds	r3, #2
 8001d4e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001d52:	e7c5      	b.n	8001ce0 <_printf_common+0x58>
 8001d54:	2301      	movs	r3, #1
 8001d56:	4622      	mov	r2, r4
 8001d58:	4649      	mov	r1, r9
 8001d5a:	4638      	mov	r0, r7
 8001d5c:	47c0      	blx	r8
 8001d5e:	3001      	adds	r0, #1
 8001d60:	d0e6      	beq.n	8001d30 <_printf_common+0xa8>
 8001d62:	3601      	adds	r6, #1
 8001d64:	e7d9      	b.n	8001d1a <_printf_common+0x92>
	...

08001d68 <_printf_i>:
 8001d68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001d6c:	7e0f      	ldrb	r7, [r1, #24]
 8001d6e:	4691      	mov	r9, r2
 8001d70:	2f78      	cmp	r7, #120	; 0x78
 8001d72:	4680      	mov	r8, r0
 8001d74:	460c      	mov	r4, r1
 8001d76:	469a      	mov	sl, r3
 8001d78:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001d7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001d7e:	d807      	bhi.n	8001d90 <_printf_i+0x28>
 8001d80:	2f62      	cmp	r7, #98	; 0x62
 8001d82:	d80a      	bhi.n	8001d9a <_printf_i+0x32>
 8001d84:	2f00      	cmp	r7, #0
 8001d86:	f000 80d9 	beq.w	8001f3c <_printf_i+0x1d4>
 8001d8a:	2f58      	cmp	r7, #88	; 0x58
 8001d8c:	f000 80a4 	beq.w	8001ed8 <_printf_i+0x170>
 8001d90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001d94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001d98:	e03a      	b.n	8001e10 <_printf_i+0xa8>
 8001d9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001d9e:	2b15      	cmp	r3, #21
 8001da0:	d8f6      	bhi.n	8001d90 <_printf_i+0x28>
 8001da2:	a101      	add	r1, pc, #4	; (adr r1, 8001da8 <_printf_i+0x40>)
 8001da4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001da8:	08001e01 	.word	0x08001e01
 8001dac:	08001e15 	.word	0x08001e15
 8001db0:	08001d91 	.word	0x08001d91
 8001db4:	08001d91 	.word	0x08001d91
 8001db8:	08001d91 	.word	0x08001d91
 8001dbc:	08001d91 	.word	0x08001d91
 8001dc0:	08001e15 	.word	0x08001e15
 8001dc4:	08001d91 	.word	0x08001d91
 8001dc8:	08001d91 	.word	0x08001d91
 8001dcc:	08001d91 	.word	0x08001d91
 8001dd0:	08001d91 	.word	0x08001d91
 8001dd4:	08001f23 	.word	0x08001f23
 8001dd8:	08001e45 	.word	0x08001e45
 8001ddc:	08001f05 	.word	0x08001f05
 8001de0:	08001d91 	.word	0x08001d91
 8001de4:	08001d91 	.word	0x08001d91
 8001de8:	08001f45 	.word	0x08001f45
 8001dec:	08001d91 	.word	0x08001d91
 8001df0:	08001e45 	.word	0x08001e45
 8001df4:	08001d91 	.word	0x08001d91
 8001df8:	08001d91 	.word	0x08001d91
 8001dfc:	08001f0d 	.word	0x08001f0d
 8001e00:	682b      	ldr	r3, [r5, #0]
 8001e02:	1d1a      	adds	r2, r3, #4
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	602a      	str	r2, [r5, #0]
 8001e08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001e0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001e10:	2301      	movs	r3, #1
 8001e12:	e0a4      	b.n	8001f5e <_printf_i+0x1f6>
 8001e14:	6820      	ldr	r0, [r4, #0]
 8001e16:	6829      	ldr	r1, [r5, #0]
 8001e18:	0606      	lsls	r6, r0, #24
 8001e1a:	f101 0304 	add.w	r3, r1, #4
 8001e1e:	d50a      	bpl.n	8001e36 <_printf_i+0xce>
 8001e20:	680e      	ldr	r6, [r1, #0]
 8001e22:	602b      	str	r3, [r5, #0]
 8001e24:	2e00      	cmp	r6, #0
 8001e26:	da03      	bge.n	8001e30 <_printf_i+0xc8>
 8001e28:	232d      	movs	r3, #45	; 0x2d
 8001e2a:	4276      	negs	r6, r6
 8001e2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001e30:	230a      	movs	r3, #10
 8001e32:	485e      	ldr	r0, [pc, #376]	; (8001fac <_printf_i+0x244>)
 8001e34:	e019      	b.n	8001e6a <_printf_i+0x102>
 8001e36:	680e      	ldr	r6, [r1, #0]
 8001e38:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001e3c:	602b      	str	r3, [r5, #0]
 8001e3e:	bf18      	it	ne
 8001e40:	b236      	sxthne	r6, r6
 8001e42:	e7ef      	b.n	8001e24 <_printf_i+0xbc>
 8001e44:	682b      	ldr	r3, [r5, #0]
 8001e46:	6820      	ldr	r0, [r4, #0]
 8001e48:	1d19      	adds	r1, r3, #4
 8001e4a:	6029      	str	r1, [r5, #0]
 8001e4c:	0601      	lsls	r1, r0, #24
 8001e4e:	d501      	bpl.n	8001e54 <_printf_i+0xec>
 8001e50:	681e      	ldr	r6, [r3, #0]
 8001e52:	e002      	b.n	8001e5a <_printf_i+0xf2>
 8001e54:	0646      	lsls	r6, r0, #25
 8001e56:	d5fb      	bpl.n	8001e50 <_printf_i+0xe8>
 8001e58:	881e      	ldrh	r6, [r3, #0]
 8001e5a:	2f6f      	cmp	r7, #111	; 0x6f
 8001e5c:	bf0c      	ite	eq
 8001e5e:	2308      	moveq	r3, #8
 8001e60:	230a      	movne	r3, #10
 8001e62:	4852      	ldr	r0, [pc, #328]	; (8001fac <_printf_i+0x244>)
 8001e64:	2100      	movs	r1, #0
 8001e66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001e6a:	6865      	ldr	r5, [r4, #4]
 8001e6c:	2d00      	cmp	r5, #0
 8001e6e:	bfa8      	it	ge
 8001e70:	6821      	ldrge	r1, [r4, #0]
 8001e72:	60a5      	str	r5, [r4, #8]
 8001e74:	bfa4      	itt	ge
 8001e76:	f021 0104 	bicge.w	r1, r1, #4
 8001e7a:	6021      	strge	r1, [r4, #0]
 8001e7c:	b90e      	cbnz	r6, 8001e82 <_printf_i+0x11a>
 8001e7e:	2d00      	cmp	r5, #0
 8001e80:	d04d      	beq.n	8001f1e <_printf_i+0x1b6>
 8001e82:	4615      	mov	r5, r2
 8001e84:	fbb6 f1f3 	udiv	r1, r6, r3
 8001e88:	fb03 6711 	mls	r7, r3, r1, r6
 8001e8c:	5dc7      	ldrb	r7, [r0, r7]
 8001e8e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001e92:	4637      	mov	r7, r6
 8001e94:	42bb      	cmp	r3, r7
 8001e96:	460e      	mov	r6, r1
 8001e98:	d9f4      	bls.n	8001e84 <_printf_i+0x11c>
 8001e9a:	2b08      	cmp	r3, #8
 8001e9c:	d10b      	bne.n	8001eb6 <_printf_i+0x14e>
 8001e9e:	6823      	ldr	r3, [r4, #0]
 8001ea0:	07de      	lsls	r6, r3, #31
 8001ea2:	d508      	bpl.n	8001eb6 <_printf_i+0x14e>
 8001ea4:	6923      	ldr	r3, [r4, #16]
 8001ea6:	6861      	ldr	r1, [r4, #4]
 8001ea8:	4299      	cmp	r1, r3
 8001eaa:	bfde      	ittt	le
 8001eac:	2330      	movle	r3, #48	; 0x30
 8001eae:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001eb2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001eb6:	1b52      	subs	r2, r2, r5
 8001eb8:	6122      	str	r2, [r4, #16]
 8001eba:	464b      	mov	r3, r9
 8001ebc:	4621      	mov	r1, r4
 8001ebe:	4640      	mov	r0, r8
 8001ec0:	f8cd a000 	str.w	sl, [sp]
 8001ec4:	aa03      	add	r2, sp, #12
 8001ec6:	f7ff fedf 	bl	8001c88 <_printf_common>
 8001eca:	3001      	adds	r0, #1
 8001ecc:	d14c      	bne.n	8001f68 <_printf_i+0x200>
 8001ece:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed2:	b004      	add	sp, #16
 8001ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ed8:	4834      	ldr	r0, [pc, #208]	; (8001fac <_printf_i+0x244>)
 8001eda:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001ede:	6829      	ldr	r1, [r5, #0]
 8001ee0:	6823      	ldr	r3, [r4, #0]
 8001ee2:	f851 6b04 	ldr.w	r6, [r1], #4
 8001ee6:	6029      	str	r1, [r5, #0]
 8001ee8:	061d      	lsls	r5, r3, #24
 8001eea:	d514      	bpl.n	8001f16 <_printf_i+0x1ae>
 8001eec:	07df      	lsls	r7, r3, #31
 8001eee:	bf44      	itt	mi
 8001ef0:	f043 0320 	orrmi.w	r3, r3, #32
 8001ef4:	6023      	strmi	r3, [r4, #0]
 8001ef6:	b91e      	cbnz	r6, 8001f00 <_printf_i+0x198>
 8001ef8:	6823      	ldr	r3, [r4, #0]
 8001efa:	f023 0320 	bic.w	r3, r3, #32
 8001efe:	6023      	str	r3, [r4, #0]
 8001f00:	2310      	movs	r3, #16
 8001f02:	e7af      	b.n	8001e64 <_printf_i+0xfc>
 8001f04:	6823      	ldr	r3, [r4, #0]
 8001f06:	f043 0320 	orr.w	r3, r3, #32
 8001f0a:	6023      	str	r3, [r4, #0]
 8001f0c:	2378      	movs	r3, #120	; 0x78
 8001f0e:	4828      	ldr	r0, [pc, #160]	; (8001fb0 <_printf_i+0x248>)
 8001f10:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001f14:	e7e3      	b.n	8001ede <_printf_i+0x176>
 8001f16:	0659      	lsls	r1, r3, #25
 8001f18:	bf48      	it	mi
 8001f1a:	b2b6      	uxthmi	r6, r6
 8001f1c:	e7e6      	b.n	8001eec <_printf_i+0x184>
 8001f1e:	4615      	mov	r5, r2
 8001f20:	e7bb      	b.n	8001e9a <_printf_i+0x132>
 8001f22:	682b      	ldr	r3, [r5, #0]
 8001f24:	6826      	ldr	r6, [r4, #0]
 8001f26:	1d18      	adds	r0, r3, #4
 8001f28:	6961      	ldr	r1, [r4, #20]
 8001f2a:	6028      	str	r0, [r5, #0]
 8001f2c:	0635      	lsls	r5, r6, #24
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	d501      	bpl.n	8001f36 <_printf_i+0x1ce>
 8001f32:	6019      	str	r1, [r3, #0]
 8001f34:	e002      	b.n	8001f3c <_printf_i+0x1d4>
 8001f36:	0670      	lsls	r0, r6, #25
 8001f38:	d5fb      	bpl.n	8001f32 <_printf_i+0x1ca>
 8001f3a:	8019      	strh	r1, [r3, #0]
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	4615      	mov	r5, r2
 8001f40:	6123      	str	r3, [r4, #16]
 8001f42:	e7ba      	b.n	8001eba <_printf_i+0x152>
 8001f44:	682b      	ldr	r3, [r5, #0]
 8001f46:	2100      	movs	r1, #0
 8001f48:	1d1a      	adds	r2, r3, #4
 8001f4a:	602a      	str	r2, [r5, #0]
 8001f4c:	681d      	ldr	r5, [r3, #0]
 8001f4e:	6862      	ldr	r2, [r4, #4]
 8001f50:	4628      	mov	r0, r5
 8001f52:	f000 fa9b 	bl	800248c <memchr>
 8001f56:	b108      	cbz	r0, 8001f5c <_printf_i+0x1f4>
 8001f58:	1b40      	subs	r0, r0, r5
 8001f5a:	6060      	str	r0, [r4, #4]
 8001f5c:	6863      	ldr	r3, [r4, #4]
 8001f5e:	6123      	str	r3, [r4, #16]
 8001f60:	2300      	movs	r3, #0
 8001f62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001f66:	e7a8      	b.n	8001eba <_printf_i+0x152>
 8001f68:	462a      	mov	r2, r5
 8001f6a:	4649      	mov	r1, r9
 8001f6c:	4640      	mov	r0, r8
 8001f6e:	6923      	ldr	r3, [r4, #16]
 8001f70:	47d0      	blx	sl
 8001f72:	3001      	adds	r0, #1
 8001f74:	d0ab      	beq.n	8001ece <_printf_i+0x166>
 8001f76:	6823      	ldr	r3, [r4, #0]
 8001f78:	079b      	lsls	r3, r3, #30
 8001f7a:	d413      	bmi.n	8001fa4 <_printf_i+0x23c>
 8001f7c:	68e0      	ldr	r0, [r4, #12]
 8001f7e:	9b03      	ldr	r3, [sp, #12]
 8001f80:	4298      	cmp	r0, r3
 8001f82:	bfb8      	it	lt
 8001f84:	4618      	movlt	r0, r3
 8001f86:	e7a4      	b.n	8001ed2 <_printf_i+0x16a>
 8001f88:	2301      	movs	r3, #1
 8001f8a:	4632      	mov	r2, r6
 8001f8c:	4649      	mov	r1, r9
 8001f8e:	4640      	mov	r0, r8
 8001f90:	47d0      	blx	sl
 8001f92:	3001      	adds	r0, #1
 8001f94:	d09b      	beq.n	8001ece <_printf_i+0x166>
 8001f96:	3501      	adds	r5, #1
 8001f98:	68e3      	ldr	r3, [r4, #12]
 8001f9a:	9903      	ldr	r1, [sp, #12]
 8001f9c:	1a5b      	subs	r3, r3, r1
 8001f9e:	42ab      	cmp	r3, r5
 8001fa0:	dcf2      	bgt.n	8001f88 <_printf_i+0x220>
 8001fa2:	e7eb      	b.n	8001f7c <_printf_i+0x214>
 8001fa4:	2500      	movs	r5, #0
 8001fa6:	f104 0619 	add.w	r6, r4, #25
 8001faa:	e7f5      	b.n	8001f98 <_printf_i+0x230>
 8001fac:	08002679 	.word	0x08002679
 8001fb0:	0800268a 	.word	0x0800268a

08001fb4 <_sbrk_r>:
 8001fb4:	b538      	push	{r3, r4, r5, lr}
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	4d05      	ldr	r5, [pc, #20]	; (8001fd0 <_sbrk_r+0x1c>)
 8001fba:	4604      	mov	r4, r0
 8001fbc:	4608      	mov	r0, r1
 8001fbe:	602b      	str	r3, [r5, #0]
 8001fc0:	f7fe fbf6 	bl	80007b0 <_sbrk>
 8001fc4:	1c43      	adds	r3, r0, #1
 8001fc6:	d102      	bne.n	8001fce <_sbrk_r+0x1a>
 8001fc8:	682b      	ldr	r3, [r5, #0]
 8001fca:	b103      	cbz	r3, 8001fce <_sbrk_r+0x1a>
 8001fcc:	6023      	str	r3, [r4, #0]
 8001fce:	bd38      	pop	{r3, r4, r5, pc}
 8001fd0:	200000b8 	.word	0x200000b8

08001fd4 <__sread>:
 8001fd4:	b510      	push	{r4, lr}
 8001fd6:	460c      	mov	r4, r1
 8001fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fdc:	f000 fab8 	bl	8002550 <_read_r>
 8001fe0:	2800      	cmp	r0, #0
 8001fe2:	bfab      	itete	ge
 8001fe4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001fe6:	89a3      	ldrhlt	r3, [r4, #12]
 8001fe8:	181b      	addge	r3, r3, r0
 8001fea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001fee:	bfac      	ite	ge
 8001ff0:	6563      	strge	r3, [r4, #84]	; 0x54
 8001ff2:	81a3      	strhlt	r3, [r4, #12]
 8001ff4:	bd10      	pop	{r4, pc}

08001ff6 <__swrite>:
 8001ff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ffa:	461f      	mov	r7, r3
 8001ffc:	898b      	ldrh	r3, [r1, #12]
 8001ffe:	4605      	mov	r5, r0
 8002000:	05db      	lsls	r3, r3, #23
 8002002:	460c      	mov	r4, r1
 8002004:	4616      	mov	r6, r2
 8002006:	d505      	bpl.n	8002014 <__swrite+0x1e>
 8002008:	2302      	movs	r3, #2
 800200a:	2200      	movs	r2, #0
 800200c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002010:	f000 f9c4 	bl	800239c <_lseek_r>
 8002014:	89a3      	ldrh	r3, [r4, #12]
 8002016:	4632      	mov	r2, r6
 8002018:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800201c:	81a3      	strh	r3, [r4, #12]
 800201e:	4628      	mov	r0, r5
 8002020:	463b      	mov	r3, r7
 8002022:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002026:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800202a:	f000 b869 	b.w	8002100 <_write_r>

0800202e <__sseek>:
 800202e:	b510      	push	{r4, lr}
 8002030:	460c      	mov	r4, r1
 8002032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002036:	f000 f9b1 	bl	800239c <_lseek_r>
 800203a:	1c43      	adds	r3, r0, #1
 800203c:	89a3      	ldrh	r3, [r4, #12]
 800203e:	bf15      	itete	ne
 8002040:	6560      	strne	r0, [r4, #84]	; 0x54
 8002042:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002046:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800204a:	81a3      	strheq	r3, [r4, #12]
 800204c:	bf18      	it	ne
 800204e:	81a3      	strhne	r3, [r4, #12]
 8002050:	bd10      	pop	{r4, pc}

08002052 <__sclose>:
 8002052:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002056:	f000 b8d3 	b.w	8002200 <_close_r>
	...

0800205c <__swbuf_r>:
 800205c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800205e:	460e      	mov	r6, r1
 8002060:	4614      	mov	r4, r2
 8002062:	4605      	mov	r5, r0
 8002064:	b118      	cbz	r0, 800206e <__swbuf_r+0x12>
 8002066:	6983      	ldr	r3, [r0, #24]
 8002068:	b90b      	cbnz	r3, 800206e <__swbuf_r+0x12>
 800206a:	f7ff fb81 	bl	8001770 <__sinit>
 800206e:	4b21      	ldr	r3, [pc, #132]	; (80020f4 <__swbuf_r+0x98>)
 8002070:	429c      	cmp	r4, r3
 8002072:	d12b      	bne.n	80020cc <__swbuf_r+0x70>
 8002074:	686c      	ldr	r4, [r5, #4]
 8002076:	69a3      	ldr	r3, [r4, #24]
 8002078:	60a3      	str	r3, [r4, #8]
 800207a:	89a3      	ldrh	r3, [r4, #12]
 800207c:	071a      	lsls	r2, r3, #28
 800207e:	d52f      	bpl.n	80020e0 <__swbuf_r+0x84>
 8002080:	6923      	ldr	r3, [r4, #16]
 8002082:	b36b      	cbz	r3, 80020e0 <__swbuf_r+0x84>
 8002084:	6923      	ldr	r3, [r4, #16]
 8002086:	6820      	ldr	r0, [r4, #0]
 8002088:	b2f6      	uxtb	r6, r6
 800208a:	1ac0      	subs	r0, r0, r3
 800208c:	6963      	ldr	r3, [r4, #20]
 800208e:	4637      	mov	r7, r6
 8002090:	4283      	cmp	r3, r0
 8002092:	dc04      	bgt.n	800209e <__swbuf_r+0x42>
 8002094:	4621      	mov	r1, r4
 8002096:	4628      	mov	r0, r5
 8002098:	f000 f944 	bl	8002324 <_fflush_r>
 800209c:	bb30      	cbnz	r0, 80020ec <__swbuf_r+0x90>
 800209e:	68a3      	ldr	r3, [r4, #8]
 80020a0:	3001      	adds	r0, #1
 80020a2:	3b01      	subs	r3, #1
 80020a4:	60a3      	str	r3, [r4, #8]
 80020a6:	6823      	ldr	r3, [r4, #0]
 80020a8:	1c5a      	adds	r2, r3, #1
 80020aa:	6022      	str	r2, [r4, #0]
 80020ac:	701e      	strb	r6, [r3, #0]
 80020ae:	6963      	ldr	r3, [r4, #20]
 80020b0:	4283      	cmp	r3, r0
 80020b2:	d004      	beq.n	80020be <__swbuf_r+0x62>
 80020b4:	89a3      	ldrh	r3, [r4, #12]
 80020b6:	07db      	lsls	r3, r3, #31
 80020b8:	d506      	bpl.n	80020c8 <__swbuf_r+0x6c>
 80020ba:	2e0a      	cmp	r6, #10
 80020bc:	d104      	bne.n	80020c8 <__swbuf_r+0x6c>
 80020be:	4621      	mov	r1, r4
 80020c0:	4628      	mov	r0, r5
 80020c2:	f000 f92f 	bl	8002324 <_fflush_r>
 80020c6:	b988      	cbnz	r0, 80020ec <__swbuf_r+0x90>
 80020c8:	4638      	mov	r0, r7
 80020ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020cc:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <__swbuf_r+0x9c>)
 80020ce:	429c      	cmp	r4, r3
 80020d0:	d101      	bne.n	80020d6 <__swbuf_r+0x7a>
 80020d2:	68ac      	ldr	r4, [r5, #8]
 80020d4:	e7cf      	b.n	8002076 <__swbuf_r+0x1a>
 80020d6:	4b09      	ldr	r3, [pc, #36]	; (80020fc <__swbuf_r+0xa0>)
 80020d8:	429c      	cmp	r4, r3
 80020da:	bf08      	it	eq
 80020dc:	68ec      	ldreq	r4, [r5, #12]
 80020de:	e7ca      	b.n	8002076 <__swbuf_r+0x1a>
 80020e0:	4621      	mov	r1, r4
 80020e2:	4628      	mov	r0, r5
 80020e4:	f000 f81e 	bl	8002124 <__swsetup_r>
 80020e8:	2800      	cmp	r0, #0
 80020ea:	d0cb      	beq.n	8002084 <__swbuf_r+0x28>
 80020ec:	f04f 37ff 	mov.w	r7, #4294967295
 80020f0:	e7ea      	b.n	80020c8 <__swbuf_r+0x6c>
 80020f2:	bf00      	nop
 80020f4:	08002628 	.word	0x08002628
 80020f8:	08002648 	.word	0x08002648
 80020fc:	08002608 	.word	0x08002608

08002100 <_write_r>:
 8002100:	b538      	push	{r3, r4, r5, lr}
 8002102:	4604      	mov	r4, r0
 8002104:	4608      	mov	r0, r1
 8002106:	4611      	mov	r1, r2
 8002108:	2200      	movs	r2, #0
 800210a:	4d05      	ldr	r5, [pc, #20]	; (8002120 <_write_r+0x20>)
 800210c:	602a      	str	r2, [r5, #0]
 800210e:	461a      	mov	r2, r3
 8002110:	f7fe fb02 	bl	8000718 <_write>
 8002114:	1c43      	adds	r3, r0, #1
 8002116:	d102      	bne.n	800211e <_write_r+0x1e>
 8002118:	682b      	ldr	r3, [r5, #0]
 800211a:	b103      	cbz	r3, 800211e <_write_r+0x1e>
 800211c:	6023      	str	r3, [r4, #0]
 800211e:	bd38      	pop	{r3, r4, r5, pc}
 8002120:	200000b8 	.word	0x200000b8

08002124 <__swsetup_r>:
 8002124:	4b32      	ldr	r3, [pc, #200]	; (80021f0 <__swsetup_r+0xcc>)
 8002126:	b570      	push	{r4, r5, r6, lr}
 8002128:	681d      	ldr	r5, [r3, #0]
 800212a:	4606      	mov	r6, r0
 800212c:	460c      	mov	r4, r1
 800212e:	b125      	cbz	r5, 800213a <__swsetup_r+0x16>
 8002130:	69ab      	ldr	r3, [r5, #24]
 8002132:	b913      	cbnz	r3, 800213a <__swsetup_r+0x16>
 8002134:	4628      	mov	r0, r5
 8002136:	f7ff fb1b 	bl	8001770 <__sinit>
 800213a:	4b2e      	ldr	r3, [pc, #184]	; (80021f4 <__swsetup_r+0xd0>)
 800213c:	429c      	cmp	r4, r3
 800213e:	d10f      	bne.n	8002160 <__swsetup_r+0x3c>
 8002140:	686c      	ldr	r4, [r5, #4]
 8002142:	89a3      	ldrh	r3, [r4, #12]
 8002144:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002148:	0719      	lsls	r1, r3, #28
 800214a:	d42c      	bmi.n	80021a6 <__swsetup_r+0x82>
 800214c:	06dd      	lsls	r5, r3, #27
 800214e:	d411      	bmi.n	8002174 <__swsetup_r+0x50>
 8002150:	2309      	movs	r3, #9
 8002152:	6033      	str	r3, [r6, #0]
 8002154:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002158:	f04f 30ff 	mov.w	r0, #4294967295
 800215c:	81a3      	strh	r3, [r4, #12]
 800215e:	e03e      	b.n	80021de <__swsetup_r+0xba>
 8002160:	4b25      	ldr	r3, [pc, #148]	; (80021f8 <__swsetup_r+0xd4>)
 8002162:	429c      	cmp	r4, r3
 8002164:	d101      	bne.n	800216a <__swsetup_r+0x46>
 8002166:	68ac      	ldr	r4, [r5, #8]
 8002168:	e7eb      	b.n	8002142 <__swsetup_r+0x1e>
 800216a:	4b24      	ldr	r3, [pc, #144]	; (80021fc <__swsetup_r+0xd8>)
 800216c:	429c      	cmp	r4, r3
 800216e:	bf08      	it	eq
 8002170:	68ec      	ldreq	r4, [r5, #12]
 8002172:	e7e6      	b.n	8002142 <__swsetup_r+0x1e>
 8002174:	0758      	lsls	r0, r3, #29
 8002176:	d512      	bpl.n	800219e <__swsetup_r+0x7a>
 8002178:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800217a:	b141      	cbz	r1, 800218e <__swsetup_r+0x6a>
 800217c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002180:	4299      	cmp	r1, r3
 8002182:	d002      	beq.n	800218a <__swsetup_r+0x66>
 8002184:	4630      	mov	r0, r6
 8002186:	f000 f99b 	bl	80024c0 <_free_r>
 800218a:	2300      	movs	r3, #0
 800218c:	6363      	str	r3, [r4, #52]	; 0x34
 800218e:	89a3      	ldrh	r3, [r4, #12]
 8002190:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002194:	81a3      	strh	r3, [r4, #12]
 8002196:	2300      	movs	r3, #0
 8002198:	6063      	str	r3, [r4, #4]
 800219a:	6923      	ldr	r3, [r4, #16]
 800219c:	6023      	str	r3, [r4, #0]
 800219e:	89a3      	ldrh	r3, [r4, #12]
 80021a0:	f043 0308 	orr.w	r3, r3, #8
 80021a4:	81a3      	strh	r3, [r4, #12]
 80021a6:	6923      	ldr	r3, [r4, #16]
 80021a8:	b94b      	cbnz	r3, 80021be <__swsetup_r+0x9a>
 80021aa:	89a3      	ldrh	r3, [r4, #12]
 80021ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80021b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021b4:	d003      	beq.n	80021be <__swsetup_r+0x9a>
 80021b6:	4621      	mov	r1, r4
 80021b8:	4630      	mov	r0, r6
 80021ba:	f000 f927 	bl	800240c <__smakebuf_r>
 80021be:	89a0      	ldrh	r0, [r4, #12]
 80021c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80021c4:	f010 0301 	ands.w	r3, r0, #1
 80021c8:	d00a      	beq.n	80021e0 <__swsetup_r+0xbc>
 80021ca:	2300      	movs	r3, #0
 80021cc:	60a3      	str	r3, [r4, #8]
 80021ce:	6963      	ldr	r3, [r4, #20]
 80021d0:	425b      	negs	r3, r3
 80021d2:	61a3      	str	r3, [r4, #24]
 80021d4:	6923      	ldr	r3, [r4, #16]
 80021d6:	b943      	cbnz	r3, 80021ea <__swsetup_r+0xc6>
 80021d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80021dc:	d1ba      	bne.n	8002154 <__swsetup_r+0x30>
 80021de:	bd70      	pop	{r4, r5, r6, pc}
 80021e0:	0781      	lsls	r1, r0, #30
 80021e2:	bf58      	it	pl
 80021e4:	6963      	ldrpl	r3, [r4, #20]
 80021e6:	60a3      	str	r3, [r4, #8]
 80021e8:	e7f4      	b.n	80021d4 <__swsetup_r+0xb0>
 80021ea:	2000      	movs	r0, #0
 80021ec:	e7f7      	b.n	80021de <__swsetup_r+0xba>
 80021ee:	bf00      	nop
 80021f0:	2000001c 	.word	0x2000001c
 80021f4:	08002628 	.word	0x08002628
 80021f8:	08002648 	.word	0x08002648
 80021fc:	08002608 	.word	0x08002608

08002200 <_close_r>:
 8002200:	b538      	push	{r3, r4, r5, lr}
 8002202:	2300      	movs	r3, #0
 8002204:	4d05      	ldr	r5, [pc, #20]	; (800221c <_close_r+0x1c>)
 8002206:	4604      	mov	r4, r0
 8002208:	4608      	mov	r0, r1
 800220a:	602b      	str	r3, [r5, #0]
 800220c:	f7fe faa0 	bl	8000750 <_close>
 8002210:	1c43      	adds	r3, r0, #1
 8002212:	d102      	bne.n	800221a <_close_r+0x1a>
 8002214:	682b      	ldr	r3, [r5, #0]
 8002216:	b103      	cbz	r3, 800221a <_close_r+0x1a>
 8002218:	6023      	str	r3, [r4, #0]
 800221a:	bd38      	pop	{r3, r4, r5, pc}
 800221c:	200000b8 	.word	0x200000b8

08002220 <__sflush_r>:
 8002220:	898a      	ldrh	r2, [r1, #12]
 8002222:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002224:	4605      	mov	r5, r0
 8002226:	0710      	lsls	r0, r2, #28
 8002228:	460c      	mov	r4, r1
 800222a:	d457      	bmi.n	80022dc <__sflush_r+0xbc>
 800222c:	684b      	ldr	r3, [r1, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	dc04      	bgt.n	800223c <__sflush_r+0x1c>
 8002232:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002234:	2b00      	cmp	r3, #0
 8002236:	dc01      	bgt.n	800223c <__sflush_r+0x1c>
 8002238:	2000      	movs	r0, #0
 800223a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800223c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800223e:	2e00      	cmp	r6, #0
 8002240:	d0fa      	beq.n	8002238 <__sflush_r+0x18>
 8002242:	2300      	movs	r3, #0
 8002244:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002248:	682f      	ldr	r7, [r5, #0]
 800224a:	602b      	str	r3, [r5, #0]
 800224c:	d032      	beq.n	80022b4 <__sflush_r+0x94>
 800224e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002250:	89a3      	ldrh	r3, [r4, #12]
 8002252:	075a      	lsls	r2, r3, #29
 8002254:	d505      	bpl.n	8002262 <__sflush_r+0x42>
 8002256:	6863      	ldr	r3, [r4, #4]
 8002258:	1ac0      	subs	r0, r0, r3
 800225a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800225c:	b10b      	cbz	r3, 8002262 <__sflush_r+0x42>
 800225e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002260:	1ac0      	subs	r0, r0, r3
 8002262:	2300      	movs	r3, #0
 8002264:	4602      	mov	r2, r0
 8002266:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002268:	4628      	mov	r0, r5
 800226a:	6a21      	ldr	r1, [r4, #32]
 800226c:	47b0      	blx	r6
 800226e:	1c43      	adds	r3, r0, #1
 8002270:	89a3      	ldrh	r3, [r4, #12]
 8002272:	d106      	bne.n	8002282 <__sflush_r+0x62>
 8002274:	6829      	ldr	r1, [r5, #0]
 8002276:	291d      	cmp	r1, #29
 8002278:	d82c      	bhi.n	80022d4 <__sflush_r+0xb4>
 800227a:	4a29      	ldr	r2, [pc, #164]	; (8002320 <__sflush_r+0x100>)
 800227c:	40ca      	lsrs	r2, r1
 800227e:	07d6      	lsls	r6, r2, #31
 8002280:	d528      	bpl.n	80022d4 <__sflush_r+0xb4>
 8002282:	2200      	movs	r2, #0
 8002284:	6062      	str	r2, [r4, #4]
 8002286:	6922      	ldr	r2, [r4, #16]
 8002288:	04d9      	lsls	r1, r3, #19
 800228a:	6022      	str	r2, [r4, #0]
 800228c:	d504      	bpl.n	8002298 <__sflush_r+0x78>
 800228e:	1c42      	adds	r2, r0, #1
 8002290:	d101      	bne.n	8002296 <__sflush_r+0x76>
 8002292:	682b      	ldr	r3, [r5, #0]
 8002294:	b903      	cbnz	r3, 8002298 <__sflush_r+0x78>
 8002296:	6560      	str	r0, [r4, #84]	; 0x54
 8002298:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800229a:	602f      	str	r7, [r5, #0]
 800229c:	2900      	cmp	r1, #0
 800229e:	d0cb      	beq.n	8002238 <__sflush_r+0x18>
 80022a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80022a4:	4299      	cmp	r1, r3
 80022a6:	d002      	beq.n	80022ae <__sflush_r+0x8e>
 80022a8:	4628      	mov	r0, r5
 80022aa:	f000 f909 	bl	80024c0 <_free_r>
 80022ae:	2000      	movs	r0, #0
 80022b0:	6360      	str	r0, [r4, #52]	; 0x34
 80022b2:	e7c2      	b.n	800223a <__sflush_r+0x1a>
 80022b4:	6a21      	ldr	r1, [r4, #32]
 80022b6:	2301      	movs	r3, #1
 80022b8:	4628      	mov	r0, r5
 80022ba:	47b0      	blx	r6
 80022bc:	1c41      	adds	r1, r0, #1
 80022be:	d1c7      	bne.n	8002250 <__sflush_r+0x30>
 80022c0:	682b      	ldr	r3, [r5, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d0c4      	beq.n	8002250 <__sflush_r+0x30>
 80022c6:	2b1d      	cmp	r3, #29
 80022c8:	d001      	beq.n	80022ce <__sflush_r+0xae>
 80022ca:	2b16      	cmp	r3, #22
 80022cc:	d101      	bne.n	80022d2 <__sflush_r+0xb2>
 80022ce:	602f      	str	r7, [r5, #0]
 80022d0:	e7b2      	b.n	8002238 <__sflush_r+0x18>
 80022d2:	89a3      	ldrh	r3, [r4, #12]
 80022d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022d8:	81a3      	strh	r3, [r4, #12]
 80022da:	e7ae      	b.n	800223a <__sflush_r+0x1a>
 80022dc:	690f      	ldr	r7, [r1, #16]
 80022de:	2f00      	cmp	r7, #0
 80022e0:	d0aa      	beq.n	8002238 <__sflush_r+0x18>
 80022e2:	0793      	lsls	r3, r2, #30
 80022e4:	bf18      	it	ne
 80022e6:	2300      	movne	r3, #0
 80022e8:	680e      	ldr	r6, [r1, #0]
 80022ea:	bf08      	it	eq
 80022ec:	694b      	ldreq	r3, [r1, #20]
 80022ee:	1bf6      	subs	r6, r6, r7
 80022f0:	600f      	str	r7, [r1, #0]
 80022f2:	608b      	str	r3, [r1, #8]
 80022f4:	2e00      	cmp	r6, #0
 80022f6:	dd9f      	ble.n	8002238 <__sflush_r+0x18>
 80022f8:	4633      	mov	r3, r6
 80022fa:	463a      	mov	r2, r7
 80022fc:	4628      	mov	r0, r5
 80022fe:	6a21      	ldr	r1, [r4, #32]
 8002300:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002304:	47e0      	blx	ip
 8002306:	2800      	cmp	r0, #0
 8002308:	dc06      	bgt.n	8002318 <__sflush_r+0xf8>
 800230a:	89a3      	ldrh	r3, [r4, #12]
 800230c:	f04f 30ff 	mov.w	r0, #4294967295
 8002310:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002314:	81a3      	strh	r3, [r4, #12]
 8002316:	e790      	b.n	800223a <__sflush_r+0x1a>
 8002318:	4407      	add	r7, r0
 800231a:	1a36      	subs	r6, r6, r0
 800231c:	e7ea      	b.n	80022f4 <__sflush_r+0xd4>
 800231e:	bf00      	nop
 8002320:	20400001 	.word	0x20400001

08002324 <_fflush_r>:
 8002324:	b538      	push	{r3, r4, r5, lr}
 8002326:	690b      	ldr	r3, [r1, #16]
 8002328:	4605      	mov	r5, r0
 800232a:	460c      	mov	r4, r1
 800232c:	b913      	cbnz	r3, 8002334 <_fflush_r+0x10>
 800232e:	2500      	movs	r5, #0
 8002330:	4628      	mov	r0, r5
 8002332:	bd38      	pop	{r3, r4, r5, pc}
 8002334:	b118      	cbz	r0, 800233e <_fflush_r+0x1a>
 8002336:	6983      	ldr	r3, [r0, #24]
 8002338:	b90b      	cbnz	r3, 800233e <_fflush_r+0x1a>
 800233a:	f7ff fa19 	bl	8001770 <__sinit>
 800233e:	4b14      	ldr	r3, [pc, #80]	; (8002390 <_fflush_r+0x6c>)
 8002340:	429c      	cmp	r4, r3
 8002342:	d11b      	bne.n	800237c <_fflush_r+0x58>
 8002344:	686c      	ldr	r4, [r5, #4]
 8002346:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d0ef      	beq.n	800232e <_fflush_r+0xa>
 800234e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002350:	07d0      	lsls	r0, r2, #31
 8002352:	d404      	bmi.n	800235e <_fflush_r+0x3a>
 8002354:	0599      	lsls	r1, r3, #22
 8002356:	d402      	bmi.n	800235e <_fflush_r+0x3a>
 8002358:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800235a:	f7ff faa7 	bl	80018ac <__retarget_lock_acquire_recursive>
 800235e:	4628      	mov	r0, r5
 8002360:	4621      	mov	r1, r4
 8002362:	f7ff ff5d 	bl	8002220 <__sflush_r>
 8002366:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002368:	4605      	mov	r5, r0
 800236a:	07da      	lsls	r2, r3, #31
 800236c:	d4e0      	bmi.n	8002330 <_fflush_r+0xc>
 800236e:	89a3      	ldrh	r3, [r4, #12]
 8002370:	059b      	lsls	r3, r3, #22
 8002372:	d4dd      	bmi.n	8002330 <_fflush_r+0xc>
 8002374:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002376:	f7ff fa9a 	bl	80018ae <__retarget_lock_release_recursive>
 800237a:	e7d9      	b.n	8002330 <_fflush_r+0xc>
 800237c:	4b05      	ldr	r3, [pc, #20]	; (8002394 <_fflush_r+0x70>)
 800237e:	429c      	cmp	r4, r3
 8002380:	d101      	bne.n	8002386 <_fflush_r+0x62>
 8002382:	68ac      	ldr	r4, [r5, #8]
 8002384:	e7df      	b.n	8002346 <_fflush_r+0x22>
 8002386:	4b04      	ldr	r3, [pc, #16]	; (8002398 <_fflush_r+0x74>)
 8002388:	429c      	cmp	r4, r3
 800238a:	bf08      	it	eq
 800238c:	68ec      	ldreq	r4, [r5, #12]
 800238e:	e7da      	b.n	8002346 <_fflush_r+0x22>
 8002390:	08002628 	.word	0x08002628
 8002394:	08002648 	.word	0x08002648
 8002398:	08002608 	.word	0x08002608

0800239c <_lseek_r>:
 800239c:	b538      	push	{r3, r4, r5, lr}
 800239e:	4604      	mov	r4, r0
 80023a0:	4608      	mov	r0, r1
 80023a2:	4611      	mov	r1, r2
 80023a4:	2200      	movs	r2, #0
 80023a6:	4d05      	ldr	r5, [pc, #20]	; (80023bc <_lseek_r+0x20>)
 80023a8:	602a      	str	r2, [r5, #0]
 80023aa:	461a      	mov	r2, r3
 80023ac:	f7fe f9f4 	bl	8000798 <_lseek>
 80023b0:	1c43      	adds	r3, r0, #1
 80023b2:	d102      	bne.n	80023ba <_lseek_r+0x1e>
 80023b4:	682b      	ldr	r3, [r5, #0]
 80023b6:	b103      	cbz	r3, 80023ba <_lseek_r+0x1e>
 80023b8:	6023      	str	r3, [r4, #0]
 80023ba:	bd38      	pop	{r3, r4, r5, pc}
 80023bc:	200000b8 	.word	0x200000b8

080023c0 <__swhatbuf_r>:
 80023c0:	b570      	push	{r4, r5, r6, lr}
 80023c2:	460e      	mov	r6, r1
 80023c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023c8:	4614      	mov	r4, r2
 80023ca:	2900      	cmp	r1, #0
 80023cc:	461d      	mov	r5, r3
 80023ce:	b096      	sub	sp, #88	; 0x58
 80023d0:	da08      	bge.n	80023e4 <__swhatbuf_r+0x24>
 80023d2:	2200      	movs	r2, #0
 80023d4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80023d8:	602a      	str	r2, [r5, #0]
 80023da:	061a      	lsls	r2, r3, #24
 80023dc:	d410      	bmi.n	8002400 <__swhatbuf_r+0x40>
 80023de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023e2:	e00e      	b.n	8002402 <__swhatbuf_r+0x42>
 80023e4:	466a      	mov	r2, sp
 80023e6:	f000 f8c5 	bl	8002574 <_fstat_r>
 80023ea:	2800      	cmp	r0, #0
 80023ec:	dbf1      	blt.n	80023d2 <__swhatbuf_r+0x12>
 80023ee:	9a01      	ldr	r2, [sp, #4]
 80023f0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80023f4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80023f8:	425a      	negs	r2, r3
 80023fa:	415a      	adcs	r2, r3
 80023fc:	602a      	str	r2, [r5, #0]
 80023fe:	e7ee      	b.n	80023de <__swhatbuf_r+0x1e>
 8002400:	2340      	movs	r3, #64	; 0x40
 8002402:	2000      	movs	r0, #0
 8002404:	6023      	str	r3, [r4, #0]
 8002406:	b016      	add	sp, #88	; 0x58
 8002408:	bd70      	pop	{r4, r5, r6, pc}
	...

0800240c <__smakebuf_r>:
 800240c:	898b      	ldrh	r3, [r1, #12]
 800240e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002410:	079d      	lsls	r5, r3, #30
 8002412:	4606      	mov	r6, r0
 8002414:	460c      	mov	r4, r1
 8002416:	d507      	bpl.n	8002428 <__smakebuf_r+0x1c>
 8002418:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800241c:	6023      	str	r3, [r4, #0]
 800241e:	6123      	str	r3, [r4, #16]
 8002420:	2301      	movs	r3, #1
 8002422:	6163      	str	r3, [r4, #20]
 8002424:	b002      	add	sp, #8
 8002426:	bd70      	pop	{r4, r5, r6, pc}
 8002428:	466a      	mov	r2, sp
 800242a:	ab01      	add	r3, sp, #4
 800242c:	f7ff ffc8 	bl	80023c0 <__swhatbuf_r>
 8002430:	9900      	ldr	r1, [sp, #0]
 8002432:	4605      	mov	r5, r0
 8002434:	4630      	mov	r0, r6
 8002436:	f7ff fa5b 	bl	80018f0 <_malloc_r>
 800243a:	b948      	cbnz	r0, 8002450 <__smakebuf_r+0x44>
 800243c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002440:	059a      	lsls	r2, r3, #22
 8002442:	d4ef      	bmi.n	8002424 <__smakebuf_r+0x18>
 8002444:	f023 0303 	bic.w	r3, r3, #3
 8002448:	f043 0302 	orr.w	r3, r3, #2
 800244c:	81a3      	strh	r3, [r4, #12]
 800244e:	e7e3      	b.n	8002418 <__smakebuf_r+0xc>
 8002450:	4b0d      	ldr	r3, [pc, #52]	; (8002488 <__smakebuf_r+0x7c>)
 8002452:	62b3      	str	r3, [r6, #40]	; 0x28
 8002454:	89a3      	ldrh	r3, [r4, #12]
 8002456:	6020      	str	r0, [r4, #0]
 8002458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800245c:	81a3      	strh	r3, [r4, #12]
 800245e:	9b00      	ldr	r3, [sp, #0]
 8002460:	6120      	str	r0, [r4, #16]
 8002462:	6163      	str	r3, [r4, #20]
 8002464:	9b01      	ldr	r3, [sp, #4]
 8002466:	b15b      	cbz	r3, 8002480 <__smakebuf_r+0x74>
 8002468:	4630      	mov	r0, r6
 800246a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800246e:	f000 f893 	bl	8002598 <_isatty_r>
 8002472:	b128      	cbz	r0, 8002480 <__smakebuf_r+0x74>
 8002474:	89a3      	ldrh	r3, [r4, #12]
 8002476:	f023 0303 	bic.w	r3, r3, #3
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	81a3      	strh	r3, [r4, #12]
 8002480:	89a0      	ldrh	r0, [r4, #12]
 8002482:	4305      	orrs	r5, r0
 8002484:	81a5      	strh	r5, [r4, #12]
 8002486:	e7cd      	b.n	8002424 <__smakebuf_r+0x18>
 8002488:	08001709 	.word	0x08001709

0800248c <memchr>:
 800248c:	4603      	mov	r3, r0
 800248e:	b510      	push	{r4, lr}
 8002490:	b2c9      	uxtb	r1, r1
 8002492:	4402      	add	r2, r0
 8002494:	4293      	cmp	r3, r2
 8002496:	4618      	mov	r0, r3
 8002498:	d101      	bne.n	800249e <memchr+0x12>
 800249a:	2000      	movs	r0, #0
 800249c:	e003      	b.n	80024a6 <memchr+0x1a>
 800249e:	7804      	ldrb	r4, [r0, #0]
 80024a0:	3301      	adds	r3, #1
 80024a2:	428c      	cmp	r4, r1
 80024a4:	d1f6      	bne.n	8002494 <memchr+0x8>
 80024a6:	bd10      	pop	{r4, pc}

080024a8 <__malloc_lock>:
 80024a8:	4801      	ldr	r0, [pc, #4]	; (80024b0 <__malloc_lock+0x8>)
 80024aa:	f7ff b9ff 	b.w	80018ac <__retarget_lock_acquire_recursive>
 80024ae:	bf00      	nop
 80024b0:	200000ac 	.word	0x200000ac

080024b4 <__malloc_unlock>:
 80024b4:	4801      	ldr	r0, [pc, #4]	; (80024bc <__malloc_unlock+0x8>)
 80024b6:	f7ff b9fa 	b.w	80018ae <__retarget_lock_release_recursive>
 80024ba:	bf00      	nop
 80024bc:	200000ac 	.word	0x200000ac

080024c0 <_free_r>:
 80024c0:	b538      	push	{r3, r4, r5, lr}
 80024c2:	4605      	mov	r5, r0
 80024c4:	2900      	cmp	r1, #0
 80024c6:	d040      	beq.n	800254a <_free_r+0x8a>
 80024c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80024cc:	1f0c      	subs	r4, r1, #4
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	bfb8      	it	lt
 80024d2:	18e4      	addlt	r4, r4, r3
 80024d4:	f7ff ffe8 	bl	80024a8 <__malloc_lock>
 80024d8:	4a1c      	ldr	r2, [pc, #112]	; (800254c <_free_r+0x8c>)
 80024da:	6813      	ldr	r3, [r2, #0]
 80024dc:	b933      	cbnz	r3, 80024ec <_free_r+0x2c>
 80024de:	6063      	str	r3, [r4, #4]
 80024e0:	6014      	str	r4, [r2, #0]
 80024e2:	4628      	mov	r0, r5
 80024e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80024e8:	f7ff bfe4 	b.w	80024b4 <__malloc_unlock>
 80024ec:	42a3      	cmp	r3, r4
 80024ee:	d908      	bls.n	8002502 <_free_r+0x42>
 80024f0:	6820      	ldr	r0, [r4, #0]
 80024f2:	1821      	adds	r1, r4, r0
 80024f4:	428b      	cmp	r3, r1
 80024f6:	bf01      	itttt	eq
 80024f8:	6819      	ldreq	r1, [r3, #0]
 80024fa:	685b      	ldreq	r3, [r3, #4]
 80024fc:	1809      	addeq	r1, r1, r0
 80024fe:	6021      	streq	r1, [r4, #0]
 8002500:	e7ed      	b.n	80024de <_free_r+0x1e>
 8002502:	461a      	mov	r2, r3
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	b10b      	cbz	r3, 800250c <_free_r+0x4c>
 8002508:	42a3      	cmp	r3, r4
 800250a:	d9fa      	bls.n	8002502 <_free_r+0x42>
 800250c:	6811      	ldr	r1, [r2, #0]
 800250e:	1850      	adds	r0, r2, r1
 8002510:	42a0      	cmp	r0, r4
 8002512:	d10b      	bne.n	800252c <_free_r+0x6c>
 8002514:	6820      	ldr	r0, [r4, #0]
 8002516:	4401      	add	r1, r0
 8002518:	1850      	adds	r0, r2, r1
 800251a:	4283      	cmp	r3, r0
 800251c:	6011      	str	r1, [r2, #0]
 800251e:	d1e0      	bne.n	80024e2 <_free_r+0x22>
 8002520:	6818      	ldr	r0, [r3, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	4401      	add	r1, r0
 8002526:	6011      	str	r1, [r2, #0]
 8002528:	6053      	str	r3, [r2, #4]
 800252a:	e7da      	b.n	80024e2 <_free_r+0x22>
 800252c:	d902      	bls.n	8002534 <_free_r+0x74>
 800252e:	230c      	movs	r3, #12
 8002530:	602b      	str	r3, [r5, #0]
 8002532:	e7d6      	b.n	80024e2 <_free_r+0x22>
 8002534:	6820      	ldr	r0, [r4, #0]
 8002536:	1821      	adds	r1, r4, r0
 8002538:	428b      	cmp	r3, r1
 800253a:	bf01      	itttt	eq
 800253c:	6819      	ldreq	r1, [r3, #0]
 800253e:	685b      	ldreq	r3, [r3, #4]
 8002540:	1809      	addeq	r1, r1, r0
 8002542:	6021      	streq	r1, [r4, #0]
 8002544:	6063      	str	r3, [r4, #4]
 8002546:	6054      	str	r4, [r2, #4]
 8002548:	e7cb      	b.n	80024e2 <_free_r+0x22>
 800254a:	bd38      	pop	{r3, r4, r5, pc}
 800254c:	200000b0 	.word	0x200000b0

08002550 <_read_r>:
 8002550:	b538      	push	{r3, r4, r5, lr}
 8002552:	4604      	mov	r4, r0
 8002554:	4608      	mov	r0, r1
 8002556:	4611      	mov	r1, r2
 8002558:	2200      	movs	r2, #0
 800255a:	4d05      	ldr	r5, [pc, #20]	; (8002570 <_read_r+0x20>)
 800255c:	602a      	str	r2, [r5, #0]
 800255e:	461a      	mov	r2, r3
 8002560:	f7fe f8bd 	bl	80006de <_read>
 8002564:	1c43      	adds	r3, r0, #1
 8002566:	d102      	bne.n	800256e <_read_r+0x1e>
 8002568:	682b      	ldr	r3, [r5, #0]
 800256a:	b103      	cbz	r3, 800256e <_read_r+0x1e>
 800256c:	6023      	str	r3, [r4, #0]
 800256e:	bd38      	pop	{r3, r4, r5, pc}
 8002570:	200000b8 	.word	0x200000b8

08002574 <_fstat_r>:
 8002574:	b538      	push	{r3, r4, r5, lr}
 8002576:	2300      	movs	r3, #0
 8002578:	4d06      	ldr	r5, [pc, #24]	; (8002594 <_fstat_r+0x20>)
 800257a:	4604      	mov	r4, r0
 800257c:	4608      	mov	r0, r1
 800257e:	4611      	mov	r1, r2
 8002580:	602b      	str	r3, [r5, #0]
 8002582:	f7fe f8f0 	bl	8000766 <_fstat>
 8002586:	1c43      	adds	r3, r0, #1
 8002588:	d102      	bne.n	8002590 <_fstat_r+0x1c>
 800258a:	682b      	ldr	r3, [r5, #0]
 800258c:	b103      	cbz	r3, 8002590 <_fstat_r+0x1c>
 800258e:	6023      	str	r3, [r4, #0]
 8002590:	bd38      	pop	{r3, r4, r5, pc}
 8002592:	bf00      	nop
 8002594:	200000b8 	.word	0x200000b8

08002598 <_isatty_r>:
 8002598:	b538      	push	{r3, r4, r5, lr}
 800259a:	2300      	movs	r3, #0
 800259c:	4d05      	ldr	r5, [pc, #20]	; (80025b4 <_isatty_r+0x1c>)
 800259e:	4604      	mov	r4, r0
 80025a0:	4608      	mov	r0, r1
 80025a2:	602b      	str	r3, [r5, #0]
 80025a4:	f7fe f8ee 	bl	8000784 <_isatty>
 80025a8:	1c43      	adds	r3, r0, #1
 80025aa:	d102      	bne.n	80025b2 <_isatty_r+0x1a>
 80025ac:	682b      	ldr	r3, [r5, #0]
 80025ae:	b103      	cbz	r3, 80025b2 <_isatty_r+0x1a>
 80025b0:	6023      	str	r3, [r4, #0]
 80025b2:	bd38      	pop	{r3, r4, r5, pc}
 80025b4:	200000b8 	.word	0x200000b8

080025b8 <_init>:
 80025b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ba:	bf00      	nop
 80025bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025be:	bc08      	pop	{r3}
 80025c0:	469e      	mov	lr, r3
 80025c2:	4770      	bx	lr

080025c4 <_fini>:
 80025c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025c6:	bf00      	nop
 80025c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ca:	bc08      	pop	{r3}
 80025cc:	469e      	mov	lr, r3
 80025ce:	4770      	bx	lr
