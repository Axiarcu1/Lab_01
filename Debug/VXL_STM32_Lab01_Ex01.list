
VXL_STM32_Lab01_Ex01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015a4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080016b0  080016b0  000116b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016d4  080016d4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080016d4  080016d4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080016d4  080016d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016d4  080016d4  000116d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080016d8  080016d8  000116d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080016dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  080016e8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080016e8  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002b51  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e02  00000000  00000000  00022b86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003e8  00000000  00000000  00023988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000360  00000000  00000000  00023d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000155e1  00000000  00000000  000240d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004677  00000000  00000000  000396b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000799df  00000000  00000000  0003dd28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b7707  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d9c  00000000  00000000  000b7758  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001698 	.word	0x08001698

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001698 	.word	0x08001698

0800014c <traffic_light>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void traffic_light (int state){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (state == 1){
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b01      	cmp	r3, #1
 8000158:	d11e      	bne.n	8000198 <traffic_light+0x4c>
		//RED1 5s and GREEN 3s
		HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, SET);
 800015a:	2201      	movs	r2, #1
 800015c:	2104      	movs	r1, #4
 800015e:	4841      	ldr	r0, [pc, #260]	; (8000264 <traffic_light+0x118>)
 8000160:	f000 fe78 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, RESET);
 8000164:	2200      	movs	r2, #0
 8000166:	2108      	movs	r1, #8
 8000168:	483e      	ldr	r0, [pc, #248]	; (8000264 <traffic_light+0x118>)
 800016a:	f000 fe73 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, RESET);
 800016e:	2200      	movs	r2, #0
 8000170:	2110      	movs	r1, #16
 8000172:	483c      	ldr	r0, [pc, #240]	; (8000264 <traffic_light+0x118>)
 8000174:	f000 fe6e 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, RESET);
 8000178:	2200      	movs	r2, #0
 800017a:	2120      	movs	r1, #32
 800017c:	4839      	ldr	r0, [pc, #228]	; (8000264 <traffic_light+0x118>)
 800017e:	f000 fe69 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, RESET);
 8000182:	2200      	movs	r2, #0
 8000184:	2140      	movs	r1, #64	; 0x40
 8000186:	4837      	ldr	r0, [pc, #220]	; (8000264 <traffic_light+0x118>)
 8000188:	f000 fe64 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, SET);
 800018c:	2201      	movs	r2, #1
 800018e:	2180      	movs	r1, #128	; 0x80
 8000190:	4834      	ldr	r0, [pc, #208]	; (8000264 <traffic_light+0x118>)
 8000192:	f000 fe5f 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, RESET);
		HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, SET);
		HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, RESET);
		HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, RESET);
	}
}
 8000196:	e061      	b.n	800025c <traffic_light+0x110>
	else if (state == 2){
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	2b02      	cmp	r3, #2
 800019c:	d11e      	bne.n	80001dc <traffic_light+0x90>
		HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, SET);
 800019e:	2201      	movs	r2, #1
 80001a0:	2104      	movs	r1, #4
 80001a2:	4830      	ldr	r0, [pc, #192]	; (8000264 <traffic_light+0x118>)
 80001a4:	f000 fe56 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, RESET);
 80001a8:	2200      	movs	r2, #0
 80001aa:	2108      	movs	r1, #8
 80001ac:	482d      	ldr	r0, [pc, #180]	; (8000264 <traffic_light+0x118>)
 80001ae:	f000 fe51 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, RESET);
 80001b2:	2200      	movs	r2, #0
 80001b4:	2110      	movs	r1, #16
 80001b6:	482b      	ldr	r0, [pc, #172]	; (8000264 <traffic_light+0x118>)
 80001b8:	f000 fe4c 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, RESET);
 80001bc:	2200      	movs	r2, #0
 80001be:	2120      	movs	r1, #32
 80001c0:	4828      	ldr	r0, [pc, #160]	; (8000264 <traffic_light+0x118>)
 80001c2:	f000 fe47 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, SET);
 80001c6:	2201      	movs	r2, #1
 80001c8:	2140      	movs	r1, #64	; 0x40
 80001ca:	4826      	ldr	r0, [pc, #152]	; (8000264 <traffic_light+0x118>)
 80001cc:	f000 fe42 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, RESET);
 80001d0:	2200      	movs	r2, #0
 80001d2:	2180      	movs	r1, #128	; 0x80
 80001d4:	4823      	ldr	r0, [pc, #140]	; (8000264 <traffic_light+0x118>)
 80001d6:	f000 fe3d 	bl	8000e54 <HAL_GPIO_WritePin>
}
 80001da:	e03f      	b.n	800025c <traffic_light+0x110>
	else if (state == 3){
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	2b03      	cmp	r3, #3
 80001e0:	d11e      	bne.n	8000220 <traffic_light+0xd4>
		HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, RESET);
 80001e2:	2200      	movs	r2, #0
 80001e4:	2104      	movs	r1, #4
 80001e6:	481f      	ldr	r0, [pc, #124]	; (8000264 <traffic_light+0x118>)
 80001e8:	f000 fe34 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, RESET);
 80001ec:	2200      	movs	r2, #0
 80001ee:	2108      	movs	r1, #8
 80001f0:	481c      	ldr	r0, [pc, #112]	; (8000264 <traffic_light+0x118>)
 80001f2:	f000 fe2f 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, SET);
 80001f6:	2201      	movs	r2, #1
 80001f8:	2110      	movs	r1, #16
 80001fa:	481a      	ldr	r0, [pc, #104]	; (8000264 <traffic_light+0x118>)
 80001fc:	f000 fe2a 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, SET);
 8000200:	2201      	movs	r2, #1
 8000202:	2120      	movs	r1, #32
 8000204:	4817      	ldr	r0, [pc, #92]	; (8000264 <traffic_light+0x118>)
 8000206:	f000 fe25 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, RESET);
 800020a:	2200      	movs	r2, #0
 800020c:	2140      	movs	r1, #64	; 0x40
 800020e:	4815      	ldr	r0, [pc, #84]	; (8000264 <traffic_light+0x118>)
 8000210:	f000 fe20 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, RESET);
 8000214:	2200      	movs	r2, #0
 8000216:	2180      	movs	r1, #128	; 0x80
 8000218:	4812      	ldr	r0, [pc, #72]	; (8000264 <traffic_light+0x118>)
 800021a:	f000 fe1b 	bl	8000e54 <HAL_GPIO_WritePin>
}
 800021e:	e01d      	b.n	800025c <traffic_light+0x110>
		HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, RESET);
 8000220:	2200      	movs	r2, #0
 8000222:	2104      	movs	r1, #4
 8000224:	480f      	ldr	r0, [pc, #60]	; (8000264 <traffic_light+0x118>)
 8000226:	f000 fe15 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, SET);
 800022a:	2201      	movs	r2, #1
 800022c:	2108      	movs	r1, #8
 800022e:	480d      	ldr	r0, [pc, #52]	; (8000264 <traffic_light+0x118>)
 8000230:	f000 fe10 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, RESET);
 8000234:	2200      	movs	r2, #0
 8000236:	2110      	movs	r1, #16
 8000238:	480a      	ldr	r0, [pc, #40]	; (8000264 <traffic_light+0x118>)
 800023a:	f000 fe0b 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, SET);
 800023e:	2201      	movs	r2, #1
 8000240:	2120      	movs	r1, #32
 8000242:	4808      	ldr	r0, [pc, #32]	; (8000264 <traffic_light+0x118>)
 8000244:	f000 fe06 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, RESET);
 8000248:	2200      	movs	r2, #0
 800024a:	2140      	movs	r1, #64	; 0x40
 800024c:	4805      	ldr	r0, [pc, #20]	; (8000264 <traffic_light+0x118>)
 800024e:	f000 fe01 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, RESET);
 8000252:	2200      	movs	r2, #0
 8000254:	2180      	movs	r1, #128	; 0x80
 8000256:	4803      	ldr	r0, [pc, #12]	; (8000264 <traffic_light+0x118>)
 8000258:	f000 fdfc 	bl	8000e54 <HAL_GPIO_WritePin>
}
 800025c:	bf00      	nop
 800025e:	3708      	adds	r7, #8
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	40010800 	.word	0x40010800

08000268 <display7SEG_1>:

void display7SEG_1 (int counter){
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
	if (counter == 0) {
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d123      	bne.n	80002be <display7SEG_1+0x56>
		HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, RESET);
 8000276:	2200      	movs	r2, #0
 8000278:	2101      	movs	r1, #1
 800027a:	4860      	ldr	r0, [pc, #384]	; (80003fc <display7SEG_1+0x194>)
 800027c:	f000 fdea 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, RESET);
 8000280:	2200      	movs	r2, #0
 8000282:	2102      	movs	r1, #2
 8000284:	485d      	ldr	r0, [pc, #372]	; (80003fc <display7SEG_1+0x194>)
 8000286:	f000 fde5 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C1_GPIO_Port, C1_Pin, RESET);
 800028a:	2200      	movs	r2, #0
 800028c:	2104      	movs	r1, #4
 800028e:	485b      	ldr	r0, [pc, #364]	; (80003fc <display7SEG_1+0x194>)
 8000290:	f000 fde0 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, RESET);
 8000294:	2200      	movs	r2, #0
 8000296:	2108      	movs	r1, #8
 8000298:	4858      	ldr	r0, [pc, #352]	; (80003fc <display7SEG_1+0x194>)
 800029a:	f000 fddb 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E1_GPIO_Port, E1_Pin, RESET);
 800029e:	2200      	movs	r2, #0
 80002a0:	2110      	movs	r1, #16
 80002a2:	4856      	ldr	r0, [pc, #344]	; (80003fc <display7SEG_1+0x194>)
 80002a4:	f000 fdd6 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F1_GPIO_Port, F1_Pin, RESET);
 80002a8:	2200      	movs	r2, #0
 80002aa:	2120      	movs	r1, #32
 80002ac:	4853      	ldr	r0, [pc, #332]	; (80003fc <display7SEG_1+0x194>)
 80002ae:	f000 fdd1 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 80002b2:	2201      	movs	r2, #1
 80002b4:	2140      	movs	r1, #64	; 0x40
 80002b6:	4851      	ldr	r0, [pc, #324]	; (80003fc <display7SEG_1+0x194>)
 80002b8:	f000 fdcc 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, SET);
		HAL_GPIO_WritePin(E1_GPIO_Port, E1_Pin, SET);
		HAL_GPIO_WritePin(F1_GPIO_Port, F1_Pin, RESET);
		HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
	}
}
 80002bc:	e09a      	b.n	80003f4 <display7SEG_1+0x18c>
	else if (counter == 1) {
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	2b01      	cmp	r3, #1
 80002c2:	d123      	bne.n	800030c <display7SEG_1+0xa4>
		HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, SET);
 80002c4:	2201      	movs	r2, #1
 80002c6:	2101      	movs	r1, #1
 80002c8:	484c      	ldr	r0, [pc, #304]	; (80003fc <display7SEG_1+0x194>)
 80002ca:	f000 fdc3 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, RESET);
 80002ce:	2200      	movs	r2, #0
 80002d0:	2102      	movs	r1, #2
 80002d2:	484a      	ldr	r0, [pc, #296]	; (80003fc <display7SEG_1+0x194>)
 80002d4:	f000 fdbe 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C1_GPIO_Port, C1_Pin, RESET);
 80002d8:	2200      	movs	r2, #0
 80002da:	2104      	movs	r1, #4
 80002dc:	4847      	ldr	r0, [pc, #284]	; (80003fc <display7SEG_1+0x194>)
 80002de:	f000 fdb9 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, SET);
 80002e2:	2201      	movs	r2, #1
 80002e4:	2108      	movs	r1, #8
 80002e6:	4845      	ldr	r0, [pc, #276]	; (80003fc <display7SEG_1+0x194>)
 80002e8:	f000 fdb4 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E1_GPIO_Port, E1_Pin, SET);
 80002ec:	2201      	movs	r2, #1
 80002ee:	2110      	movs	r1, #16
 80002f0:	4842      	ldr	r0, [pc, #264]	; (80003fc <display7SEG_1+0x194>)
 80002f2:	f000 fdaf 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F1_GPIO_Port, F1_Pin, SET);
 80002f6:	2201      	movs	r2, #1
 80002f8:	2120      	movs	r1, #32
 80002fa:	4840      	ldr	r0, [pc, #256]	; (80003fc <display7SEG_1+0x194>)
 80002fc:	f000 fdaa 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 8000300:	2201      	movs	r2, #1
 8000302:	2140      	movs	r1, #64	; 0x40
 8000304:	483d      	ldr	r0, [pc, #244]	; (80003fc <display7SEG_1+0x194>)
 8000306:	f000 fda5 	bl	8000e54 <HAL_GPIO_WritePin>
}
 800030a:	e073      	b.n	80003f4 <display7SEG_1+0x18c>
	else if (counter == 2) {
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	2b02      	cmp	r3, #2
 8000310:	d123      	bne.n	800035a <display7SEG_1+0xf2>
		HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, RESET);
 8000312:	2200      	movs	r2, #0
 8000314:	2101      	movs	r1, #1
 8000316:	4839      	ldr	r0, [pc, #228]	; (80003fc <display7SEG_1+0x194>)
 8000318:	f000 fd9c 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	2102      	movs	r1, #2
 8000320:	4836      	ldr	r0, [pc, #216]	; (80003fc <display7SEG_1+0x194>)
 8000322:	f000 fd97 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C1_GPIO_Port, C1_Pin, SET);
 8000326:	2201      	movs	r2, #1
 8000328:	2104      	movs	r1, #4
 800032a:	4834      	ldr	r0, [pc, #208]	; (80003fc <display7SEG_1+0x194>)
 800032c:	f000 fd92 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, RESET);
 8000330:	2200      	movs	r2, #0
 8000332:	2108      	movs	r1, #8
 8000334:	4831      	ldr	r0, [pc, #196]	; (80003fc <display7SEG_1+0x194>)
 8000336:	f000 fd8d 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E1_GPIO_Port, E1_Pin, RESET);
 800033a:	2200      	movs	r2, #0
 800033c:	2110      	movs	r1, #16
 800033e:	482f      	ldr	r0, [pc, #188]	; (80003fc <display7SEG_1+0x194>)
 8000340:	f000 fd88 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F1_GPIO_Port, F1_Pin, SET);
 8000344:	2201      	movs	r2, #1
 8000346:	2120      	movs	r1, #32
 8000348:	482c      	ldr	r0, [pc, #176]	; (80003fc <display7SEG_1+0x194>)
 800034a:	f000 fd83 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 800034e:	2200      	movs	r2, #0
 8000350:	2140      	movs	r1, #64	; 0x40
 8000352:	482a      	ldr	r0, [pc, #168]	; (80003fc <display7SEG_1+0x194>)
 8000354:	f000 fd7e 	bl	8000e54 <HAL_GPIO_WritePin>
}
 8000358:	e04c      	b.n	80003f4 <display7SEG_1+0x18c>
	else if (counter == 3) {
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	2b03      	cmp	r3, #3
 800035e:	d123      	bne.n	80003a8 <display7SEG_1+0x140>
		HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, RESET);
 8000360:	2200      	movs	r2, #0
 8000362:	2101      	movs	r1, #1
 8000364:	4825      	ldr	r0, [pc, #148]	; (80003fc <display7SEG_1+0x194>)
 8000366:	f000 fd75 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, RESET);
 800036a:	2200      	movs	r2, #0
 800036c:	2102      	movs	r1, #2
 800036e:	4823      	ldr	r0, [pc, #140]	; (80003fc <display7SEG_1+0x194>)
 8000370:	f000 fd70 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C1_GPIO_Port, C1_Pin, RESET);
 8000374:	2200      	movs	r2, #0
 8000376:	2104      	movs	r1, #4
 8000378:	4820      	ldr	r0, [pc, #128]	; (80003fc <display7SEG_1+0x194>)
 800037a:	f000 fd6b 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, RESET);
 800037e:	2200      	movs	r2, #0
 8000380:	2108      	movs	r1, #8
 8000382:	481e      	ldr	r0, [pc, #120]	; (80003fc <display7SEG_1+0x194>)
 8000384:	f000 fd66 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E1_GPIO_Port, E1_Pin, SET);
 8000388:	2201      	movs	r2, #1
 800038a:	2110      	movs	r1, #16
 800038c:	481b      	ldr	r0, [pc, #108]	; (80003fc <display7SEG_1+0x194>)
 800038e:	f000 fd61 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F1_GPIO_Port, F1_Pin, SET);
 8000392:	2201      	movs	r2, #1
 8000394:	2120      	movs	r1, #32
 8000396:	4819      	ldr	r0, [pc, #100]	; (80003fc <display7SEG_1+0x194>)
 8000398:	f000 fd5c 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 800039c:	2200      	movs	r2, #0
 800039e:	2140      	movs	r1, #64	; 0x40
 80003a0:	4816      	ldr	r0, [pc, #88]	; (80003fc <display7SEG_1+0x194>)
 80003a2:	f000 fd57 	bl	8000e54 <HAL_GPIO_WritePin>
}
 80003a6:	e025      	b.n	80003f4 <display7SEG_1+0x18c>
	else if (counter == 4) {
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	2b04      	cmp	r3, #4
 80003ac:	d122      	bne.n	80003f4 <display7SEG_1+0x18c>
		HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, SET);
 80003ae:	2201      	movs	r2, #1
 80003b0:	2101      	movs	r1, #1
 80003b2:	4812      	ldr	r0, [pc, #72]	; (80003fc <display7SEG_1+0x194>)
 80003b4:	f000 fd4e 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, RESET);
 80003b8:	2200      	movs	r2, #0
 80003ba:	2102      	movs	r1, #2
 80003bc:	480f      	ldr	r0, [pc, #60]	; (80003fc <display7SEG_1+0x194>)
 80003be:	f000 fd49 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C1_GPIO_Port, C1_Pin, RESET);
 80003c2:	2200      	movs	r2, #0
 80003c4:	2104      	movs	r1, #4
 80003c6:	480d      	ldr	r0, [pc, #52]	; (80003fc <display7SEG_1+0x194>)
 80003c8:	f000 fd44 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, SET);
 80003cc:	2201      	movs	r2, #1
 80003ce:	2108      	movs	r1, #8
 80003d0:	480a      	ldr	r0, [pc, #40]	; (80003fc <display7SEG_1+0x194>)
 80003d2:	f000 fd3f 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E1_GPIO_Port, E1_Pin, SET);
 80003d6:	2201      	movs	r2, #1
 80003d8:	2110      	movs	r1, #16
 80003da:	4808      	ldr	r0, [pc, #32]	; (80003fc <display7SEG_1+0x194>)
 80003dc:	f000 fd3a 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F1_GPIO_Port, F1_Pin, RESET);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2120      	movs	r1, #32
 80003e4:	4805      	ldr	r0, [pc, #20]	; (80003fc <display7SEG_1+0x194>)
 80003e6:	f000 fd35 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 80003ea:	2200      	movs	r2, #0
 80003ec:	2140      	movs	r1, #64	; 0x40
 80003ee:	4803      	ldr	r0, [pc, #12]	; (80003fc <display7SEG_1+0x194>)
 80003f0:	f000 fd30 	bl	8000e54 <HAL_GPIO_WritePin>
}
 80003f4:	bf00      	nop
 80003f6:	3708      	adds	r7, #8
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	40010c00 	.word	0x40010c00

08000400 <display7SEG_2>:

void display7SEG_2 (int counter){
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
	if (counter == 0) {
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	2b00      	cmp	r3, #0
 800040c:	d129      	bne.n	8000462 <display7SEG_2+0x62>
		HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, RESET);
 800040e:	2200      	movs	r2, #0
 8000410:	2180      	movs	r1, #128	; 0x80
 8000412:	486f      	ldr	r0, [pc, #444]	; (80005d0 <display7SEG_2+0x1d0>)
 8000414:	f000 fd1e 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port, B2_Pin, RESET);
 8000418:	2200      	movs	r2, #0
 800041a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800041e:	486c      	ldr	r0, [pc, #432]	; (80005d0 <display7SEG_2+0x1d0>)
 8000420:	f000 fd18 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C2_GPIO_Port, C2_Pin, RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	f44f 7100 	mov.w	r1, #512	; 0x200
 800042a:	4869      	ldr	r0, [pc, #420]	; (80005d0 <display7SEG_2+0x1d0>)
 800042c:	f000 fd12 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000430:	2200      	movs	r2, #0
 8000432:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000436:	4866      	ldr	r0, [pc, #408]	; (80005d0 <display7SEG_2+0x1d0>)
 8000438:	f000 fd0c 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E2_GPIO_Port, E2_Pin, RESET);
 800043c:	2200      	movs	r2, #0
 800043e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000442:	4863      	ldr	r0, [pc, #396]	; (80005d0 <display7SEG_2+0x1d0>)
 8000444:	f000 fd06 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F2_GPIO_Port, F2_Pin, RESET);
 8000448:	2200      	movs	r2, #0
 800044a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800044e:	4860      	ldr	r0, [pc, #384]	; (80005d0 <display7SEG_2+0x1d0>)
 8000450:	f000 fd00 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, SET);
 8000454:	2201      	movs	r2, #1
 8000456:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800045a:	485d      	ldr	r0, [pc, #372]	; (80005d0 <display7SEG_2+0x1d0>)
 800045c:	f000 fcfa 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
		HAL_GPIO_WritePin(E2_GPIO_Port, E2_Pin, SET);
		HAL_GPIO_WritePin(F2_GPIO_Port, F2_Pin, RESET);
		HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, RESET);
	}
}
 8000460:	e0b2      	b.n	80005c8 <display7SEG_2+0x1c8>
	else if (counter == 1) {
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d129      	bne.n	80004bc <display7SEG_2+0xbc>
		HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, SET);
 8000468:	2201      	movs	r2, #1
 800046a:	2180      	movs	r1, #128	; 0x80
 800046c:	4858      	ldr	r0, [pc, #352]	; (80005d0 <display7SEG_2+0x1d0>)
 800046e:	f000 fcf1 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port, B2_Pin, RESET);
 8000472:	2200      	movs	r2, #0
 8000474:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000478:	4855      	ldr	r0, [pc, #340]	; (80005d0 <display7SEG_2+0x1d0>)
 800047a:	f000 fceb 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C2_GPIO_Port, C2_Pin, RESET);
 800047e:	2200      	movs	r2, #0
 8000480:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000484:	4852      	ldr	r0, [pc, #328]	; (80005d0 <display7SEG_2+0x1d0>)
 8000486:	f000 fce5 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 800048a:	2201      	movs	r2, #1
 800048c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000490:	484f      	ldr	r0, [pc, #316]	; (80005d0 <display7SEG_2+0x1d0>)
 8000492:	f000 fcdf 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E2_GPIO_Port, E2_Pin, SET);
 8000496:	2201      	movs	r2, #1
 8000498:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800049c:	484c      	ldr	r0, [pc, #304]	; (80005d0 <display7SEG_2+0x1d0>)
 800049e:	f000 fcd9 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F2_GPIO_Port, F2_Pin, SET);
 80004a2:	2201      	movs	r2, #1
 80004a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004a8:	4849      	ldr	r0, [pc, #292]	; (80005d0 <display7SEG_2+0x1d0>)
 80004aa:	f000 fcd3 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, SET);
 80004ae:	2201      	movs	r2, #1
 80004b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004b4:	4846      	ldr	r0, [pc, #280]	; (80005d0 <display7SEG_2+0x1d0>)
 80004b6:	f000 fccd 	bl	8000e54 <HAL_GPIO_WritePin>
}
 80004ba:	e085      	b.n	80005c8 <display7SEG_2+0x1c8>
	else if (counter == 2) {
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	2b02      	cmp	r3, #2
 80004c0:	d129      	bne.n	8000516 <display7SEG_2+0x116>
		HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, RESET);
 80004c2:	2200      	movs	r2, #0
 80004c4:	2180      	movs	r1, #128	; 0x80
 80004c6:	4842      	ldr	r0, [pc, #264]	; (80005d0 <display7SEG_2+0x1d0>)
 80004c8:	f000 fcc4 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port, B2_Pin, RESET);
 80004cc:	2200      	movs	r2, #0
 80004ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004d2:	483f      	ldr	r0, [pc, #252]	; (80005d0 <display7SEG_2+0x1d0>)
 80004d4:	f000 fcbe 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C2_GPIO_Port, C2_Pin, SET);
 80004d8:	2201      	movs	r2, #1
 80004da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004de:	483c      	ldr	r0, [pc, #240]	; (80005d0 <display7SEG_2+0x1d0>)
 80004e0:	f000 fcb8 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 80004e4:	2200      	movs	r2, #0
 80004e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004ea:	4839      	ldr	r0, [pc, #228]	; (80005d0 <display7SEG_2+0x1d0>)
 80004ec:	f000 fcb2 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E2_GPIO_Port, E2_Pin, RESET);
 80004f0:	2200      	movs	r2, #0
 80004f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004f6:	4836      	ldr	r0, [pc, #216]	; (80005d0 <display7SEG_2+0x1d0>)
 80004f8:	f000 fcac 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F2_GPIO_Port, F2_Pin, SET);
 80004fc:	2201      	movs	r2, #1
 80004fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000502:	4833      	ldr	r0, [pc, #204]	; (80005d0 <display7SEG_2+0x1d0>)
 8000504:	f000 fca6 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, RESET);
 8000508:	2200      	movs	r2, #0
 800050a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800050e:	4830      	ldr	r0, [pc, #192]	; (80005d0 <display7SEG_2+0x1d0>)
 8000510:	f000 fca0 	bl	8000e54 <HAL_GPIO_WritePin>
}
 8000514:	e058      	b.n	80005c8 <display7SEG_2+0x1c8>
	else if (counter == 3) {
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	2b03      	cmp	r3, #3
 800051a:	d129      	bne.n	8000570 <display7SEG_2+0x170>
		HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, RESET);
 800051c:	2200      	movs	r2, #0
 800051e:	2180      	movs	r1, #128	; 0x80
 8000520:	482b      	ldr	r0, [pc, #172]	; (80005d0 <display7SEG_2+0x1d0>)
 8000522:	f000 fc97 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port, B2_Pin, RESET);
 8000526:	2200      	movs	r2, #0
 8000528:	f44f 7180 	mov.w	r1, #256	; 0x100
 800052c:	4828      	ldr	r0, [pc, #160]	; (80005d0 <display7SEG_2+0x1d0>)
 800052e:	f000 fc91 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C2_GPIO_Port, C2_Pin, RESET);
 8000532:	2200      	movs	r2, #0
 8000534:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000538:	4825      	ldr	r0, [pc, #148]	; (80005d0 <display7SEG_2+0x1d0>)
 800053a:	f000 fc8b 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 800053e:	2200      	movs	r2, #0
 8000540:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000544:	4822      	ldr	r0, [pc, #136]	; (80005d0 <display7SEG_2+0x1d0>)
 8000546:	f000 fc85 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E2_GPIO_Port, E2_Pin, SET);
 800054a:	2201      	movs	r2, #1
 800054c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000550:	481f      	ldr	r0, [pc, #124]	; (80005d0 <display7SEG_2+0x1d0>)
 8000552:	f000 fc7f 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F2_GPIO_Port, F2_Pin, SET);
 8000556:	2201      	movs	r2, #1
 8000558:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800055c:	481c      	ldr	r0, [pc, #112]	; (80005d0 <display7SEG_2+0x1d0>)
 800055e:	f000 fc79 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, RESET);
 8000562:	2200      	movs	r2, #0
 8000564:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000568:	4819      	ldr	r0, [pc, #100]	; (80005d0 <display7SEG_2+0x1d0>)
 800056a:	f000 fc73 	bl	8000e54 <HAL_GPIO_WritePin>
}
 800056e:	e02b      	b.n	80005c8 <display7SEG_2+0x1c8>
	else if (counter == 4) {
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	2b04      	cmp	r3, #4
 8000574:	d128      	bne.n	80005c8 <display7SEG_2+0x1c8>
		HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, SET);
 8000576:	2201      	movs	r2, #1
 8000578:	2180      	movs	r1, #128	; 0x80
 800057a:	4815      	ldr	r0, [pc, #84]	; (80005d0 <display7SEG_2+0x1d0>)
 800057c:	f000 fc6a 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port, B2_Pin, RESET);
 8000580:	2200      	movs	r2, #0
 8000582:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000586:	4812      	ldr	r0, [pc, #72]	; (80005d0 <display7SEG_2+0x1d0>)
 8000588:	f000 fc64 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C2_GPIO_Port, C2_Pin, RESET);
 800058c:	2200      	movs	r2, #0
 800058e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000592:	480f      	ldr	r0, [pc, #60]	; (80005d0 <display7SEG_2+0x1d0>)
 8000594:	f000 fc5e 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000598:	2201      	movs	r2, #1
 800059a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800059e:	480c      	ldr	r0, [pc, #48]	; (80005d0 <display7SEG_2+0x1d0>)
 80005a0:	f000 fc58 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E2_GPIO_Port, E2_Pin, SET);
 80005a4:	2201      	movs	r2, #1
 80005a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005aa:	4809      	ldr	r0, [pc, #36]	; (80005d0 <display7SEG_2+0x1d0>)
 80005ac:	f000 fc52 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F2_GPIO_Port, F2_Pin, RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005b6:	4806      	ldr	r0, [pc, #24]	; (80005d0 <display7SEG_2+0x1d0>)
 80005b8:	f000 fc4c 	bl	8000e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c2:	4803      	ldr	r0, [pc, #12]	; (80005d0 <display7SEG_2+0x1d0>)
 80005c4:	f000 fc46 	bl	8000e54 <HAL_GPIO_WritePin>
}
 80005c8:	bf00      	nop
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40010c00 	.word	0x40010c00

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005da:	f000 f955 	bl	8000888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005de:	f000 f848 	bl	8000672 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f000 f881 	bl	80006e8 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int total_counter = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
  int led7_1_counter = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	60bb      	str	r3, [r7, #8]
  int led7_2_counter = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	607b      	str	r3, [r7, #4]
  while (1)
  {
	  //traffic_light();
	  if(total_counter >= 10) total_counter = 0;
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	2b09      	cmp	r3, #9
 80005f6:	dd01      	ble.n	80005fc <main+0x28>
 80005f8:	2300      	movs	r3, #0
 80005fa:	60fb      	str	r3, [r7, #12]
	  if (total_counter == 0){
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d107      	bne.n	8000612 <main+0x3e>
		  traffic_light(1);
 8000602:	2001      	movs	r0, #1
 8000604:	f7ff fda2 	bl	800014c <traffic_light>
		  led7_1_counter = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	60bb      	str	r3, [r7, #8]
		  led7_2_counter = 0;
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	e01b      	b.n	800064a <main+0x76>
	  }
	  else if (total_counter == 3){
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	2b03      	cmp	r3, #3
 8000616:	d105      	bne.n	8000624 <main+0x50>
		  traffic_light(2);
 8000618:	2002      	movs	r0, #2
 800061a:	f7ff fd97 	bl	800014c <traffic_light>
		  led7_2_counter = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	e012      	b.n	800064a <main+0x76>
	  }
	  else if (total_counter == 5){
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	2b05      	cmp	r3, #5
 8000628:	d107      	bne.n	800063a <main+0x66>
		  traffic_light(3);
 800062a:	2003      	movs	r0, #3
 800062c:	f7ff fd8e 	bl	800014c <traffic_light>
		  led7_1_counter = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	60bb      	str	r3, [r7, #8]
		  led7_2_counter = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	e007      	b.n	800064a <main+0x76>
	  }
	  else if (total_counter == 8){
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	2b08      	cmp	r3, #8
 800063e:	d104      	bne.n	800064a <main+0x76>
		  traffic_light(4);
 8000640:	2004      	movs	r0, #4
 8000642:	f7ff fd83 	bl	800014c <traffic_light>
		  led7_1_counter = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	60bb      	str	r3, [r7, #8]
	  }
	  display7SEG_1(led7_1_counter++);
 800064a:	68bb      	ldr	r3, [r7, #8]
 800064c:	1c5a      	adds	r2, r3, #1
 800064e:	60ba      	str	r2, [r7, #8]
 8000650:	4618      	mov	r0, r3
 8000652:	f7ff fe09 	bl	8000268 <display7SEG_1>
	  display7SEG_2(led7_2_counter++);
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	1c5a      	adds	r2, r3, #1
 800065a:	607a      	str	r2, [r7, #4]
 800065c:	4618      	mov	r0, r3
 800065e:	f7ff fecf 	bl	8000400 <display7SEG_2>
	  total_counter++;
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	3301      	adds	r3, #1
 8000666:	60fb      	str	r3, [r7, #12]
	  HAL_Delay(1000) ;
 8000668:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800066c:	f000 f96e 	bl	800094c <HAL_Delay>
	  if(total_counter >= 10) total_counter = 0;
 8000670:	e7bf      	b.n	80005f2 <main+0x1e>

08000672 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000672:	b580      	push	{r7, lr}
 8000674:	b090      	sub	sp, #64	; 0x40
 8000676:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000678:	f107 0318 	add.w	r3, r7, #24
 800067c:	2228      	movs	r2, #40	; 0x28
 800067e:	2100      	movs	r1, #0
 8000680:	4618      	mov	r0, r3
 8000682:	f001 f801 	bl	8001688 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000694:	2302      	movs	r3, #2
 8000696:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000698:	2301      	movs	r3, #1
 800069a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069c:	2310      	movs	r3, #16
 800069e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006a0:	2300      	movs	r3, #0
 80006a2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a4:	f107 0318 	add.w	r3, r7, #24
 80006a8:	4618      	mov	r0, r3
 80006aa:	f000 fbeb 	bl	8000e84 <HAL_RCC_OscConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80006b4:	f000 f86c 	bl	8000790 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b8:	230f      	movs	r3, #15
 80006ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2100      	movs	r1, #0
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 fe59 	bl	8001388 <HAL_RCC_ClockConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80006dc:	f000 f858 	bl	8000790 <Error_Handler>
  }
}
 80006e0:	bf00      	nop
 80006e2:	3740      	adds	r7, #64	; 0x40
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ee:	f107 0308 	add.w	r3, r7, #8
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fc:	4b21      	ldr	r3, [pc, #132]	; (8000784 <MX_GPIO_Init+0x9c>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	4a20      	ldr	r2, [pc, #128]	; (8000784 <MX_GPIO_Init+0x9c>)
 8000702:	f043 0304 	orr.w	r3, r3, #4
 8000706:	6193      	str	r3, [r2, #24]
 8000708:	4b1e      	ldr	r3, [pc, #120]	; (8000784 <MX_GPIO_Init+0x9c>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	f003 0304 	and.w	r3, r3, #4
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000714:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <MX_GPIO_Init+0x9c>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	4a1a      	ldr	r2, [pc, #104]	; (8000784 <MX_GPIO_Init+0x9c>)
 800071a:	f043 0308 	orr.w	r3, r3, #8
 800071e:	6193      	str	r3, [r2, #24]
 8000720:	4b18      	ldr	r3, [pc, #96]	; (8000784 <MX_GPIO_Init+0x9c>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	f003 0308 	and.w	r3, r3, #8
 8000728:	603b      	str	r3, [r7, #0]
 800072a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_1_Pin|YELLOW_1_Pin|GREEN_1_Pin|RED_2_Pin
 800072c:	2200      	movs	r2, #0
 800072e:	21fc      	movs	r1, #252	; 0xfc
 8000730:	4815      	ldr	r0, [pc, #84]	; (8000788 <MX_GPIO_Init+0xa0>)
 8000732:	f000 fb8f 	bl	8000e54 <HAL_GPIO_WritePin>
                          |YELLOW_2_Pin|GREEN_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A1_Pin|B1_Pin|C1_Pin|D2_Pin
 8000736:	2200      	movs	r2, #0
 8000738:	f643 71ff 	movw	r1, #16383	; 0x3fff
 800073c:	4813      	ldr	r0, [pc, #76]	; (800078c <MX_GPIO_Init+0xa4>)
 800073e:	f000 fb89 	bl	8000e54 <HAL_GPIO_WritePin>
                          |E1_Pin|F1_Pin|G1_Pin|A2_Pin
                          |B2_Pin|C2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RED_1_Pin YELLOW_1_Pin GREEN_1_Pin RED_2_Pin
                           YELLOW_2_Pin GREEN_2_Pin */
  GPIO_InitStruct.Pin = RED_1_Pin|YELLOW_1_Pin|GREEN_1_Pin|RED_2_Pin
 8000742:	23fc      	movs	r3, #252	; 0xfc
 8000744:	60bb      	str	r3, [r7, #8]
                          |YELLOW_2_Pin|GREEN_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	2301      	movs	r3, #1
 8000748:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074e:	2302      	movs	r3, #2
 8000750:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000752:	f107 0308 	add.w	r3, r7, #8
 8000756:	4619      	mov	r1, r3
 8000758:	480b      	ldr	r0, [pc, #44]	; (8000788 <MX_GPIO_Init+0xa0>)
 800075a:	f000 f9ff 	bl	8000b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : A1_Pin B1_Pin C1_Pin D2_Pin
                           E2_Pin F2_Pin G2_Pin D1_Pin
                           E1_Pin F1_Pin G1_Pin A2_Pin
                           B2_Pin C2_Pin */
  GPIO_InitStruct.Pin = A1_Pin|B1_Pin|C1_Pin|D2_Pin
 800075e:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000762:	60bb      	str	r3, [r7, #8]
                          |E2_Pin|F2_Pin|G2_Pin|D1_Pin
                          |E1_Pin|F1_Pin|G1_Pin|A2_Pin
                          |B2_Pin|C2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000764:	2301      	movs	r3, #1
 8000766:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076c:	2302      	movs	r3, #2
 800076e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000770:	f107 0308 	add.w	r3, r7, #8
 8000774:	4619      	mov	r1, r3
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_GPIO_Init+0xa4>)
 8000778:	f000 f9f0 	bl	8000b5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800077c:	bf00      	nop
 800077e:	3718      	adds	r7, #24
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40021000 	.word	0x40021000
 8000788:	40010800 	.word	0x40010800
 800078c:	40010c00 	.word	0x40010c00

08000790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000794:	b672      	cpsid	i
}
 8000796:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000798:	e7fe      	b.n	8000798 <Error_Handler+0x8>
	...

0800079c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <HAL_MspInit+0x40>)
 80007a4:	699b      	ldr	r3, [r3, #24]
 80007a6:	4a0d      	ldr	r2, [pc, #52]	; (80007dc <HAL_MspInit+0x40>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6193      	str	r3, [r2, #24]
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <HAL_MspInit+0x40>)
 80007b0:	699b      	ldr	r3, [r3, #24]
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ba:	4b08      	ldr	r3, [pc, #32]	; (80007dc <HAL_MspInit+0x40>)
 80007bc:	69db      	ldr	r3, [r3, #28]
 80007be:	4a07      	ldr	r2, [pc, #28]	; (80007dc <HAL_MspInit+0x40>)
 80007c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c4:	61d3      	str	r3, [r2, #28]
 80007c6:	4b05      	ldr	r3, [pc, #20]	; (80007dc <HAL_MspInit+0x40>)
 80007c8:	69db      	ldr	r3, [r3, #28]
 80007ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ce:	603b      	str	r3, [r7, #0]
 80007d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d2:	bf00      	nop
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr
 80007dc:	40021000 	.word	0x40021000

080007e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <NMI_Handler+0x4>

080007e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ea:	e7fe      	b.n	80007ea <HardFault_Handler+0x4>

080007ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <MemManage_Handler+0x4>

080007f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007f6:	e7fe      	b.n	80007f6 <BusFault_Handler+0x4>

080007f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007fc:	e7fe      	b.n	80007fc <UsageFault_Handler+0x4>

080007fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000802:	bf00      	nop
 8000804:	46bd      	mov	sp, r7
 8000806:	bc80      	pop	{r7}
 8000808:	4770      	bx	lr

0800080a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr

08000816 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr

08000822 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000826:	f000 f875 	bl	8000914 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}

0800082e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000832:	bf00      	nop
 8000834:	46bd      	mov	sp, r7
 8000836:	bc80      	pop	{r7}
 8000838:	4770      	bx	lr
	...

0800083c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800083c:	f7ff fff7 	bl	800082e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000840:	480b      	ldr	r0, [pc, #44]	; (8000870 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000842:	490c      	ldr	r1, [pc, #48]	; (8000874 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000844:	4a0c      	ldr	r2, [pc, #48]	; (8000878 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000848:	e002      	b.n	8000850 <LoopCopyDataInit>

0800084a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800084a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800084c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800084e:	3304      	adds	r3, #4

08000850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000854:	d3f9      	bcc.n	800084a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000856:	4a09      	ldr	r2, [pc, #36]	; (800087c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000858:	4c09      	ldr	r4, [pc, #36]	; (8000880 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800085a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800085c:	e001      	b.n	8000862 <LoopFillZerobss>

0800085e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800085e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000860:	3204      	adds	r2, #4

08000862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000864:	d3fb      	bcc.n	800085e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000866:	f000 feeb 	bl	8001640 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800086a:	f7ff feb3 	bl	80005d4 <main>
  bx lr
 800086e:	4770      	bx	lr
  ldr r0, =_sdata
 8000870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000874:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000878:	080016dc 	.word	0x080016dc
  ldr r2, =_sbss
 800087c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000880:	2000002c 	.word	0x2000002c

08000884 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000884:	e7fe      	b.n	8000884 <ADC1_2_IRQHandler>
	...

08000888 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800088c:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <HAL_Init+0x28>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a07      	ldr	r2, [pc, #28]	; (80008b0 <HAL_Init+0x28>)
 8000892:	f043 0310 	orr.w	r3, r3, #16
 8000896:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000898:	2003      	movs	r0, #3
 800089a:	f000 f92b 	bl	8000af4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800089e:	200f      	movs	r0, #15
 80008a0:	f000 f808 	bl	80008b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008a4:	f7ff ff7a 	bl	800079c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008a8:	2300      	movs	r3, #0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40022000 	.word	0x40022000

080008b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <HAL_InitTick+0x54>)
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <HAL_InitTick+0x58>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	4619      	mov	r1, r3
 80008c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 f935 	bl	8000b42 <HAL_SYSTICK_Config>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008de:	2301      	movs	r3, #1
 80008e0:	e00e      	b.n	8000900 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2b0f      	cmp	r3, #15
 80008e6:	d80a      	bhi.n	80008fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e8:	2200      	movs	r2, #0
 80008ea:	6879      	ldr	r1, [r7, #4]
 80008ec:	f04f 30ff 	mov.w	r0, #4294967295
 80008f0:	f000 f90b 	bl	8000b0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008f4:	4a06      	ldr	r2, [pc, #24]	; (8000910 <HAL_InitTick+0x5c>)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008fa:	2300      	movs	r3, #0
 80008fc:	e000      	b.n	8000900 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
}
 8000900:	4618      	mov	r0, r3
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000000 	.word	0x20000000
 800090c:	20000008 	.word	0x20000008
 8000910:	20000004 	.word	0x20000004

08000914 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000918:	4b05      	ldr	r3, [pc, #20]	; (8000930 <HAL_IncTick+0x1c>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	461a      	mov	r2, r3
 800091e:	4b05      	ldr	r3, [pc, #20]	; (8000934 <HAL_IncTick+0x20>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4413      	add	r3, r2
 8000924:	4a03      	ldr	r2, [pc, #12]	; (8000934 <HAL_IncTick+0x20>)
 8000926:	6013      	str	r3, [r2, #0]
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr
 8000930:	20000008 	.word	0x20000008
 8000934:	20000028 	.word	0x20000028

08000938 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  return uwTick;
 800093c:	4b02      	ldr	r3, [pc, #8]	; (8000948 <HAL_GetTick+0x10>)
 800093e:	681b      	ldr	r3, [r3, #0]
}
 8000940:	4618      	mov	r0, r3
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr
 8000948:	20000028 	.word	0x20000028

0800094c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000954:	f7ff fff0 	bl	8000938 <HAL_GetTick>
 8000958:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000964:	d005      	beq.n	8000972 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000966:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <HAL_Delay+0x44>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	461a      	mov	r2, r3
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	4413      	add	r3, r2
 8000970:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000972:	bf00      	nop
 8000974:	f7ff ffe0 	bl	8000938 <HAL_GetTick>
 8000978:	4602      	mov	r2, r0
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	68fa      	ldr	r2, [r7, #12]
 8000980:	429a      	cmp	r2, r3
 8000982:	d8f7      	bhi.n	8000974 <HAL_Delay+0x28>
  {
  }
}
 8000984:	bf00      	nop
 8000986:	bf00      	nop
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000008 	.word	0x20000008

08000994 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	f003 0307 	and.w	r3, r3, #7
 80009a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <__NVIC_SetPriorityGrouping+0x44>)
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009aa:	68ba      	ldr	r2, [r7, #8]
 80009ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009b0:	4013      	ands	r3, r2
 80009b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009c6:	4a04      	ldr	r2, [pc, #16]	; (80009d8 <__NVIC_SetPriorityGrouping+0x44>)
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	60d3      	str	r3, [r2, #12]
}
 80009cc:	bf00      	nop
 80009ce:	3714      	adds	r7, #20
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bc80      	pop	{r7}
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e0:	4b04      	ldr	r3, [pc, #16]	; (80009f4 <__NVIC_GetPriorityGrouping+0x18>)
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	0a1b      	lsrs	r3, r3, #8
 80009e6:	f003 0307 	and.w	r3, r3, #7
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bc80      	pop	{r7}
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	6039      	str	r1, [r7, #0]
 8000a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	db0a      	blt.n	8000a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	490c      	ldr	r1, [pc, #48]	; (8000a44 <__NVIC_SetPriority+0x4c>)
 8000a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a16:	0112      	lsls	r2, r2, #4
 8000a18:	b2d2      	uxtb	r2, r2
 8000a1a:	440b      	add	r3, r1
 8000a1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a20:	e00a      	b.n	8000a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	b2da      	uxtb	r2, r3
 8000a26:	4908      	ldr	r1, [pc, #32]	; (8000a48 <__NVIC_SetPriority+0x50>)
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	f003 030f 	and.w	r3, r3, #15
 8000a2e:	3b04      	subs	r3, #4
 8000a30:	0112      	lsls	r2, r2, #4
 8000a32:	b2d2      	uxtb	r2, r2
 8000a34:	440b      	add	r3, r1
 8000a36:	761a      	strb	r2, [r3, #24]
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bc80      	pop	{r7}
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	e000e100 	.word	0xe000e100
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b089      	sub	sp, #36	; 0x24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	f003 0307 	and.w	r3, r3, #7
 8000a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a60:	69fb      	ldr	r3, [r7, #28]
 8000a62:	f1c3 0307 	rsb	r3, r3, #7
 8000a66:	2b04      	cmp	r3, #4
 8000a68:	bf28      	it	cs
 8000a6a:	2304      	movcs	r3, #4
 8000a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	3304      	adds	r3, #4
 8000a72:	2b06      	cmp	r3, #6
 8000a74:	d902      	bls.n	8000a7c <NVIC_EncodePriority+0x30>
 8000a76:	69fb      	ldr	r3, [r7, #28]
 8000a78:	3b03      	subs	r3, #3
 8000a7a:	e000      	b.n	8000a7e <NVIC_EncodePriority+0x32>
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a80:	f04f 32ff 	mov.w	r2, #4294967295
 8000a84:	69bb      	ldr	r3, [r7, #24]
 8000a86:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8a:	43da      	mvns	r2, r3
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	401a      	ands	r2, r3
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a94:	f04f 31ff 	mov.w	r1, #4294967295
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9e:	43d9      	mvns	r1, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa4:	4313      	orrs	r3, r2
         );
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3724      	adds	r7, #36	; 0x24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr

08000ab0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	3b01      	subs	r3, #1
 8000abc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ac0:	d301      	bcc.n	8000ac6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e00f      	b.n	8000ae6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ac6:	4a0a      	ldr	r2, [pc, #40]	; (8000af0 <SysTick_Config+0x40>)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	3b01      	subs	r3, #1
 8000acc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ace:	210f      	movs	r1, #15
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	f7ff ff90 	bl	80009f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ad8:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <SysTick_Config+0x40>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ade:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <SysTick_Config+0x40>)
 8000ae0:	2207      	movs	r2, #7
 8000ae2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	e000e010 	.word	0xe000e010

08000af4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f7ff ff49 	bl	8000994 <__NVIC_SetPriorityGrouping>
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b086      	sub	sp, #24
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	4603      	mov	r3, r0
 8000b12:	60b9      	str	r1, [r7, #8]
 8000b14:	607a      	str	r2, [r7, #4]
 8000b16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b1c:	f7ff ff5e 	bl	80009dc <__NVIC_GetPriorityGrouping>
 8000b20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	68b9      	ldr	r1, [r7, #8]
 8000b26:	6978      	ldr	r0, [r7, #20]
 8000b28:	f7ff ff90 	bl	8000a4c <NVIC_EncodePriority>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b32:	4611      	mov	r1, r2
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff ff5f 	bl	80009f8 <__NVIC_SetPriority>
}
 8000b3a:	bf00      	nop
 8000b3c:	3718      	adds	r7, #24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b082      	sub	sp, #8
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f7ff ffb0 	bl	8000ab0 <SysTick_Config>
 8000b50:	4603      	mov	r3, r0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b08b      	sub	sp, #44	; 0x2c
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b66:	2300      	movs	r3, #0
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b6e:	e161      	b.n	8000e34 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b70:	2201      	movs	r2, #1
 8000b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b74:	fa02 f303 	lsl.w	r3, r2, r3
 8000b78:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	69fa      	ldr	r2, [r7, #28]
 8000b80:	4013      	ands	r3, r2
 8000b82:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b84:	69ba      	ldr	r2, [r7, #24]
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	f040 8150 	bne.w	8000e2e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	4a97      	ldr	r2, [pc, #604]	; (8000df0 <HAL_GPIO_Init+0x294>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d05e      	beq.n	8000c56 <HAL_GPIO_Init+0xfa>
 8000b98:	4a95      	ldr	r2, [pc, #596]	; (8000df0 <HAL_GPIO_Init+0x294>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d875      	bhi.n	8000c8a <HAL_GPIO_Init+0x12e>
 8000b9e:	4a95      	ldr	r2, [pc, #596]	; (8000df4 <HAL_GPIO_Init+0x298>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d058      	beq.n	8000c56 <HAL_GPIO_Init+0xfa>
 8000ba4:	4a93      	ldr	r2, [pc, #588]	; (8000df4 <HAL_GPIO_Init+0x298>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d86f      	bhi.n	8000c8a <HAL_GPIO_Init+0x12e>
 8000baa:	4a93      	ldr	r2, [pc, #588]	; (8000df8 <HAL_GPIO_Init+0x29c>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d052      	beq.n	8000c56 <HAL_GPIO_Init+0xfa>
 8000bb0:	4a91      	ldr	r2, [pc, #580]	; (8000df8 <HAL_GPIO_Init+0x29c>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d869      	bhi.n	8000c8a <HAL_GPIO_Init+0x12e>
 8000bb6:	4a91      	ldr	r2, [pc, #580]	; (8000dfc <HAL_GPIO_Init+0x2a0>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d04c      	beq.n	8000c56 <HAL_GPIO_Init+0xfa>
 8000bbc:	4a8f      	ldr	r2, [pc, #572]	; (8000dfc <HAL_GPIO_Init+0x2a0>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d863      	bhi.n	8000c8a <HAL_GPIO_Init+0x12e>
 8000bc2:	4a8f      	ldr	r2, [pc, #572]	; (8000e00 <HAL_GPIO_Init+0x2a4>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d046      	beq.n	8000c56 <HAL_GPIO_Init+0xfa>
 8000bc8:	4a8d      	ldr	r2, [pc, #564]	; (8000e00 <HAL_GPIO_Init+0x2a4>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d85d      	bhi.n	8000c8a <HAL_GPIO_Init+0x12e>
 8000bce:	2b12      	cmp	r3, #18
 8000bd0:	d82a      	bhi.n	8000c28 <HAL_GPIO_Init+0xcc>
 8000bd2:	2b12      	cmp	r3, #18
 8000bd4:	d859      	bhi.n	8000c8a <HAL_GPIO_Init+0x12e>
 8000bd6:	a201      	add	r2, pc, #4	; (adr r2, 8000bdc <HAL_GPIO_Init+0x80>)
 8000bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bdc:	08000c57 	.word	0x08000c57
 8000be0:	08000c31 	.word	0x08000c31
 8000be4:	08000c43 	.word	0x08000c43
 8000be8:	08000c85 	.word	0x08000c85
 8000bec:	08000c8b 	.word	0x08000c8b
 8000bf0:	08000c8b 	.word	0x08000c8b
 8000bf4:	08000c8b 	.word	0x08000c8b
 8000bf8:	08000c8b 	.word	0x08000c8b
 8000bfc:	08000c8b 	.word	0x08000c8b
 8000c00:	08000c8b 	.word	0x08000c8b
 8000c04:	08000c8b 	.word	0x08000c8b
 8000c08:	08000c8b 	.word	0x08000c8b
 8000c0c:	08000c8b 	.word	0x08000c8b
 8000c10:	08000c8b 	.word	0x08000c8b
 8000c14:	08000c8b 	.word	0x08000c8b
 8000c18:	08000c8b 	.word	0x08000c8b
 8000c1c:	08000c8b 	.word	0x08000c8b
 8000c20:	08000c39 	.word	0x08000c39
 8000c24:	08000c4d 	.word	0x08000c4d
 8000c28:	4a76      	ldr	r2, [pc, #472]	; (8000e04 <HAL_GPIO_Init+0x2a8>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d013      	beq.n	8000c56 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c2e:	e02c      	b.n	8000c8a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	623b      	str	r3, [r7, #32]
          break;
 8000c36:	e029      	b.n	8000c8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	623b      	str	r3, [r7, #32]
          break;
 8000c40:	e024      	b.n	8000c8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	68db      	ldr	r3, [r3, #12]
 8000c46:	3308      	adds	r3, #8
 8000c48:	623b      	str	r3, [r7, #32]
          break;
 8000c4a:	e01f      	b.n	8000c8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	330c      	adds	r3, #12
 8000c52:	623b      	str	r3, [r7, #32]
          break;
 8000c54:	e01a      	b.n	8000c8c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	689b      	ldr	r3, [r3, #8]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d102      	bne.n	8000c64 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c5e:	2304      	movs	r3, #4
 8000c60:	623b      	str	r3, [r7, #32]
          break;
 8000c62:	e013      	b.n	8000c8c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	689b      	ldr	r3, [r3, #8]
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d105      	bne.n	8000c78 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c6c:	2308      	movs	r3, #8
 8000c6e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	69fa      	ldr	r2, [r7, #28]
 8000c74:	611a      	str	r2, [r3, #16]
          break;
 8000c76:	e009      	b.n	8000c8c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c78:	2308      	movs	r3, #8
 8000c7a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	69fa      	ldr	r2, [r7, #28]
 8000c80:	615a      	str	r2, [r3, #20]
          break;
 8000c82:	e003      	b.n	8000c8c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c84:	2300      	movs	r3, #0
 8000c86:	623b      	str	r3, [r7, #32]
          break;
 8000c88:	e000      	b.n	8000c8c <HAL_GPIO_Init+0x130>
          break;
 8000c8a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	2bff      	cmp	r3, #255	; 0xff
 8000c90:	d801      	bhi.n	8000c96 <HAL_GPIO_Init+0x13a>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	e001      	b.n	8000c9a <HAL_GPIO_Init+0x13e>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	3304      	adds	r3, #4
 8000c9a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	2bff      	cmp	r3, #255	; 0xff
 8000ca0:	d802      	bhi.n	8000ca8 <HAL_GPIO_Init+0x14c>
 8000ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	e002      	b.n	8000cae <HAL_GPIO_Init+0x152>
 8000ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000caa:	3b08      	subs	r3, #8
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	210f      	movs	r1, #15
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	401a      	ands	r2, r3
 8000cc0:	6a39      	ldr	r1, [r7, #32]
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	f000 80a9 	beq.w	8000e2e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cdc:	4b4a      	ldr	r3, [pc, #296]	; (8000e08 <HAL_GPIO_Init+0x2ac>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	4a49      	ldr	r2, [pc, #292]	; (8000e08 <HAL_GPIO_Init+0x2ac>)
 8000ce2:	f043 0301 	orr.w	r3, r3, #1
 8000ce6:	6193      	str	r3, [r2, #24]
 8000ce8:	4b47      	ldr	r3, [pc, #284]	; (8000e08 <HAL_GPIO_Init+0x2ac>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cf4:	4a45      	ldr	r2, [pc, #276]	; (8000e0c <HAL_GPIO_Init+0x2b0>)
 8000cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf8:	089b      	lsrs	r3, r3, #2
 8000cfa:	3302      	adds	r3, #2
 8000cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d00:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d04:	f003 0303 	and.w	r3, r3, #3
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	220f      	movs	r2, #15
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	43db      	mvns	r3, r3
 8000d12:	68fa      	ldr	r2, [r7, #12]
 8000d14:	4013      	ands	r3, r2
 8000d16:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4a3d      	ldr	r2, [pc, #244]	; (8000e10 <HAL_GPIO_Init+0x2b4>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d00d      	beq.n	8000d3c <HAL_GPIO_Init+0x1e0>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a3c      	ldr	r2, [pc, #240]	; (8000e14 <HAL_GPIO_Init+0x2b8>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d007      	beq.n	8000d38 <HAL_GPIO_Init+0x1dc>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4a3b      	ldr	r2, [pc, #236]	; (8000e18 <HAL_GPIO_Init+0x2bc>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d101      	bne.n	8000d34 <HAL_GPIO_Init+0x1d8>
 8000d30:	2302      	movs	r3, #2
 8000d32:	e004      	b.n	8000d3e <HAL_GPIO_Init+0x1e2>
 8000d34:	2303      	movs	r3, #3
 8000d36:	e002      	b.n	8000d3e <HAL_GPIO_Init+0x1e2>
 8000d38:	2301      	movs	r3, #1
 8000d3a:	e000      	b.n	8000d3e <HAL_GPIO_Init+0x1e2>
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d40:	f002 0203 	and.w	r2, r2, #3
 8000d44:	0092      	lsls	r2, r2, #2
 8000d46:	4093      	lsls	r3, r2
 8000d48:	68fa      	ldr	r2, [r7, #12]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d4e:	492f      	ldr	r1, [pc, #188]	; (8000e0c <HAL_GPIO_Init+0x2b0>)
 8000d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d52:	089b      	lsrs	r3, r3, #2
 8000d54:	3302      	adds	r3, #2
 8000d56:	68fa      	ldr	r2, [r7, #12]
 8000d58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d006      	beq.n	8000d76 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d68:	4b2c      	ldr	r3, [pc, #176]	; (8000e1c <HAL_GPIO_Init+0x2c0>)
 8000d6a:	689a      	ldr	r2, [r3, #8]
 8000d6c:	492b      	ldr	r1, [pc, #172]	; (8000e1c <HAL_GPIO_Init+0x2c0>)
 8000d6e:	69bb      	ldr	r3, [r7, #24]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	608b      	str	r3, [r1, #8]
 8000d74:	e006      	b.n	8000d84 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d76:	4b29      	ldr	r3, [pc, #164]	; (8000e1c <HAL_GPIO_Init+0x2c0>)
 8000d78:	689a      	ldr	r2, [r3, #8]
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	4927      	ldr	r1, [pc, #156]	; (8000e1c <HAL_GPIO_Init+0x2c0>)
 8000d80:	4013      	ands	r3, r2
 8000d82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d006      	beq.n	8000d9e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d90:	4b22      	ldr	r3, [pc, #136]	; (8000e1c <HAL_GPIO_Init+0x2c0>)
 8000d92:	68da      	ldr	r2, [r3, #12]
 8000d94:	4921      	ldr	r1, [pc, #132]	; (8000e1c <HAL_GPIO_Init+0x2c0>)
 8000d96:	69bb      	ldr	r3, [r7, #24]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	60cb      	str	r3, [r1, #12]
 8000d9c:	e006      	b.n	8000dac <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d9e:	4b1f      	ldr	r3, [pc, #124]	; (8000e1c <HAL_GPIO_Init+0x2c0>)
 8000da0:	68da      	ldr	r2, [r3, #12]
 8000da2:	69bb      	ldr	r3, [r7, #24]
 8000da4:	43db      	mvns	r3, r3
 8000da6:	491d      	ldr	r1, [pc, #116]	; (8000e1c <HAL_GPIO_Init+0x2c0>)
 8000da8:	4013      	ands	r3, r2
 8000daa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d006      	beq.n	8000dc6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000db8:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <HAL_GPIO_Init+0x2c0>)
 8000dba:	685a      	ldr	r2, [r3, #4]
 8000dbc:	4917      	ldr	r1, [pc, #92]	; (8000e1c <HAL_GPIO_Init+0x2c0>)
 8000dbe:	69bb      	ldr	r3, [r7, #24]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	604b      	str	r3, [r1, #4]
 8000dc4:	e006      	b.n	8000dd4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dc6:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <HAL_GPIO_Init+0x2c0>)
 8000dc8:	685a      	ldr	r2, [r3, #4]
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	4913      	ldr	r1, [pc, #76]	; (8000e1c <HAL_GPIO_Init+0x2c0>)
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d01f      	beq.n	8000e20 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000de0:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <HAL_GPIO_Init+0x2c0>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	490d      	ldr	r1, [pc, #52]	; (8000e1c <HAL_GPIO_Init+0x2c0>)
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	600b      	str	r3, [r1, #0]
 8000dec:	e01f      	b.n	8000e2e <HAL_GPIO_Init+0x2d2>
 8000dee:	bf00      	nop
 8000df0:	10320000 	.word	0x10320000
 8000df4:	10310000 	.word	0x10310000
 8000df8:	10220000 	.word	0x10220000
 8000dfc:	10210000 	.word	0x10210000
 8000e00:	10120000 	.word	0x10120000
 8000e04:	10110000 	.word	0x10110000
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	40010000 	.word	0x40010000
 8000e10:	40010800 	.word	0x40010800
 8000e14:	40010c00 	.word	0x40010c00
 8000e18:	40011000 	.word	0x40011000
 8000e1c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e20:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <HAL_GPIO_Init+0x2f4>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	43db      	mvns	r3, r3
 8000e28:	4909      	ldr	r1, [pc, #36]	; (8000e50 <HAL_GPIO_Init+0x2f4>)
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e30:	3301      	adds	r3, #1
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f47f ae96 	bne.w	8000b70 <HAL_GPIO_Init+0x14>
  }
}
 8000e44:	bf00      	nop
 8000e46:	bf00      	nop
 8000e48:	372c      	adds	r7, #44	; 0x2c
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr
 8000e50:	40010400 	.word	0x40010400

08000e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	807b      	strh	r3, [r7, #2]
 8000e60:	4613      	mov	r3, r2
 8000e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e64:	787b      	ldrb	r3, [r7, #1]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d003      	beq.n	8000e72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e6a:	887a      	ldrh	r2, [r7, #2]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e70:	e003      	b.n	8000e7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e72:	887b      	ldrh	r3, [r7, #2]
 8000e74:	041a      	lsls	r2, r3, #16
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	611a      	str	r2, [r3, #16]
}
 8000e7a:	bf00      	nop
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr

08000e84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d101      	bne.n	8000e96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e272      	b.n	800137c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	f000 8087 	beq.w	8000fb2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ea4:	4b92      	ldr	r3, [pc, #584]	; (80010f0 <HAL_RCC_OscConfig+0x26c>)
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 030c 	and.w	r3, r3, #12
 8000eac:	2b04      	cmp	r3, #4
 8000eae:	d00c      	beq.n	8000eca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000eb0:	4b8f      	ldr	r3, [pc, #572]	; (80010f0 <HAL_RCC_OscConfig+0x26c>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f003 030c 	and.w	r3, r3, #12
 8000eb8:	2b08      	cmp	r3, #8
 8000eba:	d112      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x5e>
 8000ebc:	4b8c      	ldr	r3, [pc, #560]	; (80010f0 <HAL_RCC_OscConfig+0x26c>)
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ec8:	d10b      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eca:	4b89      	ldr	r3, [pc, #548]	; (80010f0 <HAL_RCC_OscConfig+0x26c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d06c      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x12c>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d168      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e24c      	b.n	800137c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eea:	d106      	bne.n	8000efa <HAL_RCC_OscConfig+0x76>
 8000eec:	4b80      	ldr	r3, [pc, #512]	; (80010f0 <HAL_RCC_OscConfig+0x26c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a7f      	ldr	r2, [pc, #508]	; (80010f0 <HAL_RCC_OscConfig+0x26c>)
 8000ef2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ef6:	6013      	str	r3, [r2, #0]
 8000ef8:	e02e      	b.n	8000f58 <HAL_RCC_OscConfig+0xd4>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d10c      	bne.n	8000f1c <HAL_RCC_OscConfig+0x98>
 8000f02:	4b7b      	ldr	r3, [pc, #492]	; (80010f0 <HAL_RCC_OscConfig+0x26c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a7a      	ldr	r2, [pc, #488]	; (80010f0 <HAL_RCC_OscConfig+0x26c>)
 8000f08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f0c:	6013      	str	r3, [r2, #0]
 8000f0e:	4b78      	ldr	r3, [pc, #480]	; (80010f0 <HAL_RCC_OscConfig+0x26c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a77      	ldr	r2, [pc, #476]	; (80010f0 <HAL_RCC_OscConfig+0x26c>)
 8000f14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f18:	6013      	str	r3, [r2, #0]
 8000f1a:	e01d      	b.n	8000f58 <HAL_RCC_OscConfig+0xd4>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f24:	d10c      	bne.n	8000f40 <HAL_RCC_OscConfig+0xbc>
 8000f26:	4b72      	ldr	r3, [pc, #456]	; (80010f0 <HAL_RCC_OscConfig+0x26c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a71      	ldr	r2, [pc, #452]	; (80010f0 <HAL_RCC_OscConfig+0x26c>)
 8000f2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f30:	6013      	str	r3, [r2, #0]
 8000f32:	4b6f      	ldr	r3, [pc, #444]	; (80010f0 <HAL_RCC_OscConfig+0x26c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a6e      	ldr	r2, [pc, #440]	; (80010f0 <HAL_RCC_OscConfig+0x26c>)
 8000f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f3c:	6013      	str	r3, [r2, #0]
 8000f3e:	e00b      	b.n	8000f58 <HAL_RCC_OscConfig+0xd4>
 8000f40:	4b6b      	ldr	r3, [pc, #428]	; (80010f0 <HAL_RCC_OscConfig+0x26c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a6a      	ldr	r2, [pc, #424]	; (80010f0 <HAL_RCC_OscConfig+0x26c>)
 8000f46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f4a:	6013      	str	r3, [r2, #0]
 8000f4c:	4b68      	ldr	r3, [pc, #416]	; (80010f0 <HAL_RCC_OscConfig+0x26c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a67      	ldr	r2, [pc, #412]	; (80010f0 <HAL_RCC_OscConfig+0x26c>)
 8000f52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f56:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d013      	beq.n	8000f88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f60:	f7ff fcea 	bl	8000938 <HAL_GetTick>
 8000f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f66:	e008      	b.n	8000f7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f68:	f7ff fce6 	bl	8000938 <HAL_GetTick>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	2b64      	cmp	r3, #100	; 0x64
 8000f74:	d901      	bls.n	8000f7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f76:	2303      	movs	r3, #3
 8000f78:	e200      	b.n	800137c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f7a:	4b5d      	ldr	r3, [pc, #372]	; (80010f0 <HAL_RCC_OscConfig+0x26c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d0f0      	beq.n	8000f68 <HAL_RCC_OscConfig+0xe4>
 8000f86:	e014      	b.n	8000fb2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f88:	f7ff fcd6 	bl	8000938 <HAL_GetTick>
 8000f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f8e:	e008      	b.n	8000fa2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f90:	f7ff fcd2 	bl	8000938 <HAL_GetTick>
 8000f94:	4602      	mov	r2, r0
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	2b64      	cmp	r3, #100	; 0x64
 8000f9c:	d901      	bls.n	8000fa2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	e1ec      	b.n	800137c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fa2:	4b53      	ldr	r3, [pc, #332]	; (80010f0 <HAL_RCC_OscConfig+0x26c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d1f0      	bne.n	8000f90 <HAL_RCC_OscConfig+0x10c>
 8000fae:	e000      	b.n	8000fb2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f003 0302 	and.w	r3, r3, #2
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d063      	beq.n	8001086 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fbe:	4b4c      	ldr	r3, [pc, #304]	; (80010f0 <HAL_RCC_OscConfig+0x26c>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f003 030c 	and.w	r3, r3, #12
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d00b      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fca:	4b49      	ldr	r3, [pc, #292]	; (80010f0 <HAL_RCC_OscConfig+0x26c>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f003 030c 	and.w	r3, r3, #12
 8000fd2:	2b08      	cmp	r3, #8
 8000fd4:	d11c      	bne.n	8001010 <HAL_RCC_OscConfig+0x18c>
 8000fd6:	4b46      	ldr	r3, [pc, #280]	; (80010f0 <HAL_RCC_OscConfig+0x26c>)
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d116      	bne.n	8001010 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fe2:	4b43      	ldr	r3, [pc, #268]	; (80010f0 <HAL_RCC_OscConfig+0x26c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d005      	beq.n	8000ffa <HAL_RCC_OscConfig+0x176>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	691b      	ldr	r3, [r3, #16]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d001      	beq.n	8000ffa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e1c0      	b.n	800137c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ffa:	4b3d      	ldr	r3, [pc, #244]	; (80010f0 <HAL_RCC_OscConfig+0x26c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	00db      	lsls	r3, r3, #3
 8001008:	4939      	ldr	r1, [pc, #228]	; (80010f0 <HAL_RCC_OscConfig+0x26c>)
 800100a:	4313      	orrs	r3, r2
 800100c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800100e:	e03a      	b.n	8001086 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	691b      	ldr	r3, [r3, #16]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d020      	beq.n	800105a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001018:	4b36      	ldr	r3, [pc, #216]	; (80010f4 <HAL_RCC_OscConfig+0x270>)
 800101a:	2201      	movs	r2, #1
 800101c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800101e:	f7ff fc8b 	bl	8000938 <HAL_GetTick>
 8001022:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001024:	e008      	b.n	8001038 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001026:	f7ff fc87 	bl	8000938 <HAL_GetTick>
 800102a:	4602      	mov	r2, r0
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	2b02      	cmp	r3, #2
 8001032:	d901      	bls.n	8001038 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001034:	2303      	movs	r3, #3
 8001036:	e1a1      	b.n	800137c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001038:	4b2d      	ldr	r3, [pc, #180]	; (80010f0 <HAL_RCC_OscConfig+0x26c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f003 0302 	and.w	r3, r3, #2
 8001040:	2b00      	cmp	r3, #0
 8001042:	d0f0      	beq.n	8001026 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001044:	4b2a      	ldr	r3, [pc, #168]	; (80010f0 <HAL_RCC_OscConfig+0x26c>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	695b      	ldr	r3, [r3, #20]
 8001050:	00db      	lsls	r3, r3, #3
 8001052:	4927      	ldr	r1, [pc, #156]	; (80010f0 <HAL_RCC_OscConfig+0x26c>)
 8001054:	4313      	orrs	r3, r2
 8001056:	600b      	str	r3, [r1, #0]
 8001058:	e015      	b.n	8001086 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800105a:	4b26      	ldr	r3, [pc, #152]	; (80010f4 <HAL_RCC_OscConfig+0x270>)
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001060:	f7ff fc6a 	bl	8000938 <HAL_GetTick>
 8001064:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001066:	e008      	b.n	800107a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001068:	f7ff fc66 	bl	8000938 <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	2b02      	cmp	r3, #2
 8001074:	d901      	bls.n	800107a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001076:	2303      	movs	r3, #3
 8001078:	e180      	b.n	800137c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800107a:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <HAL_RCC_OscConfig+0x26c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	2b00      	cmp	r3, #0
 8001084:	d1f0      	bne.n	8001068 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 0308 	and.w	r3, r3, #8
 800108e:	2b00      	cmp	r3, #0
 8001090:	d03a      	beq.n	8001108 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	699b      	ldr	r3, [r3, #24]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d019      	beq.n	80010ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800109a:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <HAL_RCC_OscConfig+0x274>)
 800109c:	2201      	movs	r2, #1
 800109e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010a0:	f7ff fc4a 	bl	8000938 <HAL_GetTick>
 80010a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010a6:	e008      	b.n	80010ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010a8:	f7ff fc46 	bl	8000938 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d901      	bls.n	80010ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010b6:	2303      	movs	r3, #3
 80010b8:	e160      	b.n	800137c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ba:	4b0d      	ldr	r3, [pc, #52]	; (80010f0 <HAL_RCC_OscConfig+0x26c>)
 80010bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d0f0      	beq.n	80010a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010c6:	2001      	movs	r0, #1
 80010c8:	f000 fa9c 	bl	8001604 <RCC_Delay>
 80010cc:	e01c      	b.n	8001108 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010ce:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <HAL_RCC_OscConfig+0x274>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010d4:	f7ff fc30 	bl	8000938 <HAL_GetTick>
 80010d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010da:	e00f      	b.n	80010fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010dc:	f7ff fc2c 	bl	8000938 <HAL_GetTick>
 80010e0:	4602      	mov	r2, r0
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d908      	bls.n	80010fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010ea:	2303      	movs	r3, #3
 80010ec:	e146      	b.n	800137c <HAL_RCC_OscConfig+0x4f8>
 80010ee:	bf00      	nop
 80010f0:	40021000 	.word	0x40021000
 80010f4:	42420000 	.word	0x42420000
 80010f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010fc:	4b92      	ldr	r3, [pc, #584]	; (8001348 <HAL_RCC_OscConfig+0x4c4>)
 80010fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001100:	f003 0302 	and.w	r3, r3, #2
 8001104:	2b00      	cmp	r3, #0
 8001106:	d1e9      	bne.n	80010dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0304 	and.w	r3, r3, #4
 8001110:	2b00      	cmp	r3, #0
 8001112:	f000 80a6 	beq.w	8001262 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001116:	2300      	movs	r3, #0
 8001118:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800111a:	4b8b      	ldr	r3, [pc, #556]	; (8001348 <HAL_RCC_OscConfig+0x4c4>)
 800111c:	69db      	ldr	r3, [r3, #28]
 800111e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d10d      	bne.n	8001142 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001126:	4b88      	ldr	r3, [pc, #544]	; (8001348 <HAL_RCC_OscConfig+0x4c4>)
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	4a87      	ldr	r2, [pc, #540]	; (8001348 <HAL_RCC_OscConfig+0x4c4>)
 800112c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001130:	61d3      	str	r3, [r2, #28]
 8001132:	4b85      	ldr	r3, [pc, #532]	; (8001348 <HAL_RCC_OscConfig+0x4c4>)
 8001134:	69db      	ldr	r3, [r3, #28]
 8001136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800113a:	60bb      	str	r3, [r7, #8]
 800113c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800113e:	2301      	movs	r3, #1
 8001140:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001142:	4b82      	ldr	r3, [pc, #520]	; (800134c <HAL_RCC_OscConfig+0x4c8>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800114a:	2b00      	cmp	r3, #0
 800114c:	d118      	bne.n	8001180 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800114e:	4b7f      	ldr	r3, [pc, #508]	; (800134c <HAL_RCC_OscConfig+0x4c8>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a7e      	ldr	r2, [pc, #504]	; (800134c <HAL_RCC_OscConfig+0x4c8>)
 8001154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001158:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800115a:	f7ff fbed 	bl	8000938 <HAL_GetTick>
 800115e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001160:	e008      	b.n	8001174 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001162:	f7ff fbe9 	bl	8000938 <HAL_GetTick>
 8001166:	4602      	mov	r2, r0
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	2b64      	cmp	r3, #100	; 0x64
 800116e:	d901      	bls.n	8001174 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001170:	2303      	movs	r3, #3
 8001172:	e103      	b.n	800137c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001174:	4b75      	ldr	r3, [pc, #468]	; (800134c <HAL_RCC_OscConfig+0x4c8>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800117c:	2b00      	cmp	r3, #0
 800117e:	d0f0      	beq.n	8001162 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d106      	bne.n	8001196 <HAL_RCC_OscConfig+0x312>
 8001188:	4b6f      	ldr	r3, [pc, #444]	; (8001348 <HAL_RCC_OscConfig+0x4c4>)
 800118a:	6a1b      	ldr	r3, [r3, #32]
 800118c:	4a6e      	ldr	r2, [pc, #440]	; (8001348 <HAL_RCC_OscConfig+0x4c4>)
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	6213      	str	r3, [r2, #32]
 8001194:	e02d      	b.n	80011f2 <HAL_RCC_OscConfig+0x36e>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d10c      	bne.n	80011b8 <HAL_RCC_OscConfig+0x334>
 800119e:	4b6a      	ldr	r3, [pc, #424]	; (8001348 <HAL_RCC_OscConfig+0x4c4>)
 80011a0:	6a1b      	ldr	r3, [r3, #32]
 80011a2:	4a69      	ldr	r2, [pc, #420]	; (8001348 <HAL_RCC_OscConfig+0x4c4>)
 80011a4:	f023 0301 	bic.w	r3, r3, #1
 80011a8:	6213      	str	r3, [r2, #32]
 80011aa:	4b67      	ldr	r3, [pc, #412]	; (8001348 <HAL_RCC_OscConfig+0x4c4>)
 80011ac:	6a1b      	ldr	r3, [r3, #32]
 80011ae:	4a66      	ldr	r2, [pc, #408]	; (8001348 <HAL_RCC_OscConfig+0x4c4>)
 80011b0:	f023 0304 	bic.w	r3, r3, #4
 80011b4:	6213      	str	r3, [r2, #32]
 80011b6:	e01c      	b.n	80011f2 <HAL_RCC_OscConfig+0x36e>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	2b05      	cmp	r3, #5
 80011be:	d10c      	bne.n	80011da <HAL_RCC_OscConfig+0x356>
 80011c0:	4b61      	ldr	r3, [pc, #388]	; (8001348 <HAL_RCC_OscConfig+0x4c4>)
 80011c2:	6a1b      	ldr	r3, [r3, #32]
 80011c4:	4a60      	ldr	r2, [pc, #384]	; (8001348 <HAL_RCC_OscConfig+0x4c4>)
 80011c6:	f043 0304 	orr.w	r3, r3, #4
 80011ca:	6213      	str	r3, [r2, #32]
 80011cc:	4b5e      	ldr	r3, [pc, #376]	; (8001348 <HAL_RCC_OscConfig+0x4c4>)
 80011ce:	6a1b      	ldr	r3, [r3, #32]
 80011d0:	4a5d      	ldr	r2, [pc, #372]	; (8001348 <HAL_RCC_OscConfig+0x4c4>)
 80011d2:	f043 0301 	orr.w	r3, r3, #1
 80011d6:	6213      	str	r3, [r2, #32]
 80011d8:	e00b      	b.n	80011f2 <HAL_RCC_OscConfig+0x36e>
 80011da:	4b5b      	ldr	r3, [pc, #364]	; (8001348 <HAL_RCC_OscConfig+0x4c4>)
 80011dc:	6a1b      	ldr	r3, [r3, #32]
 80011de:	4a5a      	ldr	r2, [pc, #360]	; (8001348 <HAL_RCC_OscConfig+0x4c4>)
 80011e0:	f023 0301 	bic.w	r3, r3, #1
 80011e4:	6213      	str	r3, [r2, #32]
 80011e6:	4b58      	ldr	r3, [pc, #352]	; (8001348 <HAL_RCC_OscConfig+0x4c4>)
 80011e8:	6a1b      	ldr	r3, [r3, #32]
 80011ea:	4a57      	ldr	r2, [pc, #348]	; (8001348 <HAL_RCC_OscConfig+0x4c4>)
 80011ec:	f023 0304 	bic.w	r3, r3, #4
 80011f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d015      	beq.n	8001226 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011fa:	f7ff fb9d 	bl	8000938 <HAL_GetTick>
 80011fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001200:	e00a      	b.n	8001218 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001202:	f7ff fb99 	bl	8000938 <HAL_GetTick>
 8001206:	4602      	mov	r2, r0
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001210:	4293      	cmp	r3, r2
 8001212:	d901      	bls.n	8001218 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e0b1      	b.n	800137c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001218:	4b4b      	ldr	r3, [pc, #300]	; (8001348 <HAL_RCC_OscConfig+0x4c4>)
 800121a:	6a1b      	ldr	r3, [r3, #32]
 800121c:	f003 0302 	and.w	r3, r3, #2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d0ee      	beq.n	8001202 <HAL_RCC_OscConfig+0x37e>
 8001224:	e014      	b.n	8001250 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001226:	f7ff fb87 	bl	8000938 <HAL_GetTick>
 800122a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800122c:	e00a      	b.n	8001244 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800122e:	f7ff fb83 	bl	8000938 <HAL_GetTick>
 8001232:	4602      	mov	r2, r0
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	f241 3288 	movw	r2, #5000	; 0x1388
 800123c:	4293      	cmp	r3, r2
 800123e:	d901      	bls.n	8001244 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001240:	2303      	movs	r3, #3
 8001242:	e09b      	b.n	800137c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001244:	4b40      	ldr	r3, [pc, #256]	; (8001348 <HAL_RCC_OscConfig+0x4c4>)
 8001246:	6a1b      	ldr	r3, [r3, #32]
 8001248:	f003 0302 	and.w	r3, r3, #2
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1ee      	bne.n	800122e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001250:	7dfb      	ldrb	r3, [r7, #23]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d105      	bne.n	8001262 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001256:	4b3c      	ldr	r3, [pc, #240]	; (8001348 <HAL_RCC_OscConfig+0x4c4>)
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	4a3b      	ldr	r2, [pc, #236]	; (8001348 <HAL_RCC_OscConfig+0x4c4>)
 800125c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001260:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	69db      	ldr	r3, [r3, #28]
 8001266:	2b00      	cmp	r3, #0
 8001268:	f000 8087 	beq.w	800137a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800126c:	4b36      	ldr	r3, [pc, #216]	; (8001348 <HAL_RCC_OscConfig+0x4c4>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f003 030c 	and.w	r3, r3, #12
 8001274:	2b08      	cmp	r3, #8
 8001276:	d061      	beq.n	800133c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	69db      	ldr	r3, [r3, #28]
 800127c:	2b02      	cmp	r3, #2
 800127e:	d146      	bne.n	800130e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001280:	4b33      	ldr	r3, [pc, #204]	; (8001350 <HAL_RCC_OscConfig+0x4cc>)
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001286:	f7ff fb57 	bl	8000938 <HAL_GetTick>
 800128a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800128c:	e008      	b.n	80012a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800128e:	f7ff fb53 	bl	8000938 <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b02      	cmp	r3, #2
 800129a:	d901      	bls.n	80012a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	e06d      	b.n	800137c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012a0:	4b29      	ldr	r3, [pc, #164]	; (8001348 <HAL_RCC_OscConfig+0x4c4>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d1f0      	bne.n	800128e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a1b      	ldr	r3, [r3, #32]
 80012b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b4:	d108      	bne.n	80012c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012b6:	4b24      	ldr	r3, [pc, #144]	; (8001348 <HAL_RCC_OscConfig+0x4c4>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	4921      	ldr	r1, [pc, #132]	; (8001348 <HAL_RCC_OscConfig+0x4c4>)
 80012c4:	4313      	orrs	r3, r2
 80012c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012c8:	4b1f      	ldr	r3, [pc, #124]	; (8001348 <HAL_RCC_OscConfig+0x4c4>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6a19      	ldr	r1, [r3, #32]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d8:	430b      	orrs	r3, r1
 80012da:	491b      	ldr	r1, [pc, #108]	; (8001348 <HAL_RCC_OscConfig+0x4c4>)
 80012dc:	4313      	orrs	r3, r2
 80012de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012e0:	4b1b      	ldr	r3, [pc, #108]	; (8001350 <HAL_RCC_OscConfig+0x4cc>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e6:	f7ff fb27 	bl	8000938 <HAL_GetTick>
 80012ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012ec:	e008      	b.n	8001300 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012ee:	f7ff fb23 	bl	8000938 <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e03d      	b.n	800137c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001300:	4b11      	ldr	r3, [pc, #68]	; (8001348 <HAL_RCC_OscConfig+0x4c4>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d0f0      	beq.n	80012ee <HAL_RCC_OscConfig+0x46a>
 800130c:	e035      	b.n	800137a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800130e:	4b10      	ldr	r3, [pc, #64]	; (8001350 <HAL_RCC_OscConfig+0x4cc>)
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001314:	f7ff fb10 	bl	8000938 <HAL_GetTick>
 8001318:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800131c:	f7ff fb0c 	bl	8000938 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e026      	b.n	800137c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_RCC_OscConfig+0x4c4>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1f0      	bne.n	800131c <HAL_RCC_OscConfig+0x498>
 800133a:	e01e      	b.n	800137a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	69db      	ldr	r3, [r3, #28]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d107      	bne.n	8001354 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e019      	b.n	800137c <HAL_RCC_OscConfig+0x4f8>
 8001348:	40021000 	.word	0x40021000
 800134c:	40007000 	.word	0x40007000
 8001350:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001354:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <HAL_RCC_OscConfig+0x500>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a1b      	ldr	r3, [r3, #32]
 8001364:	429a      	cmp	r2, r3
 8001366:	d106      	bne.n	8001376 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001372:	429a      	cmp	r2, r3
 8001374:	d001      	beq.n	800137a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e000      	b.n	800137c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800137a:	2300      	movs	r3, #0
}
 800137c:	4618      	mov	r0, r3
 800137e:	3718      	adds	r7, #24
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40021000 	.word	0x40021000

08001388 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d101      	bne.n	800139c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e0d0      	b.n	800153e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800139c:	4b6a      	ldr	r3, [pc, #424]	; (8001548 <HAL_RCC_ClockConfig+0x1c0>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0307 	and.w	r3, r3, #7
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d910      	bls.n	80013cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013aa:	4b67      	ldr	r3, [pc, #412]	; (8001548 <HAL_RCC_ClockConfig+0x1c0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f023 0207 	bic.w	r2, r3, #7
 80013b2:	4965      	ldr	r1, [pc, #404]	; (8001548 <HAL_RCC_ClockConfig+0x1c0>)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ba:	4b63      	ldr	r3, [pc, #396]	; (8001548 <HAL_RCC_ClockConfig+0x1c0>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	683a      	ldr	r2, [r7, #0]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d001      	beq.n	80013cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e0b8      	b.n	800153e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d020      	beq.n	800141a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 0304 	and.w	r3, r3, #4
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d005      	beq.n	80013f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013e4:	4b59      	ldr	r3, [pc, #356]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	4a58      	ldr	r2, [pc, #352]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 80013ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0308 	and.w	r3, r3, #8
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d005      	beq.n	8001408 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013fc:	4b53      	ldr	r3, [pc, #332]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	4a52      	ldr	r2, [pc, #328]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 8001402:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001406:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001408:	4b50      	ldr	r3, [pc, #320]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	494d      	ldr	r1, [pc, #308]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 8001416:	4313      	orrs	r3, r2
 8001418:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	2b00      	cmp	r3, #0
 8001424:	d040      	beq.n	80014a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d107      	bne.n	800143e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800142e:	4b47      	ldr	r3, [pc, #284]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d115      	bne.n	8001466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e07f      	b.n	800153e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2b02      	cmp	r3, #2
 8001444:	d107      	bne.n	8001456 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001446:	4b41      	ldr	r3, [pc, #260]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d109      	bne.n	8001466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e073      	b.n	800153e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001456:	4b3d      	ldr	r3, [pc, #244]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e06b      	b.n	800153e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001466:	4b39      	ldr	r3, [pc, #228]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f023 0203 	bic.w	r2, r3, #3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	4936      	ldr	r1, [pc, #216]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 8001474:	4313      	orrs	r3, r2
 8001476:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001478:	f7ff fa5e 	bl	8000938 <HAL_GetTick>
 800147c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800147e:	e00a      	b.n	8001496 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001480:	f7ff fa5a 	bl	8000938 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	f241 3288 	movw	r2, #5000	; 0x1388
 800148e:	4293      	cmp	r3, r2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e053      	b.n	800153e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001496:	4b2d      	ldr	r3, [pc, #180]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f003 020c 	and.w	r2, r3, #12
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d1eb      	bne.n	8001480 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014a8:	4b27      	ldr	r3, [pc, #156]	; (8001548 <HAL_RCC_ClockConfig+0x1c0>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0307 	and.w	r3, r3, #7
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d210      	bcs.n	80014d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014b6:	4b24      	ldr	r3, [pc, #144]	; (8001548 <HAL_RCC_ClockConfig+0x1c0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f023 0207 	bic.w	r2, r3, #7
 80014be:	4922      	ldr	r1, [pc, #136]	; (8001548 <HAL_RCC_ClockConfig+0x1c0>)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014c6:	4b20      	ldr	r3, [pc, #128]	; (8001548 <HAL_RCC_ClockConfig+0x1c0>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	683a      	ldr	r2, [r7, #0]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d001      	beq.n	80014d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e032      	b.n	800153e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0304 	and.w	r3, r3, #4
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d008      	beq.n	80014f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014e4:	4b19      	ldr	r3, [pc, #100]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	4916      	ldr	r1, [pc, #88]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 80014f2:	4313      	orrs	r3, r2
 80014f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0308 	and.w	r3, r3, #8
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d009      	beq.n	8001516 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001502:	4b12      	ldr	r3, [pc, #72]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	691b      	ldr	r3, [r3, #16]
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	490e      	ldr	r1, [pc, #56]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 8001512:	4313      	orrs	r3, r2
 8001514:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001516:	f000 f821 	bl	800155c <HAL_RCC_GetSysClockFreq>
 800151a:	4602      	mov	r2, r0
 800151c:	4b0b      	ldr	r3, [pc, #44]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	091b      	lsrs	r3, r3, #4
 8001522:	f003 030f 	and.w	r3, r3, #15
 8001526:	490a      	ldr	r1, [pc, #40]	; (8001550 <HAL_RCC_ClockConfig+0x1c8>)
 8001528:	5ccb      	ldrb	r3, [r1, r3]
 800152a:	fa22 f303 	lsr.w	r3, r2, r3
 800152e:	4a09      	ldr	r2, [pc, #36]	; (8001554 <HAL_RCC_ClockConfig+0x1cc>)
 8001530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001532:	4b09      	ldr	r3, [pc, #36]	; (8001558 <HAL_RCC_ClockConfig+0x1d0>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff f9bc 	bl	80008b4 <HAL_InitTick>

  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40022000 	.word	0x40022000
 800154c:	40021000 	.word	0x40021000
 8001550:	080016b0 	.word	0x080016b0
 8001554:	20000000 	.word	0x20000000
 8001558:	20000004 	.word	0x20000004

0800155c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800155c:	b480      	push	{r7}
 800155e:	b087      	sub	sp, #28
 8001560:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	2300      	movs	r3, #0
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
 800156e:	2300      	movs	r3, #0
 8001570:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001576:	4b1e      	ldr	r3, [pc, #120]	; (80015f0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f003 030c 	and.w	r3, r3, #12
 8001582:	2b04      	cmp	r3, #4
 8001584:	d002      	beq.n	800158c <HAL_RCC_GetSysClockFreq+0x30>
 8001586:	2b08      	cmp	r3, #8
 8001588:	d003      	beq.n	8001592 <HAL_RCC_GetSysClockFreq+0x36>
 800158a:	e027      	b.n	80015dc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800158c:	4b19      	ldr	r3, [pc, #100]	; (80015f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800158e:	613b      	str	r3, [r7, #16]
      break;
 8001590:	e027      	b.n	80015e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	0c9b      	lsrs	r3, r3, #18
 8001596:	f003 030f 	and.w	r3, r3, #15
 800159a:	4a17      	ldr	r2, [pc, #92]	; (80015f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800159c:	5cd3      	ldrb	r3, [r2, r3]
 800159e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d010      	beq.n	80015cc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015aa:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <HAL_RCC_GetSysClockFreq+0x94>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	0c5b      	lsrs	r3, r3, #17
 80015b0:	f003 0301 	and.w	r3, r3, #1
 80015b4:	4a11      	ldr	r2, [pc, #68]	; (80015fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80015b6:	5cd3      	ldrb	r3, [r2, r3]
 80015b8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a0d      	ldr	r2, [pc, #52]	; (80015f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80015be:	fb03 f202 	mul.w	r2, r3, r2
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c8:	617b      	str	r3, [r7, #20]
 80015ca:	e004      	b.n	80015d6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4a0c      	ldr	r2, [pc, #48]	; (8001600 <HAL_RCC_GetSysClockFreq+0xa4>)
 80015d0:	fb02 f303 	mul.w	r3, r2, r3
 80015d4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	613b      	str	r3, [r7, #16]
      break;
 80015da:	e002      	b.n	80015e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015dc:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80015de:	613b      	str	r3, [r7, #16]
      break;
 80015e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015e2:	693b      	ldr	r3, [r7, #16]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	371c      	adds	r7, #28
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	40021000 	.word	0x40021000
 80015f4:	007a1200 	.word	0x007a1200
 80015f8:	080016c0 	.word	0x080016c0
 80015fc:	080016d0 	.word	0x080016d0
 8001600:	003d0900 	.word	0x003d0900

08001604 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800160c:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <RCC_Delay+0x34>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a0a      	ldr	r2, [pc, #40]	; (800163c <RCC_Delay+0x38>)
 8001612:	fba2 2303 	umull	r2, r3, r2, r3
 8001616:	0a5b      	lsrs	r3, r3, #9
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	fb02 f303 	mul.w	r3, r2, r3
 800161e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001620:	bf00      	nop
  }
  while (Delay --);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	1e5a      	subs	r2, r3, #1
 8001626:	60fa      	str	r2, [r7, #12]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1f9      	bne.n	8001620 <RCC_Delay+0x1c>
}
 800162c:	bf00      	nop
 800162e:	bf00      	nop
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr
 8001638:	20000000 	.word	0x20000000
 800163c:	10624dd3 	.word	0x10624dd3

08001640 <__libc_init_array>:
 8001640:	b570      	push	{r4, r5, r6, lr}
 8001642:	2600      	movs	r6, #0
 8001644:	4d0c      	ldr	r5, [pc, #48]	; (8001678 <__libc_init_array+0x38>)
 8001646:	4c0d      	ldr	r4, [pc, #52]	; (800167c <__libc_init_array+0x3c>)
 8001648:	1b64      	subs	r4, r4, r5
 800164a:	10a4      	asrs	r4, r4, #2
 800164c:	42a6      	cmp	r6, r4
 800164e:	d109      	bne.n	8001664 <__libc_init_array+0x24>
 8001650:	f000 f822 	bl	8001698 <_init>
 8001654:	2600      	movs	r6, #0
 8001656:	4d0a      	ldr	r5, [pc, #40]	; (8001680 <__libc_init_array+0x40>)
 8001658:	4c0a      	ldr	r4, [pc, #40]	; (8001684 <__libc_init_array+0x44>)
 800165a:	1b64      	subs	r4, r4, r5
 800165c:	10a4      	asrs	r4, r4, #2
 800165e:	42a6      	cmp	r6, r4
 8001660:	d105      	bne.n	800166e <__libc_init_array+0x2e>
 8001662:	bd70      	pop	{r4, r5, r6, pc}
 8001664:	f855 3b04 	ldr.w	r3, [r5], #4
 8001668:	4798      	blx	r3
 800166a:	3601      	adds	r6, #1
 800166c:	e7ee      	b.n	800164c <__libc_init_array+0xc>
 800166e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001672:	4798      	blx	r3
 8001674:	3601      	adds	r6, #1
 8001676:	e7f2      	b.n	800165e <__libc_init_array+0x1e>
 8001678:	080016d4 	.word	0x080016d4
 800167c:	080016d4 	.word	0x080016d4
 8001680:	080016d4 	.word	0x080016d4
 8001684:	080016d8 	.word	0x080016d8

08001688 <memset>:
 8001688:	4603      	mov	r3, r0
 800168a:	4402      	add	r2, r0
 800168c:	4293      	cmp	r3, r2
 800168e:	d100      	bne.n	8001692 <memset+0xa>
 8001690:	4770      	bx	lr
 8001692:	f803 1b01 	strb.w	r1, [r3], #1
 8001696:	e7f9      	b.n	800168c <memset+0x4>

08001698 <_init>:
 8001698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800169a:	bf00      	nop
 800169c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800169e:	bc08      	pop	{r3}
 80016a0:	469e      	mov	lr, r3
 80016a2:	4770      	bx	lr

080016a4 <_fini>:
 80016a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016a6:	bf00      	nop
 80016a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016aa:	bc08      	pop	{r3}
 80016ac:	469e      	mov	lr, r3
 80016ae:	4770      	bx	lr
